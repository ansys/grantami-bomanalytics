# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.13.1
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# # Performing a BoM Query

# Bom queries rely on a Bill of Materials in the Granta 17/11 format. XSD is supplied in the documentation.

# This example will go through how to use the lxml package to validate the XML file, before running an Impacted
# Substances query against a Bill of Materials.

# Assuming the XML file is generated by a Granta MI product and has not been modified, it is possible to skip this step
# in an implementation. However, given that validation is a simple step, it is advised to always validate the XML BoM
# before building the query.

# If the XML file is either invalid XML or not compliant with the XML schema, an error will be returned. The error will
# also be logged on the MI Server in the Servicelayer log.

# ## Validating an XML file with an XSD Schema

# The `lxml` package provides a similar API to the standard library xml module, but includes some additional
# functionality, including schema validation. First import `lxml`, and then build a simple validator function that takes
# the xml file and schema file, and returns the result

from lxml import etree


def xml_validator(xml: str, schema_file: str) -> bool:
    schema = etree.XMLSchema(file=schema_file)
    doc = etree.fromstring(xml)
    return schema.validate(doc)

# We can use our function to test the validity of a BoM generated by the BoM Analyzer.

valid_xml_file = "../supporting-files/bom-complex.xml"
with open(valid_xml_file) as f:
    valid_xml = f.read()
result = xml_validator(valid_xml, "../supporting-files/BillOfMaterialsEco.xsd")
result

# We can also test a clearly invalid BoM (uncomment the lines below to see how this file is clearly not compliant with
# the schema).

invalid_xml_file = "../supporting-files/invalid-bom.xml"
with open(invalid_xml_file) as f:
    invalid_xml = f.read()
result = xml_validator(invalid_xml, "../supporting-files/BillOfMaterialsEco.xsd")
result

# ## Running an XML-based Query

# Now we have validated the XML, we can build our XML query.

# Set logging to INFO to eliminate some noise from the log entries.

import logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

from ansys.grantami.bomanalytics import Connection
cxn = Connection("http://localhost/mi_servicelayer").with_autologon().build()

# First build the query with the valid XML, and observe the response as expected.

from ansys.grantami.bomanalytics import queries
query = queries.BomImpactedSubstancesQuery().with_bom(valid_xml).with_legislations(['The SIN List 2.1 (Substitute It Now!)'])

result = cxn.run(query)
result

# Finally, try running a query with the broken XML and observe the stack trace returned by the package. This includes
# the 400 response from the service layer. Uncomment to see the result.

broken_query = queries.BomImpactedSubstancesQuery().with_bom(invalid_xml).with_legislations(['The SIN List 2.1 (Substitute It Now!)'])
# cxn.run(broken_query)
