on:
  workflow_call:
    inputs:
      skip-vm-management:
        description: >
          Whether to skip or not the start up of the virtual machine. Default
          value is ``false``.
        required: false
        default: false
        type: boolean
    secrets:
      AZURE_APP_ID:
        required: true
      AZURE_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_RESOURCE_GROUP:
        required: true
      AZURE_VM_NAME_NEXT:
        required: true
      CODECOV_TOKEN:
        required: true
      TEST_SERVER_URL_NEXT:
        required: true
      TEST_SERVER_READ_USER:
        required: true
      TEST_SERVER_READ_PASS:
        required: true
      TEST_SERVER_WRITE_USER:
        required: true
      TEST_SERVER_WRITE_PASS:
        required: true
  workflow_dispatch:

concurrency:
  group: integration-server
  cancel-in-progress: false

jobs:
  start_vm:
    name: Start Azure VM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Start VM with Azure CLI
        id: azure_cli
        uses: azure/CLI@v2
        if: ${{ !(inputs.skip-vm-management)}}
        with:
          azcliversion: 2.32.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az vm start -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets.AZURE_VM_NAME_NEXT }}

      - name: Check server is ready
        run: |
          pip install requests --disable-pip-version-check
          python cicd/check_server.py
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_URL_NEXT}}
          TEST_USER: ${{secrets.TEST_SERVER_READ_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_READ_PASS}}

  integration_tests:
    name: Integration tests
    runs-on: ${{ matrix.os }}
    needs: start_vm

    strategy:
      max-parallel: 1
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install kerberos headers (ubuntu only)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt install libkrb5-dev

      - name: Install dependencies
        run: pip install poetry 'tox<4' --disable-pip-version-check

      - name: Test with tox (integration tests only)
        run: tox -- -m "integration"
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_URL_NEXT}}
          TEST_USER: ${{secrets.TEST_SERVER_READ_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_READ_PASS}}
          TEST_WRITE_USER: ${{secrets.TEST_SERVER_WRITE_USER}}
          TEST_WRITE_PASS: ${{secrets.TEST_SERVER_WRITE_PASS}}

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        if: ${{ matrix.os  == 'ubuntu-latest' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml
          flags: integration
          fail_ci_if_error: true

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    needs: integration_tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install libkrb5-dev
          sudo apt install pandoc
          sudo apt install texlive-latex-extra latexmk texlive-xetex fonts-freefont-otf xindy

      - name: Install library
        run: |
          pip install poetry --disable-pip-version-check
          poetry install --with doc

      - name: Build HTML Documentation
        run:  make -C doc html SPHINXOPTS="-W"
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_URL_NEXT}}
          TEST_USER: ${{secrets.TEST_SERVER_READ_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_READ_PASS}}
          BUILD_EXAMPLES: 1

      - name: Build PDF Documentation
        run: make -C doc latexpdf

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v4
        with:
          name: Documentation-html
          path: doc/build/html
          retention-days: 7

      - name: Upload PDF Documentation
        uses: actions/upload-artifact@v4
        with:
          name: Documentation-pdf
          path: doc/build/latex/*.pdf
          retention-days: 7

  check_workflow_runs:
    needs: docs
    uses: ./.github/workflows/check-concurrent-workflows.yml

  stop_vm:
    name: Stop Azure VM
    runs-on: ubuntu-latest
    needs: check_workflow_runs
    if: always() && !cancelled() && !(inputs.skip-vm-management) && needs.check_workflow_runs.outputs.active-runs != 'true'

    steps:
      - name: Stop Azure VM
        uses: azure/CLI@v2
        with:
          azcliversion: 2.32.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az vm deallocate -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets.AZURE_VM_NAME_NEXT }} --no-wait
