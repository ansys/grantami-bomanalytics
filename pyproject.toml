[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ansys-grantami-bomanalytics"
description = "Perform compliance analysis on materials data stored in Granta MI."
version = "1.2.0"
license = "MIT"
authors = ["ANSYS, Inc."]
maintainers = ["PyAnsys Maintainers <pyansys.maintainers@ansys.com>"]
repository = "https://github.com/pyansys/grantami-bomanalytics"
documentation = "https://bomanalytics.grantami.docs.pyansys.com"
readme = "README.rst"
keywords = [
  "Ansys",
  "Granta MI",
  "Bill of Materials",
]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
packages = [
  { include = "**/*.py", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.7.1"

# Packages for core library
importlib_metadata = { version = ">=1.0", python  = "<3.8" }  # Granta MI STK requires 3.4.0
ansys-openapi-common = "< 2.0.0"
ansys-grantami-bomanalytics-openapi = "1.0.0"

# Packages for the examples extra
jupyterlab = { version = "3.5.0", optional = true }
lxml = { version = "4.9.1", optional = true }
pandas = { version = "1.3.5", optional = true }
tabulate = { version = "0.9.0", optional = true }

[tool.poetry.group.dev.dependencies]
# Common packages for test, examples, and docs
jupyterlab = { version = "3.5.0" }
lxml = { version = "4.9.1" }
pandas = { version = "1.3.5" }
tabulate = { version = "0.9.0" }
pytest = { version = "7.2.0" }
pytest-cov = { version = "4.0.0" }
requests-mock = { version = "1.10.0" }
ipython = { version = "7.34.0" }

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
# Doc packages
ansys-sphinx-theme = "^0.9.5"
numpydoc = { version = "1.5.0" }
sphinx = { version = "4.5.0" }
sphinx-notfound-page = { version = "0.8.3" }
sphinx-copybutton = { version = "0.5.1" }
enum_tools = { version = "0.9.0.post1" }
sphinx-toolbox = { version = "3.4.0" }
jupytext = { version = "1.14.1" }
nbsphinx = { version = "0.8.10" }

[tool.poetry.extras]

examples = [
  "lxml",
  "tabulate",
  "pandas",
  "jupyterlab",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37,py38,py39,py310,py311
isolated_build = True
requires =
  tox-gh-actions==2.9.1

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
whitelist_externals = poetry
commands_pre =
    poetry install --no-root
commands = poetry run pytest --cov=ansys.grantami.bomanalytics --cov-report=xml {posargs}
passenv =
    TEST_SL_URL
    TEST_USER
    TEST_PASS

[testenv:style]
deps =
    codespell==2.1.0
    flake8==3.9.2
    black
    mypy==0.910
commands =
    codespell ./src ./tests ./examples ./doc/source
    flake8 ./src ./tests ./examples
    black ./src ./tests --check
    mypy ./src
"""

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = "./tests"
markers = [
    """integration: test requires a real database (deselect with '-m \"not integration\"')"""
]

[tool.black]
line-length = 120
