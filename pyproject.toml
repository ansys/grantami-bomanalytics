[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ansys-grantami-bomanalytics"
description = "Perform compliance analysis on materials data stored in Granta MI."
version = "1.0.0"
license = "MIT"
authors = ["ANSYS, Inc."]
maintainers = ["PyAnsys Maintainers <pyansys.maintainers@ansys.com>"]
repository = "https://github.com/pyansys/grantami-bomanalytics"
documentation = "https://grantami.docs.pyansys.com"
readme = "README.rst"
keywords = [
  "Ansys",
  "Granta MI",
  "Bill of Materials",
]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
packages = [
  { include = "**/*.py", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.7.1"

# Packages for core library
importlib_metadata = { version = ">=1.0", python  = "<3.8" }  # Granta MI STK requires 3.4.0
ansys-openapi-common = "< 2.0.0"
ansys-grantami-bomanalytics-openapi = "1.0.0"

# Common packages for test, examples, and docs
jupyterlab = { version = "3.4.4", optional = true }
lxml = { version = "4.9.1", optional = true }
pandas = { version = "1.3.5", optional = true }
tabulate = { version = "0.8.10", optional = true }

# Test and examples packages
pytest = { version = "7.1.2", optional = true }
pytest-cov = { version = "3.0.0", optional = true }
requests-mock = { version = "1.9.3", optional = true }
ipython = { version = "7.34.0", optional = true }

# Doc packages
pyansys-sphinx-theme = { version = "0.3.1", optional = true }
numpydoc = { version = "1.4.0", optional = true }
sphinx = { version = "4.5.0", optional = true }
sphinx_autodoc_typehints = { version = "1.18.3", optional = true }
sphinx-notfound-page = { version = "0.8.3", optional = true }
sphinx-copybutton = { version = "0.5.0", optional = true }
enum_tools = { version = "0.9.0.post1", optional = true }
sphinx-toolbox = { version = "3.1.2", optional = true }
jupytext = { version = "1.14.0", optional = true }
nbsphinx = { version = "0.8.9", optional = true }

[tool.poetry.extras]
test = [
  "pytest",
  "pytest-cov",
  "requests-mock",
  "lxml",
  "tabulate",
  "pandas",
  "ipython",
]

doc = [
  "pyansys-sphinx-theme",
  "numpydoc",
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinx-notfound-page",
  "sphinx-copybutton",
  "enum_tools",
  "sphinx-toolbox",
  "jupyterlab",
  "jupytext",
  "lxml",
  "tabulate",
  "pandas",
  "nbsphinx",
]

examples = [
  "lxml",
  "tabulate",
  "pandas",
  "jupyterlab",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37,py38,py39,py310
isolated_build = True

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310

[testenv]
deps =
  .[test]
commands = pytest --cov=ansys.grantami.bomanalytics --cov-report=xml {posargs}
passenv =
    TEST_SL_URL
    TEST_USER
    TEST_PASS

[testenv:style]
deps =
    codespell==2.1.0
    flake8==3.9.2
    black
    mypy==0.910
commands =
    codespell ./src ./tests ./examples ./doc/source
    flake8 ./src ./tests ./examples
    black ./src ./tests --check
    mypy ./src
"""

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = "./tests"
markers = [
    """integration: test requires a real database (deselect with '-m \"not integration\"')"""
]

[tool.black]
line-length = 120
