[{"objectID":"Home","href":"api/compliance/materials.html#material-compliance","title":"Material compliance","text":"Material compliance"},{"objectID":"Home","href":"api/compliance/materials.html#query-definition","title":"Material compliance > Query definition","text":"Query definition\n\n\n\nclass MaterialComplianceQuery\n\nEvaluates compliance for Granta MI material records against a number of indicators.\n\nIf the materials are associated with substances, these are also evaluated and returned.\n\nAll methods used to add materials and indicators to this query return the query itself so that they can be chained\ntogether as required. Records can be added using a combination of any of the available methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nMaterialComplianceQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> query = (\n...     MaterialComplianceQuery()\n...     .with_material_ids(['elastomer-butadienerubber', 'NBR-100'])\n...     .with_indicators([indicator])\n... )\n>>> cxn.run(query)\n<MaterialComplianceQueryResult: 2 MaterialWithCompliance results>\n\n\n\n\n\nwith_indicators(indicators)\n\nAdd a list or set of WatchListIndicator or\nRoHSIndicator objects to evaluate compliance against.\n\nParameters\n\nindicators\n\npython:list[WatchListIndicator | RoHSIndicator]\n\nList of indicators.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described above.\n\nExamples\n\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> MaterialComplianceQuery().with_indicators([indicator])\n<MaterialCompliance: 0 materials, batch size = 100, 1 indicators>\n\n\n\nwith_material_ids(material_ids, external_database_key=None)\n\nAdd a list or set of materials to a material query, referenced by the material ID attribute value.\n\nMaterial IDs are valid for both MaterialUniverse and Materials - in house records.\n\nIf the records referenced by values in the material_ids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nmaterial_ids\n\npython:list[python:str] | set[set]\n\nList or set of material IDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the material_ids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_material_ids(['elastomer-butadienerubber', 'NBR-100'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>"},{"objectID":"Home","href":"api/compliance/materials.html#query-result","title":"Material compliance > Query result","text":"Query result\n\n\n\nclass MaterialComplianceQueryResult(results, indicator_definitions, messages)\n\nRetrieves the result of running the MaterialComplianceQuery\nclass.\n\nThis class describes the compliance status of materials against one or more indicators.\n\n\n\n\n\ncompliance_by_indicator\n\nCompliance status for each indicator in the original query. The indicator name\nis used as the dictionary key.\n\nThe result for each indicator is determined by taking the worst result for that indicator across all items\nincluded in the query.\n\nReturns\n\npython:dict[python:str, WatchListIndicator | RoHSIndicator]\n\n\n\nExamples\n\n>>> compliance_result: MaterialComplianceQueryResult\n>>> compliance_result.compliance_by_indicator\n{'Prop 65': <WatchListIndicator,\n        name: Prop 65,\n        flag: WatchListFlag.WatchListAboveThreshold>\n}\n\n\n\ncompliance_by_material_and_indicator\n\nCompliance status for each material specified in the original query.\n\nBecause materials do not have a single well-defined reference, the results are provided as a flat list.\n\nReturns\n\npython:list[MaterialWithComplianceResult]\n\n\n\nExamples\n\n>>> result: MaterialComplianceQueryResult\n>>> result.compliance_by_material_and_indicator\n[<MaterialWithComplianceResult({MaterialId: elastomer-butadienerubber}),\n        1 indicators>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/compliance/materials.html#material-result","title":"Material compliance > Material result","text":"Material result\n\n\n\nclass MaterialWithComplianceResult(**kwargs)\n\nRetrieves an individual material included as part of a compliance query result.\nThis object includes three categories of attributes:\n\nThe reference to the material in Granta MI\n\nThe compliance status of this material, stored in a dictionary of one or more indicator objects\n\nAny substance objects that are a child of this material object\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty material_id: str | None\n\nMaterial ID.\n\n\n\nproperty equivalent_references: list[MaterialReference] | None\n\nOther material records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty indicators: Dict[str, WatchListIndicator | RoHSIndicator]\n\nCompliance status of this item for each indicator included in the original query.\n\n\n\nproperty substances: List[SubstanceWithComplianceResult]\n\nSubstance compliance result objects that are direct children of this item in the BoM.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/compliance/index.html#compliance-api","title":"Compliance API","text":"Compliance API\n\nThe ref_grantami_bomanalytics_api_compliance_substances,\nref_grantami_bomanalytics_api_compliance_materials,\nref_grantami_bomanalytics_api_compliance_specifications, and\nref_grantami_bomanalytics_api_compliance_parts queries (collectively referred to as\nrecord-based compliance queries) can be used to determine the compliance of records in a Granta MI\ndatabase. These queries also consider any additional associated BoM items stored in Granta MI.\nFor example, if the specified part record contains links to other parts and specifications, these\nare included in the analysis.\n\nThe ref_grantami_bomanalytics_api_compliance_bom query accepts a BoM (bill of materials) in\nXML format and returns the compliance status of the BoM based on the BoM’s contents. As opposed to\nrecord-based queries, the BoM compliance analysis only considers items explicitly defined in the\ninput BoM. It does not follow links to other BoM items as in the record-based queries described\npreviously.\n\nIn both cases, compliance is determined based on a number of\nref_grantami_bomanalytics_api_compliance_indicators. An indicator is a collection of one or\nmore legislations and a threshold. If a certain record directly or indirectly contains substances\nimpacted by one of the specified legislations in an amount that exceeds the threshold, the record is\nnot compliant with that indicator. For more information about possible results, see the definitions\nof the indicators.\n\nIn general, the result of each query is a recursive BoM (or multi-level BoM) that shows the\ncompliance status and impacted substances at each level. If you are looking for a simple\ndetermination of the substances indirectly or directly contained within a item represented by a\nGranta MI record, consider using the\nref_grantami_bomanalytics_api_impactedsubstances_index.\n\nThe API documented in this section is only available if you have the MI Restricted\nSubstances feature included in your license. A\nLicensingException is raised if the feature is not\navailable.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/sustainability/bom_summary.html#bom-sustainability-summary","title":"BoM sustainability summary","text":"BoM sustainability summary"},{"objectID":"Home","href":"api/sustainability/bom_summary.html#query-definition","title":"BoM sustainability summary > Query definition","text":"Query definition\n\n\n\nclass BomSustainabilitySummaryQuery\n\nEvaluates sustainability impact for an XML BoM and returns aggregated metrics.\n\n23/01 XML BoMs supported by MI Restricted Substances and Sustainability Reports 2024 R2 or later.\n\n24/12 XML BoMs supported by MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nThe methods used to configure units and add the BoM to this query return the query itself so that they can be\nchained together as required.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nBomSustainabilitySummaryQueryResult.\n\nAdded in version 2.0.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> bom = \"<PartsEco xmlns...\"\n>>> query = (\n...     BomSustainabilitySummaryQuery()\n...     .with_bom(bom)\n... )\n>>> cxn.run(query)\n\n\n\n\n\nwith_bom(bom)\n\nSet the BoM to use for the query.\n\nSee the documentation for the parent query class for supported BoM formats.\n\nMinimal validation is performed on the provided BoM to ensure it defines a supported XML schema. XSD files are\nprovided in schemas for full validation.\n\nParameters\n\nbom\n\npython:str\n\nBoM to use for the query.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError raised if the method is called with values that do not match the types described earlier.\n\nValueError\n\nError raised if the bom isn’t valid XML, or isn’t in a known supported BoM format.\n\nNotes\n\nSee the ansys.grantami.bomanalytics.schemas subpackage for Ansys Granta XML BoM Schema Definitions.\n\n\n\nwith_units(distance=None, energy=None, mass=None)\n\nSpecifies units to use in the response.\n\nSets all units, overriding any previous configuration. The specified units must exist in the target database.\nUnits not set will default to the API default unit:\n\nDistance: km\n\nEnergy: MJ\n\nMass: kg\n\nParameters\n\ndistance\n\npython:str | python:None\n\nUnit for distance.\n\nenergy\n\npython:str | python:None\n\nUnit for energy.\n\nmass\n\npython:str | python:None\n\nUnit for mass."},{"objectID":"Home","href":"api/sustainability/bom_summary.html#query-result","title":"BoM sustainability summary > Query result","text":"Query result\n\n\n\nclass BomSustainabilitySummaryQueryResult(results, messages)\n\nDescribes the result of running a BomSustainabilitySummaryQuery.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty messages: List[LogMessage]\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr.\n\n\n\nproperty phases_summary: List[SustainabilityPhaseSummaryResult]\n\nSustainability summary for all lifecycle phases analyzed by the query.\n\n\n\nproperty transport: SustainabilityPhaseSummaryResult\n\nSustainability summary for the transport phase.\n\nValues in percentages express the contribution of this phase, relative to the total contribution of all phases\nanalyzed by the query.\n\n\n\nproperty material: SustainabilityPhaseSummaryResult\n\nSustainability summary for the material phase.\n\nValues in percentages express the contribution of this phase, relative to the total contribution of all phases\nanalyzed by the query.\n\n\n\nproperty process: SustainabilityPhaseSummaryResult\n\nSustainability summary for the process phase.\n\nValues in percentages express the contribution of this phase, relative to the total contribution of all phases\nanalyzed by the query.\n\n\n\nproperty distribution_transport_summary: TransportSummaryByCategoryResult | None\n\nAggregated information for all distribution transport stages.\n\nValues in percentages express the contribution of all distribution transport stages relative to the total\ncontribution from transportation in the BoM.\n\nOnly available if a 24/12 XML BoM was specified for BomSustainabilitySummaryQuery.with_bom().\n\nAdded in version 2.3.\n\nNotes\n\nThis property is only populated if the Granta MI servers includes MI Restricted Substances and Sustainability\nReports 2025 R2 and later. Otherwise, this property will return None.\n\n\n\nproperty manufacturing_transport_summary: TransportSummaryByCategoryResult | None\n\nAggregated information for all manufacturing transport stages.\n\nValues in percentages express the contribution of all manufacturing transport stages relative to the total\ncontribution from transportation in the BoM.\n\nAdded in version 2.3.\n\nNotes\n\nThis property is only populated if the Granta MI servers includes MI Restricted Substances and Sustainability\nReports 2025 R2 and later. Otherwise, this property will return None.\n\n\n\nproperty transport_details: List[TransportSummaryResult]\n\nSummary information for each transport stage described in the BoM.\n\nValues in percentages express the contribution of the specific transport stage, relative to the total\ncontribution from transportation in the BoM.\n\n\n\nproperty transport_details_aggregated_by_part: List[TransportSummaryByPartResult]\n\nSummary information for transport stages, aggregated by part.\n\nRelative and absolute contributions for parts whose relative contributions from transport exceed 5% of the total\nimpact for parts (by embodied_energy_percentage or\nclimate_change_percentage).\n\nAll parts in the BoM that do not exceed the 5% threshold are aggregated under a virtual\nTransportSummaryByPartResult, whose part_name property is equal\nto Other.\n\nValues in percentages express the combined contribution of all transport stages associated with a part, relative\nto the total contribution from transportation in the BoM.\n\nAdded in version 2.3.\n\nNotes\n\nThis property is only populated if the following conditions are all true:\n\nThe Granta MI server includes MI Restricted Substances and Sustainability Reports 2025 R2 and later.\n\nA 24/12 BoM was provided to BomSustainabilitySummaryQuery.with_bom().\n\nAt least one or more transport stages was defined for at least one part.\n\nOtherwise, this property will return an empty list.\n\n\n\nproperty material_details: List[MaterialSummaryResult]\n\nSummary information for materials, aggregated by identity.\n\nRelative and absolute contributions for materials whose relative contributions exceed 2% of the total impact\nfor materials (by embodied_energy_percentage or\nclimate_change_percentage).\n\nAll materials in the BoM that do not exceed the 2% threshold are aggregated under a virtual\nMaterialSummaryResult, whose identity property is equal to\nOther.\n\nValues in percentages express the contribution of the specific material, relative to contributions of all\nmaterials.\n\n\n\nproperty primary_processes_details: List[ProcessSummaryResult]\n\nSummary information for primary processes, aggregated by process_name and material_identity.\n\nThe returned list includes all unique primary process/material combinations whose relative contributions\nexceed 5% of the total impact of all primary processes (by\nembodied_energy_percentage or\nclimate_change_percentage).\n\nAll process/material combinations that do not exceed the 5% threshold are aggregated under a virtual\nProcessSummaryResult, whose process_name is equal to Other.\n\nValues in percentages express the contribution of the specific process, relative to contributions of all\nprimary processes.\n\n\n\nproperty secondary_processes_details: List[ProcessSummaryResult]\n\nSummary information for secondary processes, aggregated by process_name and material_identity.\n\nThe returned list includes all unique secondary process/material combinations whose relative contributions\nexceed 5% of the total impact of all secondary processes (by\nembodied_energy_percentage or\nclimate_change_percentage).\n\nAll process/material combinations that do not exceed the 5% threshold are aggregated under a virtual\nProcessSummaryResult, whose process_name is equal to Other.\n\nValues in percentages express the contribution of the specific process, relative to contributions of all\nsecondary processes.\n\n\n\nproperty joining_and_finishing_processes_details: List[ProcessSummaryResult]\n\nSummary information for joining and finishing processes, , aggregated by process_name and\nmaterial_identity.\n\nThe returned list includes all joining and finishing processes whose relative contributions exceed 5% of the\ntotal impact of all joining and finishing processes (by\nembodied_energy_percentage or\nclimate_change_percentage).\n\nAll processes that do not exceed the 5% threshold are aggregated under a virtual\nProcessSummaryResult, whose process_name is equal to Other.\n\nValues in percentages express the contribution of the specific process, relative to contributions of all\njoining and finishing processes."},{"objectID":"Home","href":"api/sustainability/bom_summary.html#phase-summary","title":"BoM sustainability summary > Phase summary","text":"Phase summary\n\n\n\nclass SustainabilityPhaseSummaryResult(name, **kwargs)\n\nHigh-level sustainability summary for a phase.\n\nPhases currently include:\n\nMaterial\n\nProcesses\n\nTransport\n\nAdded in version 2.0.\n\n\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by ecoinvent.\n\n\n\nproperty embodied_energy_percentage: float\n\nRepresents the percentage contribution of the item to total embodied energy of the parent collection.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty climate_change_percentage: float\n\nRepresents the percentage contribution of the item to total climate change of the parent collection.\n\n\n\nproperty name: str\n\nName of the phase. Supported values are Material, Processes, and Transport."},{"objectID":"Home","href":"api/sustainability/bom_summary.html#transport","title":"BoM sustainability summary > Transport","text":"Transport\n\n\n\nclass TransportSummaryResult(name, transport_reference, **kwargs)\n\nSustainability summary for a transport stage.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by ecoinvent.\n\n\n\nproperty embodied_energy_percentage: float\n\nRepresents the percentage contribution of the item to total embodied energy of the parent collection.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty climate_change_percentage: float\n\nRepresents the percentage contribution of the item to total climate change of the parent collection.\n\n\n\nproperty distance: ValueWithUnit\n\nDistance covered by this transport summary.\n\n\n\nproperty name: str | None\n\nName of the transport stage.\n\n\n\nproperty transport_reference: TransportReference\n\nTransport record reference.\n\n\n\nclass TransportSummaryByCategoryResult(**kwargs)\n\nAggregated sustainability summary for all transport stages in a category.\n\nAdded in version 2.3.\n\n\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by ecoinvent.\n\n\n\nproperty embodied_energy_percentage: float\n\nRepresents the percentage contribution of the item to total embodied energy of the parent collection.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty climate_change_percentage: float\n\nRepresents the percentage contribution of the item to total climate change of the parent collection.\n\n\n\nproperty distance: ValueWithUnit\n\nDistance covered by this transport summary.\n\n\n\nclass TransportSummaryByPartResult(part_name, parent_part_name, category, transport_types, **kwargs)\n\nAggregated sustainability summary for all transport stages associated with a part.\n\nAdded in version 2.3.\n\n\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by ecoinvent.\n\n\n\nproperty embodied_energy_percentage: float\n\nRepresents the percentage contribution of the item to total embodied energy of the parent collection.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty climate_change_percentage: float\n\nRepresents the percentage contribution of the item to total climate change of the parent collection.\n\n\n\nproperty distance: ValueWithUnit\n\nDistance covered by this transport summary.\n\n\n\nproperty part_name: str | None\n\nName of the part (if populated in the input BoM used in the query).\n\n\n\nproperty parent_part_name: str | None\n\nName of the parent part (if populated in the input BoM used in the query).\n\n\n\nproperty category: TransportCategory | None\n\nThe transport category for this summary.\n\nReturns None if this summary represents the aggregation of parts with transport stages that do not exceed\nthe 5% threshold.\n\n\n\nproperty transport_types: set[str]\n\nThe transport types included in this summary.\n\n\n\nclass TransportCategory(value)\n\nThe stage of the product lifecycle to which a TransportSummaryByPartResult belongs.\n\nEnum class.\n\nAdded in version 2.3.\n\n\n\nMANUFACTURING = 'Manufacturing'\n\nTransportation of individual components before the product is completed.\n\n\n\nDISTRIBUTION = 'Distribution'\n\nTransportation of the complete finished product."},{"objectID":"Home","href":"api/sustainability/bom_summary.html#material","title":"BoM sustainability summary > Material","text":"Material\n\n\n\nclass MaterialSummaryResult(identity, material_reference, mass_before_processing, mass_after_processing, contributors, **kwargs)\n\nAggregated sustainability summary for a material.\n\nDescribes the environmental footprint of a unique material, accounting for all occurrences of the material in BoM.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by ecoinvent.\n\n\n\nproperty embodied_energy_percentage: float\n\nRepresents the percentage contribution of the item to total embodied energy of the parent collection.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty climate_change_percentage: float\n\nRepresents the percentage contribution of the item to total climate change of the parent collection.\n\n\n\nproperty identity: str\n\nMaterial identity.\n\n\n\nproperty material_reference: MaterialReference\n\nMaterial record reference.\n\n\n\nproperty mass_before_processing: ValueWithUnit\n\nOriginal mass of material prior to any subtractive processing.\n\n\n\nproperty mass_after_processing: ValueWithUnit\n\nMass of material after any subtractive processing.\n\n\n\nproperty contributors: List[ContributingComponentResult]\n\nTop three parts in the BoM that are made of this material (by mass_before_processing).\n\n\n\nclass ContributingComponentResult(name, part_number, part_reference, material_mass_before_processing, **kwargs)\n\nDescribes a Part item of the BoM.\n\nListed as contributors of a MaterialSummaryResult.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty part_number: str | None\n\nPart number.\n\n\n\nproperty name: str | None\n\nName of the part (if populated in the input BoM used in the query).\n\n\n\nproperty part_reference: PartReference\n\nPart record reference.\n\n\n\nproperty material_mass_before_processing: ValueWithUnit\n\nOriginal mass of parent material prior to any subtractive processing (removal of material)."},{"objectID":"Home","href":"api/sustainability/bom_summary.html#process","title":"BoM sustainability summary > Process","text":"Process\n\n\n\nclass ProcessSummaryResult(material_identity, material_reference, process_name, process_reference, **kwargs)\n\nAggregated sustainability summary for a process.\n\nFor primary and secondary processes, this corresponds to a unique process/material combination. For joining and\nfinishing processes, this corresponds to a unique process, and material_identity and\nmaterial_reference are None.\n\nDescribes the environmental footprint of a process, accounting for all occurrences of the process-material pair\nfound in the BoM.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by ecoinvent.\n\n\n\nproperty embodied_energy_percentage: float\n\nRepresents the percentage contribution of the item to total embodied energy of the parent collection.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty climate_change_percentage: float\n\nRepresents the percentage contribution of the item to total climate change of the parent collection.\n\n\n\nproperty process_name: str\n\nProcess name.\n\n\n\nproperty process_reference: ProcessReference\n\nProcess record reference.\n\n\n\nproperty material_identity: str | None\n\nMaterial identity.\n\nOnly populated for primary and secondary processes.\n\n\n\nproperty material_reference: MaterialReference | None\n\nMaterial record reference.\n\nOnly populated for primary and secondary processes.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute"},{"objectID":"Contribute","href":"contributing.html#general-guidelines","title":"Contribute > General guidelines","text":"General guidelines\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyGranta BoM Analytics.\n\nThe following contribution information is specific to PyGranta BoM Analytics."},{"objectID":"Contribute","href":"contributing.html#developer-environment-setup","title":"Contribute > Developer environment setup","text":"Developer environment setup\n\nPyGranta BoM Analytics uses Poetry for packaging and dependency management. Installation\ninformation is available in the Poetry documentation.\n\nInstalling PyGranta BoM Analytics in developer mode allows you to modify and enhance\nthe source."},{"objectID":"Contribute","href":"contributing.html#clone-the-source-repository","title":"Contribute > Clone the source repository","text":"Clone the source repository\n\nRun the following commands to clone and install the latest version of PyGranta BoM Analytics\nin editable mode, which ensures changes to the code are immediately visible in the environment.\nRunning these commands also installs the required development dependencies to run the tests,\nbuild the documentation, and build the package."},{"objectID":"Contribute","href":"contributing.html#additional-tools","title":"Contribute > Additional tools","text":"Additional tools\n\n"},{"objectID":"Contribute","href":"contributing.html#pre-commit","title":"Contribute > Pre-commit","text":"Pre-commit\n\nThe style checks take advantage of pre-commit. Developers are not forced but\nencouraged to install this tool with this command:\n\n"},{"objectID":"Contribute","href":"contributing.html#tox","title":"Contribute > Tox","text":"Tox\n\nTests can be run using tox. The project defines the tox environments in the tox.ini\nfile. One tox environment is provided:\n\ntox -e tests: Runs all tests and checks code coverage. (For requirements, see ref_serveraccess.)\n\nOptionally, add the -- -m \"not integration\" suffix to the preceding command to skip integration\ntests. For example, this command only runs tests that do not require a Granta MI instance:\n\n"},{"objectID":"Contribute","href":"contributing.html#server-access","title":"Contribute > Server access","text":"Server access\n\nAs indicated in ref_software_requirements, running integration tests and building the examples\nrequires access to a valid Granta MI instance.\n\nExternal contributors may not have an instance of Granta MI at their disposal. Prior to creating a\npull request with the desired changes, they should make sure that unit tests pass (ref_tox),\nstatic code validation and styling pass (pre-commit), and\ndocumentation can be generated successfully without the examples\n(Documenting).\n\nContinuous Integration (CI) on GitHub is configured to run the integration tests and generate the\nfull documentation on creation and updates of pull requests. CI is not configured to run for pull\nrequests from forks. External contributions require approval from a maintainer for checks to run."},{"objectID":"Contribute","href":"contributing.html#code-formatting-and-styling","title":"Contribute > Code formatting and styling","text":"Code formatting and styling\n\nThis project adheres to PyAnsys styling and formatting recommendations. The easiest way to\nvalidate changes are compliant is to run this command:\n\n"},{"objectID":"Contribute","href":"contributing.html#documenting","title":"Contribute > Documenting","text":"Documenting\n\nAs per PyAnsys guidelines, the documentation is generated using Sphinx.\n\nFor building documentation, use the Sphinx Makefile:\n\nIf any changes have been made to the documentation, you should run\nSphinx directly with the following extra arguments:\n\nThe extra arguments ensure that all references are valid and turn warnings\ninto errors. CI uses the same configuration, so you should resolve any\nwarnings and errors locally before pushing changes."},{"objectID":"Contribute","href":"contributing.html#example-notebooks","title":"Contribute > Example notebooks","text":"Example notebooks\n\nExamples are included in the documentation to give you more context around\nthe core capabilities described in ref_grantami_bomanalytics_api_index.\nAdditional examples are welcomed, especially if they cover a key use case of the\npackage that has not yet been covered.\n\nThe example scripts are placed in the examples directory and are included\nin the documentation build if the environment variable BUILD_EXAMPLES is set\nto True. Otherwise, a different set of examples is run to validate the process.\n\nExamples are checked in as scripts using the light format. For more information,\nsee the Jupytext documentation. As part of the documentation-building\nprocess, the Python files are converted back into Jupyter notebooks and the output\ncells are populated by running the notebooks against a Granta MI instance.\n\nThis conversion between Jupyter notebooks and Python files is performed by\nnb-convert. Installation information is available in the nb-convert documentation."},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PyGranta BoM Analytics Issues page\nto report bugs and request new features. When possible, use the issue templates provided. If\nyour issue does not fit into one of these templates, click the link for opening a blank issue.\n\nIf you have general questions about the PyAnsys ecosystem, email pyansys.core@ansys.com.\nIf your question is specific to PyGranta BoM Analytics, ask your question in an issue as described in\nthe previous paragraph.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/impacted_substances/specifications.html#specification-impacted-substances","title":"Specification impacted substances","text":"Specification impacted substances"},{"objectID":"Home","href":"api/impacted_substances/specifications.html#query-definition","title":"Specification impacted substances > Query definition","text":"Query definition\n\n\n\nclass SpecificationImpactedSubstancesQuery\n\nGets the substances impacted by a list of legislations for Granta MI specification records.\n\nAll methods used to add specifications and legislations to this query return the query itself so that they can be\nchained together as required. Records can be added using a combination of any of the available methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nSpecificationImpactedSubstancesQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> query = (\n...     SpecificationImpactedSubstancesQuery()\n...     .with_specification_ids(['MIL-A-8625', 'PSP101'])\n...     .with_legislation_ids([\"Candidate_AnnexXV\"])\n... )\n>>> cxn.run(query)\n<SpecificationImpactedSubstancesQueryResult:\n                2 SpecificationWithImpactedSubstances results>\n\n\n\n\n\nwith_legislation_ids(legislation_ids)\n\nAdd a list or set of legislations to retrieve the impacted substances for.\n\nLegislations are identified based on their Legislation ID attribute value.\n\nParameters\n\nlegislation_ids\n\npython:list[python:str] | set[python:str]\n\nList or set of legislation ids.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\n\n\nwith_specification_ids(specification_ids, external_database_key=None)\n\nAdd a list or set of specifications to a specification query, referenced by specification ID.\n\nIf the records referenced by values in the specification_ids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nspecification_ids\n\npython:list[python:str] | set[python:str]\n\nList or set of specification IDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the specification_ids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SpecificationComplianceQuery()\n>>> query.with_specification_ids(['MIL-A-8625', 'PSP101'])\n<SpecificationComplianceQuery: 2 specifications, batch size = 10, 0 indicators>\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>"},{"objectID":"Home","href":"api/impacted_substances/specifications.html#query-result","title":"Specification impacted substances > Query result","text":"Query result\n\n\n\nclass SpecificationImpactedSubstancesQueryResult(results, messages)\n\nRetrieves the result of running the\nSpecificationImpactedSubstancesQuery\nclass.\n\nThis class describes the substances in the specified specifications impacted by one or more legislations.\n\n\n\n\n\nimpacted_substances_by_specification\n\nImpacted substances for each specification specified in the original query. Because\nspecifications do not have a single well-defined reference, the results are provided as\na flat list.\n\nReturns\n\npython:list[SpecificationWithImpactedSubstancesResult]\n\n\n\nExamples\n\n>>> result: SpecificationImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_specification\n[<SpecificationWithImpactedSubstancesResult({SpecificationId: MIL-A-8625}),\n        1 legislations>, ...]\n\n\n\nimpacted_substances_by_legislation\n\nView of the results for a query for impacted substances, grouped by legislation only.\n\nThe substances from all items specified in the query are merged for each legislation, providing a single\nlist of impacted substances grouped by legislation only. Substances are duplicated where they appear in\nmultiple items for the same legislation.\n\nReturns\n\nimpacted_substances\n\npython:dict[python:str, ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_legislation\n{'Candidate_AnnexXV': [\n    <ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n}\n\n\n\nimpacted_substances\n\nView of the results for a query for impacted substances, flattened into a single list.\n\nThe substances from all items specified in the query are merged across item and legislation, providing a\nsingle flat list. Substances are duplicated where they appear in multiple items or legislations.\n\nReturns\n\nimpacted_substances\n\npython:list[ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/impacted_substances/specifications.html#specification-result","title":"Specification impacted substances > Specification result","text":"Specification result\n\n\n\nclass SpecificationWithImpactedSubstancesResult(legislations, **kwargs)\n\nRetrieves an individual specification included as part of an impacted substances query result.\n\nThis object includes two categories of attributes:\n\nThe reference to the specification in Granta MI\n\nThe impacted substances associated with this specification, both as a flat list and separated by legislation\n\nNotes\n\nObjects of this class are only returned as the result of a query. The class is not intended to be instantiated\ndirectly.\n\nExamples\n\n>>> result: SpecificationImpactedSubstancesQueryResult\n>>> specification_result = result.impacted_substances_by_specification[0]\n>>> specification_result.substances_by_legislation\n{'Prop65': [<ImpactedSubstance: {\"cas_number\": 90481-04-2}>]}\n\n>>> result: SpecificationImpactedSubstancesQueryResult\n>>> specification_result = result.impacted_substances_by_specification[0]\n>>> specification_result.substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>]\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty specification_id: str | None\n\nSpecification ID.\n\n\n\nproperty equivalent_references: list[SpecificationReference] | None\n\nOther specification records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty substances_by_legislation: Dict[str, List[ImpactedSubstance]]\n\nSubstances impacted for this item, grouped by legislation ID.\n\n\n\nproperty substances: List[ImpactedSubstance]\n\nSubstances impacted for this item as a flattened list.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/0_Basic_usage.html#basic-usage-example","title":"Basic usage example","text":"Basic usage example\n\nThis example shows how to connect to Granta MI and perform a basic query for impacted substances. It also demonstrates how to view logging messages returned by the Granta MI server. For more information about the results of the queries, see the Impacted substances examples, Compliance examples, Sustainability examples, and Sustainability summary\nexamples."},{"objectID":"Home","href":"examples/0_Basic_usage.html#connect-to-granta-mi","title":"Basic usage example > Connect to Granta MI","text":"Connect to Granta MI\n\nFirst, use the ansys.grantami.bomanalytics.Connection class to connect to the Granta MI server. The Connection class uses a fluent interface to build the connection, which is always invoked in the following sequence:\n\nSpecify your Granta MI Service Layer URL as a parameter to the Connection class.\n\nSpecify the authentication method using a Connection.with_*() method.\n\nUse the Connection.connect() method to finalize the connection.\n\nThis returns a connection object, which is called cxn in these examples.\n\n\n\n\n\nIf you are running your Python script on Windows, you are generally able to use the .with_autologon() method.\n\n\n\n\n\n\n\n\n\nIf the Python script is running on Linux without Kerberos enabled, or you want to use an account other than your logged-in account, you can specify credentials explicitly.\n\n\n\n\n\n\n\n\n\nOIDC and anonymous authentication methods are also available, but they are beyond the scope of this example. For more information, see the ansys-openapi-common package documentation."},{"objectID":"Home","href":"examples/0_Basic_usage.html#construct-a-query","title":"Basic usage example > Construct a query","text":"Construct a query\n\nQueries are also constructed using a fluent interface. However, the Query constructor takes no arguments. All query details are specified using Query methods. To demonstrate this, this example builds a query to determine all substances present in an ABS material that are impacted by the REACH Candidate List legislation.\n\nFirst import the queries module and create a MaterialImpactedSubstancesQuery object.\n\n\n\n\n\n\n\n\n\nNow add the material that you want to query by specifying its material ID. (Alternate methods of specifying records are shown in other examples.)\n\n\n\n\n\n\n\n\n\nNote that because the MaterialImpactedSubstancesQuery object has a fluent interface, you receive the same object back that you started with but with the material IDs added.\n\nFinally, add the legislation to the query. Legislations are identified by their Legislation ID attribute. Candidate_AnnexXV is the ID of the EU REACH - The Candidate List legislation.\n\n\n\n\n\n\n\n\n\nFluent interfaces are designed to allow a complex object to be constructed in a single line of code. As such, you can consolidate the cells above into a single step:\n\n\n\n\n\n\n\n\n\nBecause the fluent interface can produce very long lines of code, it’s necessary to break your query creation code into multiple lines. The following multi-line format is used throughout the examples. It is functionally equivalent to the preceding cell:\n\n\n\n\n\n\n\n\n\nThe multi-line format is the recommended way of creating queries using this API."},{"objectID":"Home","href":"examples/0_Basic_usage.html#run-a-query","title":"Basic usage example > Run a query","text":"Run a query\n\nNow that you have your cxn and query objects, you can use the cxn.run() method to run the query. This returns an object that contains the results of the query.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/0_Basic_usage.html#view-query-results","title":"Basic usage example > View query results","text":"View query results\n\nIn the case of MaterialImpactedSubstancesQuery, the results object contains the list of substances present in the material that are impacted by the specified legislations. Display the five first substances in the list.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/0_Basic_usage.html#view-logged-messages","title":"Basic usage example > View logged messages","text":"View logged messages\n\nAll query results also contain a list of messages returned by the server while running the query. These are sorted in order of decreasing severity. The same messages are also available in the MI Service Layer log file.\n\n\n\n\n\n\n\n\n\nAdditionally, these messages are available via the standard logging module using the ansys.grantami.bomanalytics logger. Alternatively, you can omit the logger name to get the root logger, which includes messages logged by all packages.\n\nThe following code creates a log handler that outputs all ansys.grantami.bomanalytics logger messages with severity INFO and above to either the terminal or the notebook.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/index.html#bom-examples","title":"BoM examples","text":"BoM examples\n\nThese examples demonstrate how to create XML BoMs.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/bom_builder/schemas.html#bom-schemas","title":"BoM schemas","text":"BoM schemas\n\n\n\nSub-package providing XML Schema Definition (XSD) files for Ansys Granta BoM formats.\n\nXSD files can be used for validating XML files.\n\n\n\nbom_schema_1711: Path\n\nPath to the Ansys Granta 17/11 BoM XML Schema definition.\n\nAdded in version 2.0.\n\n\n\nbom_schema_2301: Path\n\nPath to the Ansys Granta 23/01 BoM XML Schema definition.\n\nAdded in version 2.0.\n\n\n\nbom_schema_2412: Path\n\nPath to the Ansys Granta 24/12 BoM XML Schema definition.\n\nAdded in version 2.3.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/sustainability/bom.html#bom-sustainability","title":"BoM sustainability","text":"BoM sustainability"},{"objectID":"Home","href":"api/sustainability/bom.html#query-definition","title":"BoM sustainability > Query definition","text":"Query definition\n\n\n\nclass BomSustainabilityQuery\n\nEvaluates sustainability impact for an XML BoM and returns metrics for each item in the BoM.\n\n23/01 XML BoMs supported by MI Restricted Substances and Sustainability Reports 2024 R2 or later.\n\n24/12 XML BoMs supported by MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nThe methods used to configure units and add the BoM to this query return the query itself so that they can be\nchained together as required.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nBomSustainabilityQueryResult.\n\nAdded in version 2.0.\n\nChanged in version 2.3: Added support for 24/12 XML BoMs\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> bom = \"<PartsEco xmlns...\"\n>>> query = (\n...     BomSustainabilityQuery()\n...     .with_bom(bom)\n... )\n>>> cxn.run(query)\n\n\n\n\n\nwith_bom(bom)\n\nSet the BoM to use for the query.\n\nSee the documentation for the parent query class for supported BoM formats.\n\nMinimal validation is performed on the provided BoM to ensure it defines a supported XML schema. XSD files are\nprovided in schemas for full validation.\n\nParameters\n\nbom\n\npython:str\n\nBoM to use for the query.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError raised if the method is called with values that do not match the types described earlier.\n\nValueError\n\nError raised if the bom isn’t valid XML, or isn’t in a known supported BoM format.\n\nNotes\n\nSee the ansys.grantami.bomanalytics.schemas subpackage for Ansys Granta XML BoM Schema Definitions.\n\n\n\nwith_units(distance=None, energy=None, mass=None)\n\nSpecifies units to use in the response.\n\nSets all units, overriding any previous configuration. The specified units must exist in the target database.\nUnits not set will default to the API default unit:\n\nDistance: km\n\nEnergy: MJ\n\nMass: kg\n\nParameters\n\ndistance\n\npython:str | python:None\n\nUnit for distance.\n\nenergy\n\npython:str | python:None\n\nUnit for energy.\n\nmass\n\npython:str | python:None\n\nUnit for mass."},{"objectID":"Home","href":"api/sustainability/bom.html#query-result","title":"BoM sustainability > Query result","text":"Query result\n\n\n\nclass BomSustainabilityQueryResult(results, messages)\n\nDescribes the result of running a BomSustainabilityQuery.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty messages: List[LogMessage]\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr.\n\n\n\nproperty part: PartWithSustainabilityResult\n\nSustainability information for the root part included in the BoM specified in the original\nquery.\n\n\n\nproperty transport_stages: List[TransportWithSustainabilityResult]\n\nSustainability information for each transport stage included in the BoM specified in the original\nquery."},{"objectID":"Home","href":"api/sustainability/bom.html#transport","title":"BoM sustainability > Transport","text":"Transport\n\n\n\nclass TransportWithSustainabilityResult(name, **kwargs)\n\nDescribes a transport stage included as part of a sustainability query result.\nThis object includes two categories of attributes:\n\nThe reference to the transport record in Granta MI\n\nThe sustainability information for this transport stage\n\nAdded in version 2.0.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty equivalent_references: list[TransportReference] | None\n\nOther transport records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by\necoinvent.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty name: str\n\nName of the transport stage."},{"objectID":"Home","href":"api/sustainability/bom.html#part","title":"BoM sustainability > Part","text":"Part\n\n\n\nclass PartWithSustainabilityResult(**kwargs)\n\nDescribes an individual part included as part of a sustainability query result.\nThis object includes three categories of attributes:\n\nThe reference to the part in Granta MI (if the part references a record)\n\nThe sustainability information for this part\n\nAny part, material, or process objects which are a child of this part object\n\nAdded in version 2.0.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty part_number: str | None\n\nPart number.\n\n\n\nproperty input_part_number: str | None\n\nInput part number.\n\nThis property is only populated on BoM query results and is equal to the <PartNumber> element of\nthe corresponding input BoM item.\n\n\n\nproperty equivalent_references: list[PartReference] | None\n\nOther part records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty reported_mass: ValueWithUnit\n\nIndicates a mass value that is calculated by the analysis, that represents the total mass for the quantity of\nthe item specified in the BoM, taking into account the quantities of parent assemblies.\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by\necoinvent.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty parts: List[PartWithSustainabilityResult]\n\nPartWithSustainabilityResult objects that are direct children of this item in the BoM.\n\n\n\nproperty materials: List[MaterialWithSustainabilityResult]\n\nMaterialWithSustainabilityResult objects that are direct children of this item in the BoM.\n\n\n\nproperty processes: List[ProcessWithSustainabilityResult]\n\nProcessWithSustainabilityResult objects that are direct children of this item in the BoM.\n\n\n\nproperty transport_stages: List[TransportWithSustainabilityResult]\n\nTransportWithSustainabilityResult objects that are direct children of this item in the BoM.\n\nAdded in version 2.3."},{"objectID":"Home","href":"api/sustainability/bom.html#material","title":"BoM sustainability > Material","text":"Material\n\n\n\nclass MaterialWithSustainabilityResult(**kwargs)\n\nDescribes an individual material included as part of a sustainability query result.\nThis object includes three categories of attributes:\n\nThe reference to the material in Granta MI\n\nThe sustainability information for this material\n\nAny process objects that are a child of this material object\n\nAdded in version 2.0.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty material_id: str | None\n\nMaterial ID.\n\n\n\nproperty equivalent_references: list[MaterialReference] | None\n\nOther material records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty reported_mass: ValueWithUnit\n\nIndicates a mass value that is calculated by the analysis, that represents the total mass for the quantity of\nthe item specified in the BoM, taking into account the quantities of parent assemblies.\n\n\n\nproperty recyclable: bool\n\nIndicates whether the material can be recycled, regardless of the recyclates quality.\n\n\n\nproperty biodegradable: bool\n\nIndicates whether the material is biodegradable. Includes any waste that is capable of undergoing anaerobic or\naerobic decomposition.\n\n\n\nproperty functional_recycle: bool\n\nIndicates whether the material can be recycled into material of an equivalent quality, that can be used for the\nsame (or similar) applications.\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by\necoinvent.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty processes: List[ProcessWithSustainabilityResult]\n\nProcessWithSustainabilityResult objects that are direct children of this item in the BoM."},{"objectID":"Home","href":"api/sustainability/bom.html#process","title":"BoM sustainability > Process","text":"Process\n\n\n\nclass ProcessWithSustainabilityResult(**kwargs)\n\nDescribes a process included as part of a sustainability query result.\nThis object includes two categories of attributes:\n\nThe reference to the process record in Granta MI\n\nThe sustainability information for this process\n\nAdded in version 2.0.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty equivalent_references: list[ProcessReference] | None\n\nOther process records which defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty embodied_energy: ValueWithUnit\n\nRepresents the direct and indirect energy use. Based on cumulative energy demand method developed by\necoinvent.\n\n\n\nproperty climate_change: ValueWithUnit\n\nEstimates global warming potential considering emissions of different gases reported as carbon dioxide\nequivalents (CO2-eq.). Based on Intergovernmental Panel on Climate Change (IPCC) method.\n\n\n\nproperty transport_stages: List[TransportWithSustainabilityResult]\n\nTransportWithSustainabilityResult objects that are direct children of this item in the BoM.\n\nAdded in version 2.3.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"user_guide/quick_code.html#quick-code","title":"Quick code","text":"Quick code\n\nTo show how the grantami-bomanalytics package works, this brief compliance example\nshows how to find the percentage content of all SVHCs (substances of very\nhigh concern) in an ABS/PVC blend:\n\nThe sequence of events is as follows:\n\nConnect to Granta MI.\n\nCreate the appropriate query with the relevant parameters and references.\nFor more information, see ref_grantami_bomanalytics_api_index.\n\nRun the query.\n\nProcess the results.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/bom_builder/index.html#bom-helpers","title":"BoM helpers","text":"BoM helpers\n\nBoM helpers represent a BoM (bill of materials) in Ansys Granta MI 23/01, 24/12, or 25/05 XML BoM format, and they\nsupport reading and writing these files.\n\nThe BillOfMaterials represents the root object in a 25/05 BoM\nhierarchy and can be used to programmatically generate a BoM.\n\nBuilders are available to help with creation of Granta MI reference objects. These assist in ensuring valid combinations\nof identifiers. For more information, see ref_grantami_bomanalytics_bom_builders.\n\nSerialization and deserialization of BoM objects can be performed using the\nBoMHandler class. This class exposes methods to read a BoM from a\nstring or a file and to write to a string or a file. The resulting BoM can be passed to either a Sustainability or a\nCompliance query.\n\nAdded in version 2.0.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-2_Transports.html#transport-phase","title":"Transport phase","text":"Transport phase\n\nThis example shows how to explore the transport phase results of a sustainability summary query.\n\nThe following supporting files are required for this example:\n\nsustainability-bom-2412.xml\n\nFor help on constructing an XML BoM, see BoM examples.\n\nInfo:\n\nThis example requires Granta MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nIf you would like to run an example of exploring the transport phase results of a summary query for an earlier version of the reports bundle, refer to the version of the documentation that corresponds to that version of the reports bundle."},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-2_Transports.html#run-a-sustainability-summary-query","title":"Transport phase > Run a sustainability summary query","text":"Run a sustainability summary query\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-2_Transports.html#transport-phase","title":"Transport phase","text":"Transport phase\n\nThe environmental contribution from the transport phase is summarized in the transport_details property. Results include the individual environmental impact for each transport stage included in the input BoM.\n\nA BoM may include many transport stages, each describing transportation throughout the product lifecycle. Print the first three only.\n\n\n\n\n\n\n\n\n\nConvert all to a DataFrame. To see the distribution of results, use the DataFrame.describe() method.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost of these transport stages contribute little to the overall sustainability impact. To make a visualization more insightful, group all transport stages that contribute less than 5% of embodied energy or climate change in a single ‘Other’ transport stage.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis example produces multiple plots which all consist of a pair of pie charts representing the “Embodied Energy” and “Climate Change CO2 equivalent” impacts respectively. Define a helper function to create these plots.\n\n\n\n\n\nUse this function to plot the environment impact for all transport stages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-2_Transports.html#transport-impact-per-unit-distance","title":"Transport phase > Transport impact per unit distance","text":"Transport impact per unit distance\n\nIn some situations, it might be useful to calculate the environmental impact per distance travelled and add the results as new columns in the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-2_Transports.html#transport-impact-aggregated-by-category","title":"Transport phase > Transport impact aggregated by category","text":"Transport impact aggregated by category\n\nThe environmental impacts from transportation associated with distribution and manufacturing phases are summarized in the distribution_transport_summary and manufacturing_transport_summary properties.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-2_Transports.html#transport-impact-aggregated-by-part","title":"Transport phase > Transport impact aggregated by part","text":"Transport impact aggregated by part\n\nThe environmental contributions from transportation are summarized by the associated part in the transport_details_aggregated_by_part property. This property groups parts that contribute less than 5% embodied energy or climate change automatically.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/impacted_substances/index.html#impacted-substances-api","title":"Impacted substances API","text":"Impacted substances API\n\nThe ref_grantami_bomanalytics_api_impactedsubstances_materials,\nref_grantami_bomanalytics_api_impactedsubstances_specifications, and\nref_grantami_bomanalytics_api_impactedsubstances_parts queries (collectively referred to as\nrecord-based impacted substances queries) accept a list of references to records in a Granta MI\ndatabase. These queries also consider any additional associated BoM items stored in Granta MI.\nFor example, if the specified part record contains links to other parts and specifications, these\nare included in the analysis.\n\nThe ref_grantami_bomanalytics_api_impactedsubstances_bom BoM-based query accepts a\nBill of Materials in XML format, which includes references to Granta MI records. As opposed to\nrecord-based queries, the BoM-based impacted substances analysis only considers items explicitly\ndefined in the input BoM. It does not follow links to other BoM items as in the record-based queries\ndescribed previously.\n\nIn both cases, impacted substances are determined by a list of legislations, identified by\nlegislation ID.\n\nThese queries do not take the quantity of the substance in the parent item into consideration. If\nthe quantity is important, for example to determine compliance against a legislation that imposes a\ncertain threshold, you should use the ref_grantami_bomanalytics_api_compliance_index instead.\n\nThe API documented in this section is only available if you have the MI Restricted\nSubstances feature included in your license. A\nLicensingException is raised if the feature is not\navailable.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-3_Materials.html#material-phase","title":"Material phase","text":"Material phase\n\nThis example shows how to explore the material phase results of a sustainability summary query.\n\nThe following supporting files are required for this example:\n\nsustainability-bom-2412.xml\n\nFor help on constructing an XML BoM, see BoM examples.\n\nInfo:\n\nThis example uses an input file that is in the 24/12 XML BoM format. This structure requires Granta MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nTo run this example with an older version of the reports bundle, use sustainability-bom-2301.xml instead. Some sections of this example will produce different results from the published example when this BoM is used."},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-3_Materials.html#run-a-sustainability-summary-query","title":"Material phase > Run a sustainability summary query","text":"Run a sustainability summary query\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-3_Materials.html#materials-phase","title":"Material phase > Materials phase","text":"Materials phase\n\nThe environmental contribution from the material phase is summarized in the material_details property. The results are aggregated: each item in material_details represents the total environmental impact of a material summed from all its occurrences in the BoM. Listed materials contribute more than 2% of the total impact for the material phase. Materials that do not contribute at least 2% of the total are aggregated under the Other item.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot a pair of pie charts which show the “Embodied Energy” and “Climate Change CO2 equivalent” impacts respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMass before and mass after secondary processing can help determine if the material mass removed during processing contributes a significant fraction of the impact of the overall material phase.\n\nPlot the aggregated material masses as a bar chart.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/impacted_substances/bom.html#bom-impacted-substances","title":"BoM impacted substances","text":"BoM impacted substances\n\nFor more information about BoM item types relevant for impacted substances analysis, refer to the\nItem types for Restricted Substances section of the online\ndocumentation.\n\nConsult ref_grantami_bomanalytics_bom_query_restrictions for some important restrictions on\nBoM-based queries.\n\n"},{"objectID":"Home","href":"api/impacted_substances/bom.html#query-definition","title":"BoM impacted substances > Query definition","text":"Query definition\n\n\n\nclass BomImpactedSubstancesQuery\n\nGets the substances impacted by a list of legislations for a BoM.\n\nThe BoM must be in the Ansys Granta 1711 XML BoM format or Ansys Granta 2301 XML BoM format.\n\nAll BoM-based queries only operate on a single BoM. As a result, the .with_batch_size() method is not\nimplemented for BoM-based queries.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nBomImpactedSubstancesQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> bom = \"<PartsEco xmlns...\"\n>>> query = (\n...     BomImpactedSubstancesQuery()\n...     .with_bom(\"<PartsEco xmlns...\")\n...     .with_legislation_ids([\"Candidate_AnnexXV\"])\n... )\n>>> cxn.run(query)\n<BomImpactedSubstancesQueryResult: 1 Bom1711WithImpactedSubstances results>\n\n\n\n\n\nwith_bom(bom)\n\nSet the BoM to use for the query.\n\nSee the documentation for the parent query class for supported BoM formats.\n\nMinimal validation is performed on the provided BoM to ensure it defines a supported XML schema. XSD files are\nprovided in schemas for full validation.\n\nParameters\n\nbom\n\npython:str\n\nBoM to use for the query.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError raised if the method is called with values that do not match the types described earlier.\n\nValueError\n\nError raised if the bom isn’t valid XML, or isn’t in a known supported BoM format.\n\nNotes\n\nSee the ansys.grantami.bomanalytics.schemas subpackage for Ansys Granta XML BoM Schema Definitions.\n\n\n\nwith_legislation_ids(legislation_ids)\n\nAdd a list or set of legislations to retrieve the impacted substances for.\n\nLegislations are identified based on their Legislation ID attribute value.\n\nParameters\n\nlegislation_ids\n\npython:list[python:str] | set[python:str]\n\nList or set of legislation ids.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\n"},{"objectID":"Home","href":"api/impacted_substances/bom.html#query-result","title":"BoM impacted substances > Query result","text":"Query result\n\n\n\nclass BomImpactedSubstancesQueryResult(results, messages)\n\nRetrieves the result of running the BomImpactedSubstancesQuery\nclass.\n\nThis class describes the substances in the specified BoM impacted by one or more legislations.\n\n\n\n\n\nimpacted_substances_by_legislation\n\nView of the results for a query for impacted substances, grouped by legislation only.\n\nThe substances from all items specified in the query are merged for each legislation, providing a single\nlist of impacted substances grouped by legislation only. Substances are duplicated where they appear in\nmultiple items for the same legislation.\n\nReturns\n\nimpacted_substances\n\npython:dict[python:str, ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_legislation\n{'Candidate_AnnexXV': [\n    <ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n}\n\n\n\nimpacted_substances\n\nView of the results for a query for impacted substances, flattened into a single list.\n\nThe substances from all items specified in the query are merged across item and legislation, providing a\nsingle flat list. Substances are duplicated where they appear in multiple items or legislations.\n\nReturns\n\nimpacted_substances\n\npython:list[ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-4_BoM_compliance.html#perform-a-bom-compliance-query","title":"Perform a BoM compliance query","text":"Perform a BoM compliance query\n\nCompliance queries can be performed on an XML BoM instead of a list of Granta MI records. The BoM must be in any valid Granta XML BoM format. This example shows how to use the lxml package with the XSD XML schema file to validate the XML format.\n\nFor help on constructing an XML BoM, see BoM examples.\n\nIf the XML file is generated by a Granta MI product and has not been modified, it is possible to skip this step before submitting the query. However, it is strongly advised to validate the XML BoM in all situations to avoid unexpected server-side failures. If an invalid XML file is used in a query, an exception is raised by the requests HTTP package, but it does not contain information about why the XML is non-compliant. A more detailed log is reported on the server in the MI Service Layer\nlog.\n\nThe following supporting files are required for this example:\n\ncompliance-bom.xml\n\ninvalid-bom.xml\n\nThe XSD XML schema is included in the library in the schemas subpackage."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-4_BoM_compliance.html#validate-an-xml-file-with-an-xsd-schema","title":"Perform a BoM compliance query > Validate an XML file with an XSD schema","text":"Validate an XML file with an XSD schema\n\nThe lxml package provides a similar API to the standard library XML module, but it includes some additional functionality, including schema validation. First import the lxml package and then build a simple validator function that takes both the XML file and schema file and returns the result.\n\n\n\n\n\nYou can now use this function to test the validity of a BoM generated by BoM Analyzer.\n\n\n\n\n\n\n\n\n\nYou can also test a BoM that is valid XML but is not compliant with the schema.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-4_BoM_compliance.html#run-a-compliance-xml-based-query","title":"Perform a BoM compliance query > Run a compliance XML-based query","text":"Run a compliance XML-based query\n\nNow that you have validated the XML, you can build your XML BoM-based query. First, connect to Granta MI.\n\n\n\n\n\nRunning a BoM compliance query produces the same result as if you had stored the BoM structure as linked Products and Parts records in Granta MI.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe BomComplianceQueryResult object returned after running the compliance query contains a list of PartWithComplianceResult objects, the behavior of which is covered in a previous example. The following cell prints the compliance status of the BoM.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-4_BoM_compliance.html#raise-an-invalid-bom-exception","title":"Perform a BoM compliance query > Raise an invalid BoM exception","text":"Raise an invalid BoM exception\n\nIf you were to try the same query with an invalid BoM, you would see a stack trace informing you that the MI Service Layer responded with a 500 HTTP response code. To raise the exception, change the following RUN_QUERY constant to True.\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-5_Hierarchical_plots.html#hierarchical-plotting","title":"Hierarchical plotting","text":"Hierarchical plotting\n\nThis example shows how to combine all the results of a sustainability summary query into interactive hierarchical plots.\n\nThe following supporting files are required for this example:\n\nsustainability-bom-2412.xml\n\nFor help on constructing an XML BoM, see BoM examples.\n\nInfo:\n\nThis example uses an input file that is in the 24/12 XML BoM format. This structure requires Granta MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nTo run this example with an older version of the reports bundle, use sustainability-bom-2301.xml instead. Some sections of this example will produce different results from the published example when this BoM is used."},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-5_Hierarchical_plots.html#run-a-sustainability-summary-query","title":"Hierarchical plotting > Run a sustainability summary query","text":"Run a sustainability summary query\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-5_Hierarchical_plots.html#tabulated-data","title":"Hierarchical plotting > Tabulated data","text":"Tabulated data\n\nTo plot data hierarchically, first create a dataframe that aggregates all data together. See the other notebooks in this section for more detail around converting these properties to dataframes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA lot of the rows in the dataframe are small in the context of the overall sustainability impact of the product. Define a function to aggregate all rows that contribute less than 5% of their phase’s sustainability impact into a single row.\n\n\n\n\n\nApply this function to each sustainability phase, and then perform some additional tidying up of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-5_Hierarchical_plots.html#sunburst-chart","title":"Hierarchical plotting > Sunburst chart","text":"Sunburst chart\n\nA sunburst chart presents hierarchical data radially.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-5_Hierarchical_plots.html#icicle-chart","title":"Hierarchical plotting > Icicle chart","text":"Icicle chart\n\nAn icicle chart presents hierarchical data as rectangular sectors.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-5_Hierarchical_plots.html#sankey-diagram","title":"Hierarchical plotting > Sankey diagram","text":"Sankey diagram\n\nSankey diagrams represent data as a network of nodes and links, with the relative sizes of these nodes and links representing their contributions to the flow of some quantity. In plotly, Sankey diagrams require nodes and links to be defined explicitly.\n\nFirst, create a dataframe to store the node data. Start from a copy of the dataframe used for the previous plots.\n\n\n\n\n\nReplace empty parent cells with a reference to a new “Product” row. The new row will be created in the next cell.\n\n\n\n\n\nAdd a new row to represent the entire product. Values for this row are computed based on the sum of all nodes that are direct children of this row.\n\n\n\n\n\nDefine colors for each node type in the Sankey diagram by mapping a built-in Plotly color swatch to node names. First, attempt to get the color for a node based on its name. If this fails, use the name of the parent node instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, create a dataframe to store the link information.\n\nEach row in this dataframe represents a link on the Sankey diagram. All links have a ‘source’ and a ‘target’, and nodes may function as a source, as a target, or as both.\n\n\n\n\n\nCopy the row index values from the node dataframe to the “Source” column in the new dataframe. Skip the “Product” row, since this node does not act as the source for any links.\n\n\n\n\n\nCreate a “Target” column by using the node dataframe as a cross-reference to infer the hierarchy.\n\n\n\n\n\nThe size of the link is defined as the size of the source node. The color of the link is defined as the color of the target node. Take advantage of the fact that the link and node dataframes have the same index in the same order.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, create the Sankey diagram.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#perform-a-sustainability-query","title":"Perform a sustainability query","text":"Perform a sustainability query\n\nThe following supporting files are required for this example:\n\nsustainability-bom-2412.xml\n\nFor help on constructing an XML BoM, see BoM examples.\n\nInfo:\n\nThis example uses an input file that is in the 24/12 XML BoM format. This structure requires Granta MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nTo run this example with an older version of the reports bundle, use sustainability-bom-2301.xml instead. Some sections of this example will produce different results from the published example when this BoM is used."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#run-a-bom-sustainability-query","title":"Perform a sustainability query > Run a BoM sustainability query","text":"Run a BoM sustainability query\n\nFirst, connect to Granta MI.\n\n\n\n\n\nNext, create a sustainability query. The query accepts a single BoM as argument and an optional configuration for units. If a unit is not specified, the default unit is used. Default units for the analysis are MJ for energy, kg for mass, and km for distance.\n\n\n\n\n\nFinally, run the query. The BomSustainabilityQueryResult object that is returned contains the results of the analysis.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#the-bomsustainabilityqueryresult-class","title":"Perform a sustainability query > The BomSustainabilityQueryResult class","text":"The BomSustainabilityQueryResult class"},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#definition","title":"Perform a sustainability query > Definition","text":"Definition\n\nThe structure of a BoM sustainabability query result mirrors the input BoM structure. However, each item in the result objects also includes the results of the sustainability analysis for that item. In addition to the described properties, these objects contain at least the following properties that define the results of the sustainability analysis:\n\n.embodied_energy\n\n.climate_change\n\nAdditional properties are also available for each <ItemType>WithSustainabilityResult object. For more information, see the Sustainability API."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#the-bomsustainabilityqueryresultparts-property","title":"Perform a sustainability query > The BomSustainabilityQueryResult.parts property","text":"The BomSustainabilityQueryResult.parts property\n\nThe BomSustainabilityQueryResult.parts property contains the single root part in the input BoM. This part in turn also has a .parts property, which contains the list of PartWithSustainabilityResult objects that are children of the root part. This structure continues recursively to define all parts in the input BoM. These parts can be of two types: assemblies or leaf parts."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#assemblies","title":"Perform a sustainability query > Assemblies","text":"Assemblies\n\nAssemblies are PartWithSustainabilityResult objects that contain subparts. Assemblies do not contain materials directly.\n\nAssemblies include the following properties that describe child BoM items:\n\n.parts: Subparts of the assembly. Defined as PartWithSustainabilityResult objects.\n\n.processes: Joining and finishing processes applied to the assembly. Defined as ProcessWithSustainabilityResult objects.\n\n.transport_stages: Transportation of the assembly. Defined as a list of TransportWithSustainabilityResult objects.\n\nThe environmental impact of an assembly includes the sum of the environmental impacts of all subparts and processes applied to the assembly."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#leaf-parts","title":"Perform a sustainability query > Leaf parts","text":"Leaf parts\n\nLeaf parts are PartWithSustainabilityResult objects that do not include subparts. Leaf parts can contain the materials they are made of as direct children.\n\nLeaf parts include the following properties:\n\n.materials: Materials that the part is made of. Defined as a list of MaterialWithSustainabilityResult objects.\n\n.processes: Joining and finishing processes applied to the part. Defined as a list of ProcessWithSustainabilityResult objects.\n\n.transport_stages: Transportation of the part. Defined as a list of TransportWithSustainabilityResult objects.\n\nThe environmental impact of a leaf part includes the sum of the environmental impacts associated with the quantity of materials used in the part, processes applied to the part directly, and processes applied to materials in the part."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#materials","title":"Perform a sustainability query > Materials","text":"Materials\n\nMaterials are MaterialWithSustainabilityResult objects. They include the .processes property. This property consists of the primary and secondary processes applied to the mass of material, which are defined as a list of ProcessWithSustainabilityResult objects.\n\nThe environmental impact of a material is calculated from database data and the mass of material used.\n\nProcesses may appear as children of materials in the hierarchy, but the environmental impact of processes do not contribute to a parent material’s environmental impact."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#processes","title":"Perform a sustainability query > Processes","text":"Processes\n\nProcesses are represented by ProcessWithSustainabilityResult objects. They include the .transport_stages property. This property consists of the transportation of the part during the manufacturing process, and is defined as a list of TransportWithSustainabilityResult objects.\n\nThe environmental impact of a process is calculated from database data and the dimensional details of the process defined in the BoM.\n\nTransport stages may appear as children of processes in the hierarchy, but the environmental impact of transport stages do not contribute to a parent process’s environmental impact."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#the-bomsustainabilityqueryresulttransport-property","title":"Perform a sustainability query > The BomSustainabilityQueryResult.transport property","text":"The BomSustainabilityQueryResult.transport property\n\nThe BomSustainabilityQueryResult.transport property contains the transport stages in the input BoM, which are defined as a list of TransportWithSustainabilityResult objects. Transport stages contain no BoM properties. The environmental impact of a transport stage is just the environmental impact associated with the transport stage itself."},{"objectID":"Home","href":"examples/4_Sustainability/4-1_Sustainability.html#process-the-bomsustainabilityqueryresult-object","title":"Perform a sustainability query > Process the BomSustainabilityQueryResult object","text":"Process the BomSustainabilityQueryResult object\n\nTo visualize the results using plotly, the results are loaded into a pandas DataFrame object.\n\nThe following cell defines functions that convert the BoM hierarchical structure into a flat list of items. Each function also converts each item into a dictionary of common values that the DataFrame object can interpret.\n\nEach row in the DataFrame object contains an id that uniquely identifies the item and a parent_id that defines the parent item. The .identity property is used as an identifier because it is unique across all BoM items. This property is populated even if not initially populated on the BoM items.\n\n\n\n\n\nNow call the traverse_bom function and print the first two dictionaries, which represent the root part and the first assembly in the BoM.\n\n\n\n\n\n\n\n\n\nNow, use the list of dictionaries to create a pandas DataFrame object. Use the DataFrame.head() method to display the first five rows of the DataFrame object.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, visualize the data in a sunburst hierarchical chart:\n\nThe segments are represented hierarchically. The BoM is at the center, and items further down the hierarchy are further out in the plot.\n\nItem type is represented by color.\n\nThe size of the segment represents the environmental impact of that item.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/index.html#impacted-substances-examples","title":"Impacted substances examples","text":"Impacted substances examples\n\nThese examples show how to perform an impacted substance query on materials, parts, or XML BoMs in a Granta MI\nRestricted Substances database, identifying any substances impacted by one or more legislations. You can write an\nequivalent script for specifications. For more information, see ref_grantami_bomanalytics_api_index.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-1_Materials_impacted_substances.html#perform-a-material-impacted-substances-query","title":"Perform a material impacted substances query","text":"Perform a material impacted substances query\n\nA material impacted substances query is used to identify the substances associated with a material that are impacted by one or more defined legislations.\n\nThis example shows how to perform an Impacted Substance query on material records and how to process the results."},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-1_Materials_impacted_substances.html#connect-to-granta-mi","title":"Perform a material impacted substances query > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Basic Usage example.\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-1_Materials_impacted_substances.html#build-and-run-the-query","title":"Perform a material impacted substances query > Build and run the query","text":"Build and run the query\n\nThe query is assembled by providing lists of material references and legislations of interest. The query returns the substances that are present in the specified materials and are impacted by the specified legislations.\n\nFirst specify some constants that contain the material and legislation references to use.\n\n\n\n\n\nNext import the queries module and build the query with the references in the previous cell.\n\n\n\n\n\nFinally, run the query. Passing a MaterialImpactedSubstancesQuery object to the Connection.run() method returns a MaterialImpactedSubstancesQueryResult object.\n\n\n\n\n\n\n\n\n\nA MaterialImpactedSubstancesQueryResult object contains three properties: impacted_substances_by_material, impacted_substances_by_legislation, and impacted_substances. They provide different views of the impacted substances at different levels of granularity."},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-1_Materials_impacted_substances.html#view-results-grouped-by-material","title":"Perform a material impacted substances query > View results grouped by material","text":"View results grouped by material\n\nThis property is structured first as a list of MaterialWithImpactedSubstancesResult objects, each of which contains a dictionary of lists of ImpactedSubstance objects keyed by legislation or a single flat list of all substances.\n\nFirst, you can simplify the structure somewhat because you are only using Material IDs. The following cell creates a dictionary that maps material IDs to lists of substances impacted by the SIN_LIST.\n\n\n\n\n\nThen use the tabulate package to print a table of the substances and their quantities for the polycarbonate material only.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-1_Materials_impacted_substances.html#view-results-grouped-by-legislation","title":"Perform a material impacted substances query > View results grouped by legislation","text":"View results grouped by legislation\n\nThis property merges the results across all materials, resulting in a single dictionary of legislations that contains all impacted substances for all materials.\n\nAgain use the tabulate package to print a table of substances, but this time include the substances in all materials, one again limited to the SIN_LIST only.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-1_Materials_impacted_substances.html#view-results-as-a-flat-list","title":"Perform a material impacted substances query > View results as a flat list","text":"View results as a flat list\n\nThis property reduces the granularity further to produce a single flattened list of substances across all legislations for all materials.\n\nThe following cell uses the tabulate package to print a table of substances. Because you are using the impacted_substances property, you only have one list of ImpactedSubstance objects, which covers both legislations and both materials.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/1_Database-specific_configuration.html#database-specific-configuration","title":"Database-specific configuration","text":"Database-specific configuration\n\nGranta MI BoM Analytics work with an off-the-shelf Granta MI Restricted Substances database. However, there are some situations in which additional run-time configuration changes are required:\n\nIf the database key or table names have been modified from their default values, these must be set on the Connection object.\n\nIf the number of linked records is very large, the batch sizes should be changed for each query. For more information, see Batching requests."},{"objectID":"Home","href":"examples/1_Database-specific_configuration.html#specify-a-custom-database-key-or-table-name","title":"Database-specific configuration > Specify a custom database key or table name","text":"Specify a custom database key or table name\n\nThe default database key, MI_Restricted_Substances, is used if no database key is specified. To specify a key, use the Connection.set_database_details() method. The specified key is then used for all queries made with this Connection object.\n\n\n\n\n\n\n\n\n\nIt is also possible to specify alternative names for the relevant restricted substances tables if they have been modified from the defaults. You provide the names to the .set_database_details() method in the same way.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/1_Database-specific_configuration.html#change-batch-size","title":"Database-specific configuration > Change batch size","text":"Change batch size\n\nThe queries that can be performed with this package are batched if they exceed a certain size. This is achieved by splitting the list of parts, materials, and so on into smaller lists to reduce the overall time taken to perform the query. Default batch sizes have been chosen based on typical tabular attribute sizes, but these might need to be changed in some situations. For examples, see the relevant page in the API documentation.\n\nThe batch size is included in the query __repr__. The following cell shows a SpecificationComplianceQuery object with the default batch size.\n\n\n\n\n\n\n\n\n\nYou can manually set the batch size like this:\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/1_Database-specific_configuration.html#set-depth-of-specification-to-specification-links","title":"Database-specific configuration > Set depth of specification-to-specification links","text":"Set depth of specification-to-specification links\n\nSupported with Restricted Substances Reports 2023 R2 and later\n\nThe Restricted Substances database allows Specification records to be defined in terms of other Specification records. Since this is a recursive relationship, there is in principle no limit to the complexity of these specification-to-specification (spec-to-spec) hierarchies. By default, this package considers every spec-to-spec hierarchy completely, with no truncation imposed.\n\nFor typical databases this is the correct and desired behavior. However, in some circumstances, this may cause query times and response sizes to become very large. In such cases, you should control the maximum spec-to-spec hierarchy depth followed using the maximum_spec_link_depth parameter on the BomAnalyticsClient object.\n\nThe default value is None. Setting it to a positive integer limits the depth to at most that many spec-to-spec links.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/index.html#compliance-examples","title":"Compliance examples","text":"Compliance examples\n\nThese examples show how to determine compliance against one or more legislations for substances,\nmaterials, parts, or XML BoMs in a Granta MI Restricted Substances database. An equivalent script can be written for\nspecifications. For more information, see ref_grantami_bomanalytics_api_index.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"user_guide/batching.html#batching-requests","title":"Batching requests","text":"Batching requests"},{"objectID":"Home","href":"user_guide/batching.html#applicability","title":"Batching requests > Applicability","text":"Applicability\n\nRecord-based queries are batched if they exceed a certain size. When you perform a record-based\nquery, batching is achieved by splitting the list of records into smaller lists to reduce the\noverall time it takes to obtain results.\n\nBoth the BomSustainabilityQuery and BomSustainabilitySummaryQuery are BoM-based\nqueries, and so this page is not relevant for sustainability analysis. The following advice is\nrelevant for restricted substances analysis only."},{"objectID":"Home","href":"user_guide/batching.html#when-should-the-batch-size-be-modified","title":"Batching requests > When should the batch size be modified?","text":"When should the batch size be modified?\n\nThe exact conditions and size for batching cannot be determined generally because it depends\non the data that is used to determine impacted substances and compliance. Given the\nfollowing conditions, you might need to modify the batch size."},{"objectID":"Home","href":"user_guide/batching.html#very-complex-part-and-specification-hierarchies","title":"Batching requests > Very complex part and specification hierarchies","text":"Very complex part and specification hierarchies\n\nParts and specifications in Granta MI can be defined recursively. For example, it’s possible\nto define parts and specifications in terms of other parts and specifications. To take this\ninto consideration, the default batch size for parts and specifications is very small. However,\nfor a very complex hierarchy, you might need to further decrease the batch size."},{"objectID":"Home","href":"user_guide/batching.html#very-simple-part-and-specification-hierarchies","title":"Batching requests > Very simple part and specification hierarchies","text":"Very simple part and specification hierarchies\n\nPart and specification structures are very simple if they have a similar complexity to materials.\nFor example, a very simple hierarchy might directly reference substances or reference a small number\nof materials. For a very simple hierarchy, you might need to increase the batch size."},{"objectID":"Home","href":"user_guide/batching.html#large-numbers-of-indicators-or-legislations","title":"Batching requests > Large numbers of indicators or legislations","text":"Large numbers of indicators or legislations\n\nQueries can only be batched in the item dimension. There is no facility to split the query\nby the number of legislations or indicators. As a result, if queries for impacted substances or\ncompliance are evaluated against a large number of legislations or lists (typically greater than\n10), you might need to decrease the batch size.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/compliance/substances.html#substance-compliance","title":"Substance compliance","text":"Substance compliance"},{"objectID":"Home","href":"api/compliance/substances.html#query-definition","title":"Substance compliance > Query definition","text":"Query definition\n\n\n\nclass SubstanceComplianceQuery\n\nEvaluate compliance for Granta MI substance records against a number of indicators.\n\nAll methods used to add substances and indicators to this query return the query itself so that they can be chained\ntogether as required. Records can be added using a combination of any of the available methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nSubstanceComplianceQueryResult.\n\nNotes\n\nThe amount of a substance is a critical factor when determining if it is compliant or non-compliant with a\nlegislation. For the other compliance queries in this API, the amount of substance is determined by the value set\nin the declaration stored in Granta MI. However, when performing a query for substance compliance, there is no\ndeclaration because the substances are being examined directly.\n\nAs a result, a set of extra methods are defined that allow the amount of each substance to be defined along with the\nreference to the record in Granta MI. These methods have the name _with_xxxxxx_and_amounts() and take a list of\ntuples as the argument.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> query = (\n...     SubstanceComplianceQuery()\n...     .with_cas_numbers_and_amounts([('50-00-0', 25), ('57-24-9', 0.5)])\n...     .with_indicators([indicator])\n... )\n>>> cxn.run(query)\n<SubstanceComplianceQueryResult: 2 SubstanceWithCompliance results>\n\n\n\n\n\nwith_indicators(indicators)\n\nAdd a list or set of WatchListIndicator or\nRoHSIndicator objects to evaluate compliance against.\n\nParameters\n\nindicators\n\npython:list[WatchListIndicator | RoHSIndicator]\n\nList of indicators.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described above.\n\nExamples\n\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> MaterialComplianceQuery().with_indicators([indicator])\n<MaterialCompliance: 0 materials, batch size = 100, 1 indicators>\n\n\n\nwith_cas_numbers_and_amounts(cas_numbers_and_amounts, external_database_key=None)\n\nAdd a list or set of CAS numbers and amounts to a substance query.\n\nThe CAS numbers and quantity pairs are expressed as a tuple, with the quantity in units of wt. %.\n\nIf the records referenced by values in the cas_numbers_and_amounts argument are stored in an\nexternal database, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\ncas_numbers_and_amounts\n\npython:list[python:tuple[python:str, python:float]] | set[python:tuple[python:str, python:float]]\n\nList or set of CAS numbers and amounts expressed as a tuple.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the cas_numbers_and_amounts argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery()\n>>> query = query.with_cas_numbers_and_amounts([('50-00-0', 25), ('57-24-9', 0.1)])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_ec_numbers_and_amounts(ec_numbers_and_amounts, external_database_key=None)\n\nAdd a list or set of EC numbers and amounts to a substance query.\n\nThe EC numbers and quantity pairs are expressed as a tuple, with the quantity in units of wt. %.\n\nIf the records referenced by values in the ec_numbers_and_amounts argument are stored in an\nexternal database, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nec_numbers_and_amounts\n\npython:list[python:tuple[python:str, python:float]] | set[python:tuple[python:str, python:float]]\n\nListor set of EC numbers and amounts expressed as a tuple.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the ec_numbers_and_amounts argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery()\n>>> query = query.with_ec_numbers_and_amounts([('200-001-8', 25),\n...                                            ('200-319-7', 0.1)])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_chemical_names_and_amounts(chemical_names_and_amounts, external_database_key=None)\n\nAdd a list or set of chemical names and amounts to a substance query.\n\nThe chemical names and quantity pairs are expressed as a tuple, with the quantity in units of wt. %.\n\nIf the records referenced by values in the chemical_names_and_amounts argument are stored in an\nexternal database, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nchemical_names_and_amounts\n\npython:list[python:tuple[python:str, python:float]] | set[python:tuple[python:str, python:float]]\n\nList or set of chemical names and amounts expressed as a tuple.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the chemical_names_and_amounts argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery()\n>>> query = query.with_chemical_names_and_amounts([('Formaldehyde', 25),\n...                                                ('Strychnine', 0.1)])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_cas_numbers(cas_numbers, external_database_key=None)\n\nAdd a list or set of CAS numbers to a substance query.\n\nThe amount of substance in the material is set to 100%.\n\nIf the records referenced by values in the cas_numbers argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\ncas_numbers\n\npython:list[python:str] | set[python:str]\n\nList or set of CAS numbers.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the cas_numbers argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery().with_cas_numbers(['50-00-0', '57-24-9'])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_ec_numbers(ec_numbers, external_database_key=None)\n\nAdd a list or set of EC numbers to a substance query.\n\nThe amount of substance in the material is set to 100%.\n\nIf the records referenced by values in the ec_numbers argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nec_numbers\n\npython:list[python:str] | set[python:str]\n\nList or set of EC numbers.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the ec_numbers argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery().with_ec_numbers(['200-001-8', '200-319-7'])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_chemical_names(chemical_names, external_database_key=None)\n\nAdd a list or set of chemical names to a substance query.\n\nThe amount of substance in the material is set to 100%.\n\nIf the records referenced by values in the chemical_names argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nchemical_names\n\npython:list[python:str] | set[python:str]\n\nList or set of chemical names.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the chemical_names argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery().with_chemical_names(['Formaldehyde', 'Strychnine'])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_record_guids_and_amounts(record_guids_and_amounts, external_database_key=None)\n\nAdd a list or set of record GUIDs and amounts to a substance query.\n\nThe GUID and quantity pairs are expressed as a tuple, with the quantity in units of wt. %.\n\nIf the records referenced by values in the record_guids_and_amounts argument are stored in an\nexternal database, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids_and_amounts\n\npython:list[python:tuple[python:str, python:float]] | set[python:tuple[python:str, python:float]]\n\nList or set of record GUIDs and amounts expressed as a tuple.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids_and_amounts argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery()\n>>> query = query.with_record_guids_and_amounts(\n...     [('bdb0b880-e6ee-4f1a-bebd-af76959ae3c8', 25),\n...      ('a98cf4b3-f96a-4714-9f79-afe443982c69', 0.1)]\n... )\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_record_history_guids_and_amounts(record_history_guids_and_amounts, external_database_key=None)\n\nAdd a list or set of record history GUID and amounts to a substance query.\n\nThe GUID and quantity pairs are expressed as a tuple, with the quantity in units of wt. %.\n\nIf the records referenced by values in the record_history_guids_and_amounts argument are stored in an\nexternal database, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids_and_amounts\n\npython:list[python:tuple[python:str, python:float]] | set[python:tuple[python:str, python:float]]\n\nList or set of record history GUIDs and amounts expressed as a tuple.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids_and_amounts argument are stored in an\nexternal database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described above.\n\nExamples\n\n>>> query = SubstanceComplianceQuery()\n>>> query = query.with_record_history_guids_and_amounts(\n...     [('bdb0b880-e6ee-4f1a-bebd-af76959ae3c8', 25),\n...      ('a98cf4b3-f96a-4714-9f79-afe443982c69', 0.1)]\n... )\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_record_history_ids_and_amounts(record_history_identities_and_amounts, external_database_key=None)\n\nAdd a list or set of record history identities and amounts to a substance query.\n\nThe identity and quantity pairs are expressed as a tuple, with the quantity in units of wt. %.\n\nIf the records referenced by values in the record_history_identities_and_amounts argument are stored in an\nexternal database, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities_and_amounts\n\npython:list[python:tuple[python:int, python:float]] | set[python:tuple[python:int, python:float]]\n\nList or set of record hirstory identities and amounts expressed as a tuple.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities_and_amounts argument are stored in an\nexternal database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SubstanceComplianceQuery()\n>>> query = query.with_record_history_ids_and_amounts([(15321, 25), (17542, 0.1)])\n<SubstanceComplianceQuery: 2 substances, batch size = 500, 0 indicators>\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>"},{"objectID":"Home","href":"api/compliance/substances.html#query-result","title":"Substance compliance > Query result","text":"Query result\n\n\n\nclass SubstanceComplianceQueryResult(results, indicator_definitions, messages)\n\nRetrieves the result of running the SubstanceComplianceQuery\nclass.\n\nThis class describes the compliance status of substances against one or more indicators.\n\n\n\n\n\ncompliance_by_indicator\n\nCompliance status for each indicator in the original query. The indicator name\nis used as the dictionary key.\n\nThe result for each indicator is determined by taking the worst result for that indicator across all items\nincluded in the query.\n\nReturns\n\npython:dict[python:str, WatchListIndicator | RoHSIndicator]\n\n\n\nExamples\n\n>>> compliance_result: MaterialComplianceQueryResult\n>>> compliance_result.compliance_by_indicator\n{'Prop 65': <WatchListIndicator,\n        name: Prop 65,\n        flag: WatchListFlag.WatchListAboveThreshold>\n}\n\n\n\ncompliance_by_substance_and_indicator\n\nCompliance status for each substance specified in the original query.\n\nReturns\n\npython:list[SubstanceWithComplianceResult]\n\n\n\nExamples\n\n>>> result: SubstanceComplianceQueryResult\n>>> result.compliance_by_substance_and_indicator\n[<SubstanceWithComplianceResult({\"cas_number\": 50-00-0}), 1 indicators>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/compliance/substances.html#substance-result","title":"Substance compliance > Substance result","text":"Substance result\n\n\n\nclass SubstanceWithComplianceResult(percentage_amount, **kwargs)\n\nRetrieves an individual substance included as part of a compliance query result.\nThis object includes three categories of attributes:\n\nThe reference to the substance in Granta MI\n\nThe compliance status of this substance, stored in a dictionary of one or more indicator objects\n\nThe amount of the substance present in the parent item\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty cas_number: str | None\n\nCAS number.\n\n\n\nproperty ec_number: str | None\n\nEC number.\n\n\n\nproperty chemical_name: str | None\n\nChemical name.\n\n\n\nproperty equivalent_references: list[SubstanceReference] | None\n\nOther substance records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty indicators: Dict[str, WatchListIndicator | RoHSIndicator]\n\nCompliance status of this item for each indicator included in the original query.\n\n\n\nproperty percentage_amount: float | None\n\nPercentage amount of this substance in the parent item.\n\nAdded in version 2.1.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\n"},{"objectID":"Home","href":"getting_started/index.html#software-requirements","title":"Getting started > Software requirements","text":"Software requirements\n\nThis version of the ansys.grantami.bomanalytics package requires MI Restricted Substances and Sustainability Reports\n2024 R2 or later. Use\nthe PyGranta documentation to find the\nversion of this package compatible with older MI Restricted Substances and Sustainability Reports versions.\n\nMI Restricted Substances and MI Sustainability are licensed separately. Endpoints available to end users depend\non the available licenses.\n\nThe ansys.grantami.bomanalytics package currently supports Python version 3.10 through 3.13."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo install the latest PyGranta BoM Analytics release from\nPyPI, run this command:\n\nTo install a release compatible with a specific version of Granta MI Restricted Substances and Sustainability Reports,\ninstall the PyGranta metapackage with a requirement specifier:\n\nTo see which individual PyGranta package versions are installed with each version of the PyGranta metapackage, consult\nthe Package versions section of the PyGranta\ndocumentation.\n\nAlternatively, to install the latest development version from the\nPyGranta BoM Analytics repository, run this command:\n\nTo install a local development version with Git and Poetry, run these commands:\n\nThe preceding commands install the package in development mode so that you can modify\nit locally. Your changes are reflected in your Python setup after restarting the Python kernel."},{"objectID":"Home","href":"getting_started/index.html#verify-your-installation","title":"Getting started > Verify your installation","text":"Verify your installation\n\nCheck that you can start the BomServices client from Python by running this code:\n\nThis example uses Windows-based autologon authentication. For all supported authentication schemes, see the OpenAPI-Common documentation.\n\nIf you see a response from the server, congratulations. You can start using\nthe BomAnalytics service. For information about available queries,\nsee ref_grantami_bomanalytics_examples. For more in-depth descriptions,\nconsult ref_grantami_bomanalytics_api_index.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-2_Parts_impacted_substances.html#perform-a-part-impacted-substances-query","title":"Perform a part impacted substances query","text":"Perform a part impacted substances query\n\nA part impacted substances query is used to determine the substances associated with a part that are impacted by one or more defined legislations. The part record can represent either a single component, a subassembly, or a finished product. Thus, the substances can be associated with either the part record itself or any other record that the part directly or indirectly references.\n\nThis example shows how to perform an Impacted Substance query on part records and how to process the results."},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-2_Parts_impacted_substances.html#connect-to-granta-mi","title":"Perform a part impacted substances query > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Basic Usage example.\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-2_Parts_impacted_substances.html#build-and-run-the-query","title":"Perform a part impacted substances query > Build and run the query","text":"Build and run the query\n\nThe query is assembled by providing lists of part references and legislations of interest. The query returns the substances that are present in the specified parts and are impacted by the specified legislations.\n\nIn this example, the DRILL part is used. In contrast to the Material version of this query shown in a previous example, this part does not reference any substances directly. Instead, it references subcomponents, which in turn reference materials, which then reference substances. The Part Impacted Substances Query flattens all these layers of complexity and aggregates them together into a single list.\n\nFirst specify some constants that contain the part and legislation references to use.\n\n\n\n\n\nNext, import the queries module and build the query with the references in the previous cell.\n\n\n\n\n\nFinally, run the query. Passing a PartImpactedSubstancesQuery object to the Connection.run() method returns a PartImpactedSubstancesQueryResult object.\n\n\n\n\n\n\n\n\n\nA PartImpactedSubstancesQueryResult object contains three properties: impacted_substances_by_part, impacted_substances_by_legislation, and impacted_substances. They provide different views of the impacted substances at different levels of granularity."},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-2_Parts_impacted_substances.html#group-results-by-part","title":"Perform a part impacted substances query > Group results by part","text":"Group results by part\n\nThis property is structured first as a list of PartWithImpactedSubstancesResult objects, each of which contains a dictionary of lists of ImpactedSubstance objects keyed by legislation or a single flat list of all substances.\n\nYou can simplify the structure because you are only using part numbers. First, create a dictionary that maps part numbers to lists of substances impacted by the SIN_LIST.\n\n\n\n\n\nThen use the tabulate package to print a table of the substances and their quantities for the wing assembly only.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-2_Parts_impacted_substances.html#group-results-by-legislation","title":"Perform a part impacted substances query > Group results by legislation","text":"Group results by legislation\n\nThis property merges the results across all parts, returning a single dictionary of legislations that contain all impacted substances for all parts.\n\nAs before, use the tabulate package to print a table of substances. This time include substances in all parts, but only those on the SIN_LIST.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-2_Parts_impacted_substances.html#generate-results-as-a-flat-list","title":"Perform a part impacted substances query > Generate results as a flat list","text":"Generate results as a flat list\n\nThis property reduces the granularity further, producing a single flattened list of substances across all legislations and for all parts.\n\nUse the tabulate package to print a third table of substances. Because you are using the impacted_substances property, you only have one list of ImpactedSubstance objects, which covers both legislations and both the parts specified above.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-3_BoM_impacted_substances.html#perform-a-bom-impacted-substances-query","title":"Perform a BoM impacted substances query","text":"Perform a BoM impacted substances query\n\nImpacted substances queries can be performed on an XML BoM instead of a list of Granta MI records. The BoM must be in any valid Granta XML BoM format. This example shows how to use the lxml package with the XSD XML schema file to validate the XML format.\n\nFor help on constructing an XML BoM, see BoM examples.\n\nIf the XML file is generated by a Granta MI product and has not been modified, it is possible to skip this step before submitting the query. However, it is strongly advised to validate the XML BoM in all situations to avoid unexpected server-side failures. If an invalid XML file is used in a query, an exception is raised by the requests HTTP package, but it does not contain information about why the XML is non-compliant. A more detailed log is reported on the server in the MI Service Layer\nlog.\n\nThe following supporting files are required for this example:\n\ncompliance-bom.xml\n\ninvalid-bom.xml\n\nThe XSD XML schema is included in the library in the schemas subpackage."},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-3_BoM_impacted_substances.html#validate-an-xml-file-with-an-xsd-schema","title":"Perform a BoM impacted substances query > Validate an XML file with an XSD schema","text":"Validate an XML file with an XSD schema\n\nInfo:\n\nIf you are planning on using a BoM that has been generated in a supported version of Granta MI BoM Analyzer or Materials Gateway, and the BoM has not been modified, you do not need to validate the XML. However, if invalid XML is used in a query, a requests exception is raised when the query is submitted, with a more detailed report available in the MI Service Layer log. Therefore, to avoid unexpected server-side failures, you should set up\nvalidation in all situations.\n\nThe lxml package provides a similar API to the standard library XML module, but it includes some additional functionality, including schema validation. First import the lxml package and then build a simple validator function that takes both the XML file and schema file and returns the result.\n\n\n\n\n\nYou can now use this function to test the validity of a BoM generated by BoM Analyzer.\n\n\n\n\n\n\n\n\n\nYou can also test a BoM that is valid XML but is not compliant with the schema.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-3_BoM_impacted_substances.html#run-an-impacted-substances-xml-based-query","title":"Perform a BoM impacted substances query > Run an impacted substances XML-based query","text":"Run an impacted substances XML-based query\n\nNow that you have validated the XML, you can build your XML BoM-based query. First, connect to Granta MI.\n\n\n\n\n\nThe impacted substances BoM query behaves similar to other impacted substances queries. However, a BoM query can only accept a single BoM at a time, and so you only ever receive a single list of substances impacted by the specified legislations.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe BomImpactedSubstancesQueryResult object returned after running the query for impacted substances now behaves similarly to the result object for any other query for impacted substances. For example, you can print all substances impacted by the legislation using an approach from the previous example.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Impacted_Substances_Queries/2-3_BoM_impacted_substances.html#raise-an-invalid-bom-exception","title":"Perform a BoM impacted substances query > Raise an invalid BoM exception","text":"Raise an invalid BoM exception\n\nIf you were to try the same query with an invalid BoM, you would see a stack trace informing you that the MI Service Layer responded with a 500 HTTP response code. To raise the exception, change the following RUN_QUERY constant to True.\n\n\n\n"},{"objectID":"Home","href":"api/bom_builder/eco2505.html#2505-xml-bom-types","title":"25/05 XML BoM types","text":"25/05 XML BoM types\n\nThese models are Python bindings for the Ansys Granta MI 25/05 XML schema.\nNot all elements are required to define a valid BoM for analysis, and not all elements have an impact\non all types of analysis. For information on the relevant items for each analysis type,\nsee ref_grantami_bomanalytics_api_index.\n\nThese classes are available in the module ansys.grantami.bomanalytics.bom_types.eco2505.\n\nThe 25/05 XML schema is supported by MI Restricted Substances and Sustainability Reports 2061 R1 and later.\n\nThe following elements are defined in the 25/05 BoM schema but are not supported in this module:\n\nNonMIPartReference on Part\n\nAnnotations and AnnotationSources on BillOfMaterials\n\nThis module does not contain classes that correspond to these types and cannot serialize a BoM that includes these\nelements. It is still possible to deserialize an XML BoM that uses these elements, but these elements cannot be\nconverted to Python objects. See load_bom_from_file() and\nload_bom_from_text() for more details.\n\nAdded in version 2.4: The 25/05 XML schema is backwards compatible with the 24/12 XML schema. This version adds a new\nExtendedMIRecordReference type, which extends the MIRecordReference type.\nThe new type adds an equivalent_references field, and is used instead of MIRecordReference for\nall mi_xxxxx_reference fields, for example mi_part_reference.\n\n\n\n\n\n\n\nclass BillOfMaterials(components, transport_phase=<factory>, use_phase=None, location=None, notes=None, internal_id=None)\n\nType representing the root Bill of Materials object.\n\n\n\n\n\ncomponents: List[Part]\n\nThe parts contained within this BoM.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe different forms of transport to which the parts are subject.\n\n\n\nuse_phase: UsePhase | None = None\n\nThe type of use to which this product is subject.\n\n\n\nlocation: Location | None = None\n\nThe location in which the object represented by the BoM is assembled.\n\n\n\nnotes: BoMDetails | None = None\n\nAny optional notes about this BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Part(part_number, quantity=None, mass_per_unit_of_measure=None, volume_per_unit_of_measure=None, mi_part_reference=None, part_name=None, external_identity=None, components=<factory>, specifications=<factory>, materials=<factory>, substances=<factory>, processes=<factory>, rohs_exemptions=<factory>, end_of_life_fates=<factory>, internal_id=None, transport_phase=<factory>, location=None)\n\nA single part which may or may not be stored in the MI Database.\n\n\n\n\n\npart_number: str\n\nThe Part Number associated with this part.\n\n\n\nquantity: UnittedValue | None = None\n\nThe quantity of part(s) used in the parent part. For discrete parts, this will be the part count - an\ninteger with a blank unit (or “Each”). For continuous parts, it will be a mass, length, area or volume - a\nfloat value with an appropriate units.\n\n\n\nmass_per_unit_of_measure: UnittedValue | None = None\n\nThe mass of the part, after processing, relative to the unit that Quantity is given in. If MassPerUom is\nspecified and VolumePerUom is not, then specifying materials within this part is interpreted to be\npercentage by mass.\n\n\n\nvolume_per_unit_of_measure: UnittedValue | None = None\n\nThe volume of the part, after processing, relative to the unit that Quantity is given in. If VolumePerUom\nis specified and MassPerUom is not, then specifying materials within this part is interpreted to be\npercentage by volume.\n\n\n\nmi_part_reference: ExtendedMIRecordReference | None = None\n\nA reference identifying a part stored in the MI Database.\n\n\n\npart_name: str | None = None\n\nDisplay name for the part.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ncomponents: List[Part]\n\nList of subcomponents for this part.\n\n\n\nspecifications: List[Specification]\n\nList of specifications applying to this part.\n\n\n\nmaterials: List[Material]\n\nList of constituent materials making up this part.\n\n\n\nsubstances: List[Substance]\n\nList of substances contained within this part.\n\n\n\nprocesses: List[Process]\n\nList of processes used in the manufacture of this part.\n\n\n\nrohs_exemptions: List[str]\n\nIf the part has a RoHS exemption, provide one or more justifications for the exemptions here. If the part is\nanalyzed as Non-Compliant then the RoHS indicator will return Compliant with Exemptions instead.\n\n\n\nend_of_life_fates: List[EndOfLifeFate]\n\nThe fate(s) of the part, at the end-of-life of the product.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe Transports to which the part is subject.\n\n\n\nlocation: Location | None = None\n\nThe Location in which the part is manufactured.\n\n\n\nclass Material(mi_material_reference, percentage=None, mass=None, recycle_content_percentage=None, processes=<factory>, end_of_life_fates=<factory>, identity=None, name=None, external_identity=None, internal_id=None)\n\nA Material within a part or semi-finished part. The material is stored in the Database.\n\n\n\n\n\nmi_material_reference: ExtendedMIRecordReference\n\nReference identifying the material record within the MI Database.\n\n\n\npercentage: float | None = None\n\nThe fraction of the part consisting of this material. Provide either this or mass.\n\n\n\nmass: UnittedValue | None = None\n\nThe mass of this material present within the part. Provide either this or percentage.\n\n\n\nrecycle_content_percentage: float | None = None\n\nIf the recyclability is not typical for this material, or no typical value is available in the MI Database,\nthis value indicates which percentage of this material can be recycled.\n\n\n\nprocesses: List[Process]\n\nAny processes associated with the production and preparation of this material.\n\n\n\nend_of_life_fates: List[EndOfLifeFate]\n\nThe fates of this material once the product is disposed of.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Process(mi_process_reference, dimension_type, percentage=None, quantity=None, identity=None, name=None, external_identity=None, internal_id=None, transport_phase=<factory>, location=None)\n\nA process that is applied to a subassembly, part, semi-finished part or material. The process is stored in the\nDatabase.\n\n\n\n\n\nmi_process_reference: ExtendedMIRecordReference\n\nReference identifying a record in the MI Database containing information about this process.\n\n\n\ndimension_type: DimensionType\n\nObject defining the dimension affected by the process, for example area for coatings, or mass removed for\nmachining operations.\n\n\n\npercentage: float | None = None\n\nFraction of the object affected by the process, with basis specified by dimension_type. Only supported for\ndimension types Mass and MassRemoved.\n\n\n\nquantity: UnittedValue | None = None\n\nA quantification of the process according to its dimension type.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe Transports to which the material is subject before this processing step.\n\n\n\nlocation: Location | None = None\n\nThe Location in which the processing is done.\n\n\n\nclass Substance(mi_substance_reference, percentage=None, category=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA substance within a part, semi-finished part, material or specification. The substance is stored in the\nDatabase.\n\n\n\n\n\nmi_substance_reference: ExtendedMIRecordReference\n\nReference identifying the record representing the substance in the MI Database.\n\n\n\npercentage: float | None = None\n\nIf the parent object consists of more than one substance, this defines the percentage of this\nsubstance.\n\n\n\ncategory: Category | None = None\n\nRepresents whether the substance remains present in the material after production.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Specification(mi_specification_reference, quantity=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA specification for a surface treatment, part, process, or material. Refers to a record within the MI Database\nstoring the details of the specification and its impact.\n\n\n\n\n\nmi_specification_reference: ExtendedMIRecordReference\n\nReference identifying the record representing this specification in the MI Database.\n\n\n\nquantity: UnittedValue | None = None\n\nA quantification of the specification, if applicable.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass TransportStage(name, mi_transport_reference, distance, internal_id=None)\n\nDefines the transportation applied to an object, in terms of the generic transportation type (stored in the\nDatabase) and the amount of that transport used in this instance.\n\n\n\n\n\nname: str\n\nName of this transportation stage, used only to identify the stage within the BoM.\n\n\n\nmi_transport_reference: ExtendedMIRecordReference\n\nReference to a record in the MI Database representing the means of transportation for this stage.\n\n\n\ndistance: UnittedValue\n\nThe distance covered by this transportation stage.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass BoMDetails(notes=None, picture_url=None, product_name=None)\n\nExplanatory information about a BoM.\n\n\n\n\n\nnotes: str | None = None\n\nGeneral notes for the BoM object.\n\n\n\npicture_url: str | None = None\n\nThe URL of an image to include at the top of the report. This URL must be accessible from the reporting\nservices server.\n\n\n\nproduct_name: str | None = None\n\nThe product name.\n\n\n\nclass UsePhase(product_life_span, electricity_mix=None, static_mode=None, mobile_mode=None)\n\nProvides information about the sustainability of the product whilst in use, including electricity use, emissions\ndue to transport, emissions due to electricity consumption, and the expected life span of the product.\n\n\n\n\n\nproduct_life_span: ProductLifeSpan\n\nSpecifies the expected life span of the product.\n\n\n\nelectricity_mix: ElectricityMix | None = None\n\nSpecifies the proportion of electricity within the destination country that comes from fossil fuels.\n\n\n\nstatic_mode: StaticMode | None = None\n\nProvides information about the expected static use of the product.\n\n\n\nmobile_mode: MobileMode | None = None\n\nProvides information about the expected mobile use of the product.\n\n\n\nclass ProductLifeSpan(duration_years, number_of_functional_units=None, functional_unit_description=None, utility=None)\n\nSpecifies the average life span for the product represented by the BoM.\n\n\n\n\n\nduration_years: float\n\nThe product lifespan in years.\n\n\n\nnumber_of_functional_units: float | None = None\n\nThe number of functional units delivered in the lifespan of the product represented by the BoM.\n\n\n\nfunctional_unit_description: str | None = None\n\nA short (ideally one-word) description of a single functional unit.\n\n\n\nutility: UtilitySpecification | None = None\n\nIndicates how much use can be obtained from the product represented by the BoM, compared to an\nindustry-average example.\n\n\n\nclass UtilitySpecification(industry_average_duration_years=None, industry_average_number_of_functional_units=None, utility=None)\n\nSpecifies how much use can be obtained from the product represented by this BoM in comparison to a\nrepresentative industry average.\n\n\n\n\n\nindustry_average_duration_years: float | None = None\n\nThe average lifespan of all examples, throughout the industry, of the kind of product described herein.\n\n\n\nindustry_average_number_of_functional_units: float | None = None\n\nThe average number of functional units delivered, in their lifespan, by all examples, throughout the\nindustry, of the kind of product represented by this object.\n\n\n\nutility: float | None = None\n\nDirectly specifies the utility.\n\n\n\nclass StaticMode(mi_energy_conversion_reference, power_rating, days_used_per_year, hours_used_per_day)\n\nSpecifies the primary energy conversion that occurs during the product’s use.\n\n\n\n\n\nmi_energy_conversion_reference: ExtendedMIRecordReference\n\nReference to a record in the MI database representing the primary energy conversion taking place when the\nproduct is in use.\n\n\n\npower_rating: UnittedValue\n\nThe power rating of the product whilst in use.\n\n\n\ndays_used_per_year: float\n\nThe number of days per year that the product will be used.\n\n\n\nhours_used_per_day: float\n\nThe number of hours per day of use that the product will be used.\n\n\n\nclass MobileMode(mi_transport_reference, days_used_per_year, distance_travelled_per_day)\n\nIf the product is transported as part of its use then this type contains details about the way in which it is\ntransported.\n\n\n\n\n\nmi_transport_reference: ExtendedMIRecordReference\n\nReference to a record in the MI database representing the means of transport for this product during use.\n\n\n\ndays_used_per_year: float\n\nThe number of days in a year the product will be transported during use.\n\n\n\ndistance_travelled_per_day: UnittedValue\n\nThe distance the product will be transported each day as part of its use.\n\n\n\nclass ElectricityMix(mi_region_reference=None, percentage_fossil_fuels=None)\n\nIf the product consumes electrical power, then the amount of CO2 produced to generate depends upon the mix of\nfossil fuel burning power stations in the region of use.  This type lets you specify the electrical generation\nmix by either specifying the region or country of use or by specifying the percentage of power that comes from\nfossil fuel sources.\n\n\n\n\n\nmi_region_reference: ExtendedMIRecordReference | None = None\n\nReference to a record in the MI database representing the electricity mix for the destination country.\n\n\n\npercentage_fossil_fuels: float | None = None\n\nThe percentage of electrical power production within the destination country that comes from fossil fuels.\n\n\n\nclass Location(mi_location_reference=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nDefines the manufacturing location for the BoM for use in process calculations.\n\n\n\n\n\nmi_location_reference: ExtendedMIRecordReference | None = None\n\nReference to a record in the MI database representing the manufacturing location.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass UnittedValue(value, unit=None)\n\nA physical quantity with a unit. If provided in an input then the unit must exist within the MI database,\notherwise an error will be raised.\n\n\n\n\n\nvalue: float\n\nThe value of the quantity in specified units.\n\n\n\nunit: str | None = None\n\nIf provided, specifies the unit symbol applying to the quantity. If absent the quantity will be treated as\ndimensionless.\n\n\n\nclass EndOfLifeFate(mi_end_of_life_reference, fraction)\n\nThe fate of a material at the end-of-life of the product. For example if a material can be recycled, and what\nfraction of the total mass or volume can be recycled.\n\n\n\n\n\nmi_end_of_life_reference: ExtendedMIRecordReference\n\nReference identifying the applicable fate within the MI Database.\n\n\n\nfraction: float\n\nFraction of the total mass or volume of material to which this fate applies.\n\n\n\nclass ExtendedMIRecordReference(db_key, record_history_identity=None, record_version_number=None, record_guid=None, record_history_guid=None, lookup_attribute_reference=None, lookup_value=None, record_uid=None, equivalent_references=<factory>)\n\nA type extending gbt:MIRecordReference that includes an EquivalentReferences element to hold an arbitrary number\nof additional gbt:MIRecordReference entries.\n\n\n\n\n\nequivalent_references: List[MIRecordReference]\n\nAdditional records which link to the analysis material.\n\n\n\nlookup_attribute_reference: MIAttributeReference | None = None\n\nWhen provided in combination with lookup_value identifies a record by a unique short-text attribute.\nSpecifies the attribute to be used for the lookup operation.\n\n\n\nlookup_value: str | None = None\n\nWhen provided in combination with lookup_attribute_reference identifies a record by a unique short-text\nattribute. Specifies the value to be used for the lookup operation. If this is not unique an error will be\nreturned.\n\n\n\nrecord_guid: str | None = None\n\nIdentifies a particular version of a record by its GUID, this is a more persistent way to refer to a record.\n\n\n\nrecord_history_guid: str | None = None\n\nIdentifies a record history, the latest visible version will be returned. record_version_number has no\neffect on references that use record_history_guid.\n\n\n\nrecord_history_identity: int | None = None\n\nThis is the best-performing and highest-priority way to reference a record; however, identities might not\nbe suitable for long-term persistence.\n\n\n\nrecord_uid: str | None = None\n\nThe recordUID may be used to identify a particular XML element representing a record. It does not represent\nany property or attribute of an actual MI Record.\n\n\n\nrecord_version_number: int | None = None\n\nIf omitted, this means the latest version visible to the user.\n\n\n\ndb_key: str\n\nThe key that uniquely identifies a particular Database on the MI Server.\n\n\n\nclass Category(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for Category.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\n\n\nclass DimensionType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for DimensionType.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/impacted_substances/parts.html#part-impacted-substances","title":"Part impacted substances","text":"Part impacted substances"},{"objectID":"Home","href":"api/impacted_substances/parts.html#query-definition","title":"Part impacted substances > Query definition","text":"Query definition\n\n\n\nclass PartImpactedSubstancesQuery\n\nGets the substances impacted by a list of legislations for Granta MI part records.\n\nAll methods used to add parts and legislations to this query return the query itself so that they can be chained\ntogether as required. Records can be added using a combination of any of the available methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nPartImpactedSubstancesQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> query = (\n...     PartImpactedSubstancesQuery()\n...     .with_part_numbers(['DRILL', 'FLRY34'])\n...     .with_legislation_ids([\"Candidate_AnnexXV\"])\n... )\n>>> cxn.run(query)\n<PartImpactedSubstancesQueryResult: 2 PartWithImpactedSubstances results>\n\n\n\n\n\nwith_legislation_ids(legislation_ids)\n\nAdd a list or set of legislations to retrieve the impacted substances for.\n\nLegislations are identified based on their Legislation ID attribute value.\n\nParameters\n\nlegislation_ids\n\npython:list[python:str] | set[python:str]\n\nList or set of legislation ids.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\n\n\nwith_part_numbers(part_numbers, external_database_key=None)\n\nAdd a list or set of parts to a part query, referenced by part number.\n\nIf the records referenced by values in the part_numbers argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\npart_numbers\n\npython:list[python:str] | set[python:str]\n\nList or set of part numbers.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the part_numbers argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = PartComplianceQuery().with_part_numbers(['DRILL', 'FLRY34'])\n<PartCompliance: 2 parts, batch size = 10, 0 indicators>\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>"},{"objectID":"Home","href":"api/impacted_substances/parts.html#query-result","title":"Part impacted substances > Query result","text":"Query result\n\n\n\nclass PartImpactedSubstancesQueryResult(results, messages)\n\nRetrieves the result of running the PartImpactedSubstancesQuery\nclass.\n\nThis class describes the substances in the specified parts impacted by one or more legislations.\n\n\n\n\n\nimpacted_substances_by_part\n\nImpacted substances for each part specified in the original query.\n\nBecause parts do not have a single well-defined reference, the results are provided as a flat list.\n\nReturns\n\npython:list[PartWithImpactedSubstancesResult]\n\n\n\nExamples\n\n>>> result: PartImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_part\n[<PartWithImpactedSubstancesResult({PartNumber: DRILL}), 1 legislations>,...]\n\n\n\nimpacted_substances_by_legislation\n\nView of the results for a query for impacted substances, grouped by legislation only.\n\nThe substances from all items specified in the query are merged for each legislation, providing a single\nlist of impacted substances grouped by legislation only. Substances are duplicated where they appear in\nmultiple items for the same legislation.\n\nReturns\n\nimpacted_substances\n\npython:dict[python:str, ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_legislation\n{'Candidate_AnnexXV': [\n    <ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n}\n\n\n\nimpacted_substances\n\nView of the results for a query for impacted substances, flattened into a single list.\n\nThe substances from all items specified in the query are merged across item and legislation, providing a\nsingle flat list. Substances are duplicated where they appear in multiple items or legislations.\n\nReturns\n\nimpacted_substances\n\npython:list[ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/impacted_substances/parts.html#part-result","title":"Part impacted substances > Part result","text":"Part result\n\n\n\nclass PartWithImpactedSubstancesResult(legislations, **kwargs)\n\nRetrieves an individual part included as part of an impacted substances query result.\n\nThis object includes two categories of attributes:\n\nThe reference to the part in Granta MI\n\nThe impacted substances associated with this part, both as a flat list and separated by legislation\n\nNotes\n\nObjects of this class are only returned as the result of a query. The class is not intended to be instantiated\ndirectly.\n\nExamples\n\n>>> result: PartImpactedSubstancesQueryResult\n>>> part_result = result.impacted_substances_by_part[0]\n>>> part_result.substances_by_legislation\n{'Prop65': [<ImpactedSubstance: {\"cas_number\": 90481-04-2}>]}\n\n>>> result: PartImpactedSubstancesQueryResult\n>>> part_result = result.impacted_substances_by_part[0]\n>>> part_result.substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>]\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty part_number: str | None\n\nPart number.\n\n\n\nproperty input_part_number: str | None\n\nInput part number.\n\nThis property is only populated on BoM query results and is equal to the <PartNumber> element of\nthe corresponding input BoM item.\n\n\n\nproperty equivalent_references: list[PartReference] | None\n\nOther part records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty substances_by_legislation: Dict[str, List[ImpactedSubstance]]\n\nSubstances impacted for this item, grouped by legislation ID.\n\n\n\nproperty substances: List[ImpactedSubstance]\n\nSubstances impacted for this item as a flattened list.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project.\n\nSee CHANGELOG.md for release notes for v2.2.0 and earlier."},{"objectID":"Release notes","href":"changelog.html#231---july-29-2025","title":"Release notes > 2.3.1 - July 29, 2025","text":"2.3.1 - July 29, 2025\n\nMiscellaneous\n\n\n\n\n\nUpdate changelog with link to stable docs\n\n#850\n\nRefer to the documentation on ansys help that relates to the 2025 r2 release\n\n#855\n\nPrepare 2.3.1 release\n\n#859"},{"objectID":"Release notes","href":"changelog.html#230---july-10-2025","title":"Release notes > 2.3.0 - July 10, 2025","text":"2.3.0 - July 10, 2025\n\nAdded\n\n\n\n\n\nSupport 24/12 Eco BoM\n\n#693\n\nOptionally raise exceptions if a BoM can’t be fully deserialized\n\n#702\n\nTest on multiple servers\n\n#710\n\nFeat/support v2 api\n\n#713\n\nAdd part and process-level transport information to BoM Sustainability responses\n\n#719\n\nAdd transport groupings by part and by category to sustainability summary results\n\n#724\n\nImprove documentation of Enum classes\n\n#726\n\nRe-organize test BoMs and payloads\n\n#727\n\nAdd ImplactedSubstance and Compliance integration tests for 24/12 BoMs\n\n#735\n\nFixed\n\n\n\n\n\nMark failing tests as xfail\n\n#718\n\nAdd reprs for new result classes\n\n#730\n\nDependencies\n\n\n\n\n\nMigrate to BoM Analytics Services V2\n\n#714\n\nUpdate jinja2 to 3.1.6\n\n#740\n\nUpdate ansys-openapi-common to 2.2.2\n\n#741\n\nUpdate bomanalytics-openapi to 4.0.0.dev165\n\n#751\n\nUpdate bomanalytics-openapi to v4.0.0rc1\n\n#781\n\nUpdate bomanalytics-openapi to 4.0.0rc4\n\n#786\n\nUpdate bomanalytics-openapi dependency to 4.0.0 stable release\n\n#787\n\nRemove private PyPI references\n\n#788\n\nPrepare 2.3.0rc0 release\n\n#820\n\nMiscellaneous\n\n\n\n\n\nPrepare 2.3.0 release\n\n#848\n\nDocumentation\n\n\n\n\n\nMove bom types to submodule\n\n#703\n\nPin plotly to <6 to avoid bug during documentation build\n\n#723\n\nUpdate examples to include transport results\n\n#728\n\nDocumentation review\n\n#738\n\nImprove documentation for Granta MI reports bundle version support\n\n#779\n\nAdd references to 24/12 BoM format in API documentation\n\n#780\n\nInclude changelog in documentation\n\n#795\n\nAdd an example of creating a BoM from Python classes directly\n\n#800, #818\n\nSankey diagram example\n\n#803\n\nAddress example notebook formatting issues\n\n#805\n\nRe-organize examples to improve grouping and readability\n\n#817\n\nAdd an example of creating a bom from a csv file\n\n#819\n\nMaintenance\n\n\n\n\n\nchore: update CHANGELOG for v2.2.0\n\n#673\n\nUpdate License Date in Headers\n\n#681\n\nAdd a call to BoM Analytics Services during VM start\n\n#706\n\nWarm up databases\n\n#708\n\nRun server_check.yml workflow for dependabot PRs\n\n#717\n\nFix Dependabot Configuration for Private PyPI\n\n#742\n\nAllow dependabot server checks to run in parallel\n\n#748\n\nMove Integration Test check to top-level workflow\n\n#749\n\ndocs: Update CONTRIBUTORS.md with the latest contributors\n\n#754\n\nUpdate database preparation scripts\n\n#771\n\nUse PyPI-authored publish action\n\n#772\n\nGenerate provenance attestations\n\n#773\n\nBump version to 2.3\n\n#776\n\nUse git SHA to pin action version\n\n#785\n\nMove release branch to use release VM\n\n#790\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/impacted_substances/materials.html#material-impacted-substances","title":"Material impacted substances","text":"Material impacted substances"},{"objectID":"Home","href":"api/impacted_substances/materials.html#query-definition","title":"Material impacted substances > Query definition","text":"Query definition\n\n\n\nclass MaterialImpactedSubstancesQuery\n\nGets the substances impacted by a list of legislations for Granta MI material records.\n\nAll methods used to add materials and legislations to this query return the query itself so that they can be chained\ntogether as required. Records can be added using a combination of any of the available methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nMaterialImpactedSubstancesQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> query = (\n...     MaterialImpactedSubstancesQuery()\n...     .with_material_ids(['elastomer-butadienerubber', 'NBR-100'])\n...     .with_legislation_ids([\"Candidate_AnnexXV\"])\n... )\n>>> cxn.run(query)\n<MaterialImpactedSubstancesQueryResult: 2 MaterialWithImpactedSubstances results>\n\n\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_material_ids(material_ids, external_database_key=None)\n\nAdd a list or set of materials to a material query, referenced by the material ID attribute value.\n\nMaterial IDs are valid for both MaterialUniverse and Materials - in house records.\n\nIf the records referenced by values in the material_ids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nmaterial_ids\n\npython:list[python:str] | set[set]\n\nList or set of material IDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the material_ids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_material_ids(['elastomer-butadienerubber', 'NBR-100'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>\n\n\n\nwith_legislation_ids(legislation_ids)\n\nAdd a list or set of legislations to retrieve the impacted substances for.\n\nLegislations are identified based on their Legislation ID attribute value.\n\nParameters\n\nlegislation_ids\n\npython:list[python:str] | set[python:str]\n\nList or set of legislation ids.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier."},{"objectID":"Home","href":"api/impacted_substances/materials.html#query-result","title":"Material impacted substances > Query result","text":"Query result\n\n\n\nclass MaterialImpactedSubstancesQueryResult(results, messages)\n\nRetrieves the result of running the MaterialImpactedSubstancesQuery\nclass.\n\nThis class describes the substances in the specified materials impacted by one or more legislations.\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.messages\n[LogMessage(severity='warning', message='Material \"ABS+PVC (flame retarded)\" has\n    2 substance row(s) with missing substance links.')]\n\n\n\n\n\nimpacted_substances_by_material\n\nImpacted substances for each material specified in the original query.\n\nReturns\n\npython:list[MaterialWithImpactedSubstancesResult]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_material\n[<MaterialWithImpactedSubstancesResult({MaterialId: elastomer-butadienerubber}),\n        1 legislations>,...]\n\n\n\nimpacted_substances_by_legislation\n\nView of the results for a query for impacted substances, grouped by legislation only.\n\nThe substances from all items specified in the query are merged for each legislation, providing a single\nlist of impacted substances grouped by legislation only. Substances are duplicated where they appear in\nmultiple items for the same legislation.\n\nReturns\n\nimpacted_substances\n\npython:dict[python:str, ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances_by_legislation\n{'Candidate_AnnexXV': [\n    <ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n}\n\n\n\nimpacted_substances\n\nView of the results for a query for impacted substances, flattened into a single list.\n\nThe substances from all items specified in the query are merged across item and legislation, providing a\nsingle flat list. Substances are duplicated where they appear in multiple items or legislations.\n\nReturns\n\nimpacted_substances\n\npython:list[ImpactedSubstance]\n\n\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> result.impacted_substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/impacted_substances/materials.html#material-result","title":"Material impacted substances > Material result","text":"Material result\n\n\n\nclass MaterialWithImpactedSubstancesResult(legislations, **kwargs)\n\nRetrieves an individual material that is included as part of an impacted substances query result.\n\nThis object includes two categories of attributes:\n\nThe reference to the material in Granta MI\n\nThe impacted substances associated with this material, both as a flat list and separated by legislation\n\nNotes\n\nObjects of this class are only returned as the result of a query. The class is not intended to be instantiated\ndirectly.\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> material_result = result.impacted_substances_by_material[0]\n>>> material_result.substances_by_legislation\n{'Prop65': [<ImpactedSubstance: {\"cas_number\": 90481-04-2}>]}\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> material_result = result.impacted_substances_by_material[0]\n>>> material_result.substances\n[<ImpactedSubstance: {\"cas_number\": 90481-04-2}>]\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty material_id: str | None\n\nMaterial ID.\n\n\n\nproperty equivalent_references: list[MaterialReference] | None\n\nOther material records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty substances_by_legislation: Dict[str, List[ImpactedSubstance]]\n\nSubstances impacted for this item, grouped by legislation ID.\n\n\n\nproperty substances: List[ImpactedSubstance]\n\nSubstances impacted for this item as a flattened list.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#create-an-xml-bom-from-a-json-data-source","title":"Create an XML BoM from a JSON data source","text":"Create an XML BoM from a JSON data source\n\nThis example shows how to use the bom_types subpackage to create a valid Granta MI XML BoM. This subpackage can be used to help construct a Granta 23/01-compliant XML BoM file to use with the BoM queries provided by this package. The code in this example shows how to generate a BoM from a representative JSON data source. The general approach can be applied to data in other formats or provided by other APIs.\n\nYou can download the external data source used in this example.\n\nThe result of this example is a Granta 23/01-compliant XML BoM file that is suitable for sustainability analysis with the Granta MI BoM Analytics API. For more information on the expected content of XML BoMs, see the Granta MI documentation."},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#load-the-external-data","title":"Create an XML BoM from a JSON data source > Load the external data","text":"Load the external data\n\nFirst load the JSON file and use the json module, which converts the text into a hierarchical structure of dict and list objects.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#inspect-the-external-data","title":"Create an XML BoM from a JSON data source > Inspect the external data","text":"Inspect the external data\n\nThe external data source defines a flat list of items. Each item has at least the following:\n\nA type field that identifies the type of the item.\n\nA parent_part_identifier field that identifies the parent part in the hierarchy.\n\nBecause items that refer to components do not have an equivalent record in Granta MI, they contain only the preceding fields and quantity and mass fields.\n\nItems that refer to materials, processes, and transport stages correspond to records in Granta MI that contain the relevant sustainability metrics for these items. As a result, these items contain both a human-readable name field and a Granta_MI_Record_GUID field. In this scenario, the system that provided the data source contains the direct material assignments from Granta MI."},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#components","title":"Create an XML BoM from a JSON data source > Components","text":"Components\n\nThe external data source defines three different types of component:\n\nA single item of type Product. The external data source describes the BoM for this product. All other items are expected to be children of this item.\n\nItems of type Assembly.\n\nItems of type Part.\n\nExtract the items into separate lists based on the type field. The Product item is stored in a variable directly because there can only be one product per BoM by definition.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#materials","title":"Create an XML BoM from a JSON data source > Materials","text":"Materials\n\nBecause the third-party system only allows assignment of a single material per part, there is no ‘quantity’ associated with the material. It is assumed that the part is made entirely of the referenced material.\n\nExtract the material items into a list based on the type field.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#processes","title":"Create an XML BoM from a JSON data source > Processes","text":"Processes\n\nThe external data source defines three different types of process:\n\nMaterialFormingStep items describe a process that forms a mass of material into a shaped component. In this scenario, the third-party system defines a single forming process for each part. These processes are mapped to Primary processes in the Granta MI BoM.\n\nMaterialProcessingStep items describe extra processing steps applied after the main forming processing step. These items include step_order and mass_removed_in_kg fields, which together fully describe the material removal. These processes are mapped to Secondary processes in the Granta MI BoM.\n\nPartProcessingStep items describe processes applied directly to parts. These processes are mapped to Joining & Finishing processes in the Granta MI BoM.\n\nExtract the process items into lists based on their type fields.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#transports","title":"Create an XML BoM from a JSON data source > Transports","text":"Transports\n\nThe external data source defines transport stages. These items of type Transport contain a distance_in_km field that contains the distance covered by the transport step.\n\nExtract the transport items into a list based on their type fields.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#build-the-billofmaterials-object","title":"Create an XML BoM from a JSON data source > Build the BillOfMaterials object","text":"Build the BillOfMaterials object\n\nThe PyGranta BoM Analytics package provides the bom_types subpackage, which implements serialization and deserialization between the Granta 23/01 BoM XML schema and Python objects. This section shows how data from the external data source is processed to create BoM Python objects, which can then be serialized to an XML BoM.\n\nSince this example is constructing a 23/01 BoM, the bom_types.eco2301 module is used. Other modules are available which support different BoM versions.\n\nIf you are using a customized database, before running any queries, change the database key value in the following cell and see the Database specific configuration example to appropriately configure the connection.\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#components","title":"Create an XML BoM from a JSON data source > Components","text":"Components\n\nThe external system defines a part_identifier field that uniquely identifies parts. However, the Granta MI BoM schema requires a part to define a Part number. Use the external part_identifier as a part number.\n\nFirst, create a bom_types.eco2301.Part object for every item that maps to a BoM part and add it to a dictionary indexed by the part number. This allows you to identify the correct parent part when adding materials and processes.\n\n\n\n\n\n\n\n\n\nNext, define the hierarchy. The external data source defines a hierarchy by reference (for example, the child part contains the identity of the parent part), but the Granta MI BoM represents the hierarchy using the BoM structure (for example, a parent part contains all child parts as properties on the parent).\n\nThe following cell iterates over all source parts and assemblies again and appends child parts to their parents’ components property.\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#materials","title":"Create an XML BoM from a JSON data source > Materials","text":"Materials\n\nNext, create bom_types.eco2301.Material objects for each material and add the materials to their parent part object.\n\nThere are multiple possible ways of identifying Granta MI records in the BoM. In this example, the external data source holds references to Granta MI records by record GUIDs, and so the GUIDs are used to instantiate the required MIRecordReference objects.\n\nThe MIRecordReference class is defined in the bom_types.gbt1205 module. The bom_types.gbt1205 module contains generic types which are used for all BoM versions.\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#processes","title":"Create an XML BoM from a JSON data source > Processes","text":"Processes\n\nIn general, the order in which processes are applied is significant and can affect the result. To ensure consistency, the external system defines a step_order field, which represents the order in which processes are applied to the parent part or material. The cells in this section first sort the processes by step_order to ensure that they are added to the BoM correctly.\n\nFirst, apply primary and secondary processes to materials. In the external data source, the parent of a process item is always the parent part, but sustainability analysis expects only a single material assigned to each part. As a result, the process can be moved from the part to the material when constructing the Granta BoM.\n\nMaterialFormingStep processes from the external data source are all mapped to Process with a Mass dimension type. This is the default value for processes whose environmental impact is calculated based on the mass of material that goes through the process. This mass is calculated from the final mass of the part and mass removed during additional processing steps. For more information on mass calculations, see the Granta MI documentation.\n\n\n\n\n\nNext, apply secondary processes to materials. These are added sequentially to the list of processes on the material object, in the same order as defined by the step_order field.\n\nMaterialProcessingStep processes from the external data source are mapped to Process with a MassRemoved dimension type. For these processes, the environmental impact is calculated based on the mass of material removed.\n\n\n\n\n\nFinally, apply joining and finishing processes to the part.\n\nThe example external data only includes part processes characterized by the length dimension. However, the Granta MI BoM schema has support for different DimensionType values depending on the process. For example, welding is typically defined by a welding path length, but a coating operation would be best quantified by an area.\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#billofmaterials-object","title":"Create an XML BoM from a JSON data source > BillOfMaterials object","text":"BillOfMaterials object\n\nThe original root part can now be retrieved from the components dictionary. This Part item contains the entire structure of parts, materials, and process objects. The following cell extracts this component from the dictionary of all components, deletes the dictionary, and prints an arbitrary property of the root component to illustrate this structure.\n\n\n\n\n\n\n\n\n\nThe final step is to create a BillOfMaterials object and add the root component and transport stages. Note that the transport stages are added to the BillOfMaterials object itself, not to a specific component.\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-2_Creating_an_XML_BoM_from_JSON.html#serialize-the-bom","title":"Create an XML BoM from a JSON data source > Serialize the BoM","text":"Serialize the BoM\n\nUse the BomHandler helper class to serialize the object to XML. The resulting string can be used in a sustainability query. For more information, see the Sustainability examples.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/introduction.html#introduction","title":"Introduction","text":"Introduction\n\nGranta MI provides a mature and feature-rich method for managing\nrestricted substances and sustainability data as part of the Granta MI\nRestricted Substances and Sustainability database. When combined with\nGranta MI BoM Analyzer and Reports, the data managed in Granta MI can be\nleveraged to determine compliance and sustainability for components,\nassemblies, and even entire products.\n\nThe grantami-bomanalytics package takes the functionality available\ninteractively through the Granta MI web browser and exposes it as an API.\nThe expected use cases for this package are as follows:\n\nRolling up compliance and sustainability results periodically and storing\nthese results in Granta MI.\n\nScripting compliance and sustainability calculations as part of a release\nprocess.\n\nAllowing compliance and sustainability to be determined for BoMs (Bills of\nMaterials) stored in third-party systems, such as PLM or ERP systems.\n\nThis package provides access to two similar but distinct APIs:\n\nThe Granta MI Restricted Substances API is used to determine the impacted\nsubstances and compliance of products, assemblies, specifications, and\nmaterials against one or more legislations.\n\nThe Granta MI Sustainability API is used to evaluate the environmental\nperformance of products, assemblies, materials, manufacturing processes\nand transport stages.\n\nIn both cases, the grantami-bomanalytics package makes the underlying\nREST APIs easier to use by providing idiomatic Python interfaces and example\nscripts.\n\nThis package also provides a subpackage to help construct Granta XML BoMs.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/compliance/parts.html#part-compliance","title":"Part compliance","text":"Part compliance"},{"objectID":"Home","href":"api/compliance/parts.html#query-definition","title":"Part compliance > Query definition","text":"Query definition\n\n\n\nclass PartComplianceQuery\n\nEvaluates compliance for Granta MI part records against a number of indicators.\n\nIf the parts are associated with materials, parts, specifications, or substances, these are also\nevaluated and returned.\n\nAll methods used to add parts and indicators to this query return the query itself so that they can be chained\ntogether as required. Records can be added using a combination of any of the available methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nPartComplianceQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> query = (\n...     PartComplianceQuery()\n...     .with_part_numbers(['DRILL', 'FLRY34'])\n...     .with_indicators([indicator])\n... )\n>>> cxn.run(query)\n<PartComplianceQueryResult: 2 PartWithCompliance results>\n\n\n\n\n\nwith_indicators(indicators)\n\nAdd a list or set of WatchListIndicator or\nRoHSIndicator objects to evaluate compliance against.\n\nParameters\n\nindicators\n\npython:list[WatchListIndicator | RoHSIndicator]\n\nList of indicators.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described above.\n\nExamples\n\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> MaterialComplianceQuery().with_indicators([indicator])\n<MaterialCompliance: 0 materials, batch size = 100, 1 indicators>\n\n\n\nwith_part_numbers(part_numbers, external_database_key=None)\n\nAdd a list or set of parts to a part query, referenced by part number.\n\nIf the records referenced by values in the part_numbers argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\npart_numbers\n\npython:list[python:str] | set[python:str]\n\nList or set of part numbers.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the part_numbers argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = PartComplianceQuery().with_part_numbers(['DRILL', 'FLRY34'])\n<PartCompliance: 2 parts, batch size = 10, 0 indicators>\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>"},{"objectID":"Home","href":"api/compliance/parts.html#query-result","title":"Part compliance > Query result","text":"Query result\n\n\n\nclass PartComplianceQueryResult(results, indicator_definitions, messages)\n\nRetrieves the result of running the PartComplianceQuery\nclass.\n\nThis class describes the compliance status of parts against one or more indicators.\n\n\n\n\n\ncompliance_by_indicator\n\nCompliance status for each indicator in the original query. The indicator name\nis used as the dictionary key.\n\nThe result for each indicator is determined by taking the worst result for that indicator across all items\nincluded in the query.\n\nReturns\n\npython:dict[python:str, WatchListIndicator | RoHSIndicator]\n\n\n\nExamples\n\n>>> compliance_result: MaterialComplianceQueryResult\n>>> compliance_result.compliance_by_indicator\n{'Prop 65': <WatchListIndicator,\n        name: Prop 65,\n        flag: WatchListFlag.WatchListAboveThreshold>\n}\n\n\n\ncompliance_by_part_and_indicator\n\nCompliance status for each part specified in the original query.\n\nReturns\n\npython:list[PartWithComplianceResult]\n\n\n\nExamples\n\n>>> result: PartComplianceQueryResult\n>>> result.compliance_by_part_and_indicator\n[<PartWithComplianceResult({PartNumber: DRILL}), 1 indicators>,...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/compliance/parts.html#part-result","title":"Part compliance > Part result","text":"Part result\n\n\n\nclass PartWithComplianceResult(**kwargs)\n\nRetrieves an individual part included as part of a compliance query result.\nThis object includes three categories of attributes:\n\nThe reference to the part in Granta MI (if the part references a record)\n\nThe compliance status of this part, stored in a dictionary of one or more indicator objects\n\nAny part, specification, material, or substance objects which are a child of this part object\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty part_number: str | None\n\nPart number.\n\n\n\nproperty input_part_number: str | None\n\nInput part number.\n\nThis property is only populated on BoM query results and is equal to the <PartNumber> element of\nthe corresponding input BoM item.\n\n\n\nproperty equivalent_references: list[PartReference] | None\n\nOther part records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty indicators: Dict[str, WatchListIndicator | RoHSIndicator]\n\nCompliance status of this item for each indicator included in the original query.\n\n\n\nproperty parts: List[PartWithComplianceResult]\n\nPart compliance result objects that are direct children of this part in the BoM.\n\n\n\nproperty specifications: List[SpecificationWithComplianceResult]\n\nSpecification compliance result objects that are direct children of this item in the BoM.\n\n\n\nproperty materials: List[MaterialWithComplianceResult]\n\nMaterial compliance result objects that are direct children of this part or specification in the BoM.\n\n\n\nproperty substances: List[SubstanceWithComplianceResult]\n\nSubstance compliance result objects that are direct children of this item in the BoM.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-1_Substance_compliance.html#perform-a-substance-compliance-query","title":"Perform a substance compliance query","text":"Perform a substance compliance query\n\nA substance compliance query determines whether one or more substances are compliant with the specified indicators. This example checks several materials for substances included on two watch lists (“EU REACH - The Candidate List” and “The SIN List 2.1”), specifying substance amounts and thresholds for compliance."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-1_Substance_compliance.html#connect-to-granta-mi","title":"Perform a substance compliance query > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Basic Usage example.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-1_Substance_compliance.html#define-an-indicator","title":"Perform a substance compliance query > Define an indicator","text":"Define an indicator\n\nA Compliance query determines compliance against indicators, as opposed to an Impacted Substances query which determines compliance directly against legislations.\n\nThere are two types of indicator objects (WatchListIndicator and RohsIndicator), and the syntax that follows applies to both object types. The differences in the internal implementation of the two objects are described in the API documentation.\n\nGenerally speaking, if a substance is impacted by a legislation associated with an indicator and in a quantity above a specified threshold, the substance is non-compliant with that indicator. This non-compliance applies to any other items in the BoM hierarchy that directly or indirectly include that substance.\n\nFirst, create two WatchListIndicator objects.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-1_Substance_compliance.html#build-and-run-the-query","title":"Perform a substance compliance query > Build and run the query","text":"Build and run the query\n\nNext, define the query itself. Substances can be referenced by Granta MI record reference, CAS number, EC number, or chemical name.\n\nThe substance quantity, an optional argument, defaults to 100% if no value is specified.\n\n\n\n\n\nFinally, run the query. Passing a SubstanceComplianceQuery object to the Connection.run() method returns a SubstanceComplianceQueryResult object.\n\n\n\n\n\n\n\n\n\nThe result object contains two properties: compliance_by_substance_and_indicator and compliance_by_indicator."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-1_Substance_compliance.html#group-results-by-substance","title":"Perform a substance compliance query > Group results by substance","text":"Group results by substance\n\ncompliance_by_substance_and_indicator contains a list of SubstanceWithComplianceResult objects that contain the reference to the substance record and the compliance status in the list of indicators. To determine which substances are compliant, loop over each one and compare the indicator to a certain threshold. This example examines the SVHC indicator.\n\nThe possible states of the indicator are available on the Indicator.available_flags attribute and can be compared using standard Python operators.\n\n\n\n\n\nNow print the SVHC and non-SVHC substances.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-1_Substance_compliance.html#group-results-by-indicator","title":"Perform a substance compliance query > Group results by indicator","text":"Group results by indicator\n\nAlternatively, using the compliance_by_indicator property provides a single indicator result that summarizes the results across all substances in the query. This would be useful in a situation where a concept material is stored outside of Granta MI but its compliance must be determined. Because you know it contains the substances specified in the preceding query, you can use the compliance_by_indicator property to tell if this concept material is compliant based on the worst result of\nthe individual substances.\n\n\n\n\n\n\n\n\n\nNote that this property does not tell you which substance is responsible for the non-compliance. This would require either performing a more granular analysis as shown earlier or importing the material into Granta MI and running a compliance query on that material record."},{"objectID":"Home","href":"api/bom_builder/eco2301.html#2301-xml-bom-types","title":"23/01 XML BoM types","text":"23/01 XML BoM types\n\nThese models are Python bindings for the Ansys Granta MI 23/01 XML schema.\nNot all elements are required to define a valid BoM for analysis, and not all elements have an impact\non all types of analysis. For information on the relevant items for each analysis type,\nsee ref_grantami_bomanalytics_api_index.\n\nThese classes are available in the module ansys.grantami.bomanalytics.bom_types.eco2301.\n\nThe 23/01 XML schema is supported by MI Restricted Substances and Sustainability Reports 2024 R1 and later.\n\nThis is not the latest version of the Granta MI BoM Schema. The\n24/12 XML schema is backwards compatible with the 23/01 XML schema,\nbut supports associating TransportStage and Location information with Part and Process objects. It is\nsupported by MI Restricted Substances and Sustainability Reports 2025 R2 and later.\n\nThe following elements are defined in the 23/01 BoM schema but are not supported in this module:\n\nNonMIPartReference on Part\n\nAnnotations and AnnotationSources on BillOfMaterials\n\nThis module does not contain classes that correspond to these types and cannot serialize a BoM that includes these\nelements. It is still possible to deserialize an XML BoM that uses these elements, but these elements cannot be\nconverted to Python objects. See load_bom_from_file() and\nload_bom_from_text() for more details.\n\nChanged in version 2.3: The types documented on this page have moved from ansys.grantami.bomanalytics.bom_types to\nansys.grantami.bomanalytics.bom_types.eco2301. They may still be imported from the original location for\ncompatibility.\n\n\n\n\n\n\n\nclass BillOfMaterials(components, transport_phase=<factory>, use_phase=None, location=None, notes=None, internal_id=None)\n\nType representing the root Bill of Materials object.\n\n\n\n\n\ncomponents: List[Part]\n\nThe parts contained within this BoM.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe different forms of transport to which the parts are subject.\n\n\n\nuse_phase: UsePhase | None = None\n\nThe type of use to which this product is subject.\n\n\n\nlocation: Location | None = None\n\nThe location in which the object represented by the BoM is assembled.\n\n\n\nnotes: BoMDetails | None = None\n\nAny optional notes about this BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Part(part_number, quantity=None, mass_per_unit_of_measure=None, volume_per_unit_of_measure=None, mi_part_reference=None, part_name=None, external_identity=None, components=<factory>, specifications=<factory>, materials=<factory>, substances=<factory>, processes=<factory>, rohs_exemptions=<factory>, end_of_life_fates=<factory>, internal_id=None)\n\nA single part which may or may not be stored in the MI Database.\n\n\n\n\n\npart_number: str\n\nThe Part Number associated with this part.\n\n\n\nquantity: UnittedValue | None = None\n\nThe quantity of part(s) used in the parent part. For discrete parts, this will be the part count - an\ninteger with a blank unit (or “Each”). For continuous parts, it will be a mass, length, area or volume - a\nfloat value with an appropriate units.\n\n\n\nmass_per_unit_of_measure: UnittedValue | None = None\n\nThe mass of the part, after processing, relative to the unit that Quantity is given in. If MassPerUom is\nspecified and VolumePerUom is not, then specifying materials within this part is interpreted to be\npercentage by mass.\n\n\n\nvolume_per_unit_of_measure: UnittedValue | None = None\n\nThe volume of the part, after processing, relative to the unit that Quantity is given in. If VolumePerUom\nis specified and MassPerUom is not, then specifying materials within this part is interpreted to be\npercentage by volume.\n\n\n\nmi_part_reference: MIRecordReference | None = None\n\nA reference identifying a part stored in the MI Database.\n\n\n\npart_name: str | None = None\n\nDisplay name for the part.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ncomponents: List[Part]\n\nList of subcomponents for this part.\n\n\n\nspecifications: List[Specification]\n\nList of specifications applying to this part.\n\n\n\nmaterials: List[Material]\n\nList of constituent materials making up this part.\n\n\n\nsubstances: List[Substance]\n\nList of substances contained within this part.\n\n\n\nprocesses: List[Process]\n\nList of processes used in the manufacture of this part.\n\n\n\nrohs_exemptions: List[str]\n\nIf the part has a RoHS exemption, provide one or more justifications for the exemptions here. If the part is\nanalyzed as Non-Compliant then the RoHS indicator will return Compliant with Exemptions instead.\n\n\n\nend_of_life_fates: List[EndOfLifeFate]\n\nThe fate(s) of the part, at the end-of-life of the product.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Material(mi_material_reference, percentage=None, mass=None, recycle_content_percentage=None, processes=<factory>, end_of_life_fates=<factory>, identity=None, name=None, external_identity=None, internal_id=None)\n\nA Material within a part or semi-finished part. The material is stored in the Database.\n\n\n\n\n\nmi_material_reference: MIRecordReference\n\nReference identifying the material record within the MI Database.\n\n\n\npercentage: float | None = None\n\nThe fraction of the part consisting of this material. Provide either this or mass.\n\n\n\nmass: UnittedValue | None = None\n\nThe mass of this material present within the part. Provide either this or percentage.\n\n\n\nrecycle_content_percentage: float | None = None\n\nIf the recyclability is not typical for this material, or no typical value is available in the MI Database,\nthis value indicates which percentage of this material can be recycled.\n\n\n\nprocesses: List[Process]\n\nAny processes associated with the production and preparation of this material.\n\n\n\nend_of_life_fates: List[EndOfLifeFate]\n\nThe fates of this material once the product is disposed of.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Process(mi_process_reference, dimension_type, percentage=None, quantity=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA process that is applied to a subassembly, part, semi-finished part or material. The process is stored in the\nDatabase.\n\n\n\n\n\nmi_process_reference: MIRecordReference\n\nReference identifying a record in the MI Database containing information about this process.\n\n\n\ndimension_type: DimensionType\n\nObject defining the dimension affected by the process, for example area for coatings, or mass removed for\nmachining operations.\n\n\n\npercentage: float | None = None\n\nFraction of the object affected by the process, with basis specified by dimension_type. Only supported for\ndimension types Mass and MassRemoved.\n\n\n\nquantity: UnittedValue | None = None\n\nA quantification of the process according to its dimension type.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Substance(mi_substance_reference, percentage=None, category=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA substance within a part, semi-finished part, material or specification. The substance is stored in the\nDatabase.\n\n\n\n\n\nmi_substance_reference: MIRecordReference\n\nReference identifying the record representing the substance in the MI Database.\n\n\n\npercentage: float | None = None\n\nIf the parent object consists of more than one substance, this defines the percentage of this\nsubstance.\n\n\n\ncategory: Category | None = None\n\nRepresents whether the substance remains present in the material after production.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Specification(mi_specification_reference, quantity=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA specification for a surface treatment, part, process, or material. Refers to a record within the MI Database\nstoring the details of the specification and its impact.\n\n\n\n\n\nmi_specification_reference: MIRecordReference\n\nReference identifying the record representing this specification in the MI Database.\n\n\n\nquantity: UnittedValue | None = None\n\nA quantification of the specification, if applicable.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass TransportStage(name, mi_transport_reference, distance, internal_id=None)\n\nDefines the transportation applied to an object, in terms of the generic transportation type (stored in the\nDatabase) and the amount of that transport used in this instance.\n\n\n\n\n\nname: str\n\nName of this transportation stage, used only to identify the stage within the BoM.\n\n\n\nmi_transport_reference: MIRecordReference\n\nReference to a record in the MI Database representing the means of transportation for this stage.\n\n\n\ndistance: UnittedValue\n\nThe distance covered by this transportation stage.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass BoMDetails(notes=None, picture_url=None, product_name=None)\n\nExplanatory information about a BoM.\n\n\n\n\n\nnotes: str | None = None\n\nGeneral notes for the BoM object.\n\n\n\npicture_url: str | None = None\n\nThe URL of an image to include at the top of the report. This URL must be accessible from the reporting\nservices server.\n\n\n\nproduct_name: str | None = None\n\nThe product name.\n\n\n\nclass UsePhase(product_life_span, electricity_mix=None, static_mode=None, mobile_mode=None)\n\nProvides information about the sustainability of the product whilst in use, including electricity use, emissions\ndue to transport, emissions due to electricity consumption, and the expected life span of the product.\n\n\n\n\n\nproduct_life_span: ProductLifeSpan\n\nSpecifies the expected life span of the product.\n\n\n\nelectricity_mix: ElectricityMix | None = None\n\nSpecifies the proportion of electricity within the destination country that comes from fossil fuels.\n\n\n\nstatic_mode: StaticMode | None = None\n\nProvides information about the expected static use of the product.\n\n\n\nmobile_mode: MobileMode | None = None\n\nProvides information about the expected mobile use of the product.\n\n\n\nclass ProductLifeSpan(duration_years, number_of_functional_units=None, functional_unit_description=None, utility=None)\n\nSpecifies the average life span for the product represented by the BoM.\n\n\n\n\n\nduration_years: float\n\nThe product lifespan in years.\n\n\n\nnumber_of_functional_units: float | None = None\n\nThe number of functional units delivered in the lifespan of the product represented by the BoM.\n\n\n\nfunctional_unit_description: str | None = None\n\nA short (ideally one-word) description of a single functional unit.\n\n\n\nutility: UtilitySpecification | None = None\n\nIndicates how much use can be obtained from the product represented by the BoM, compared to an\nindustry-average example.\n\n\n\nclass UtilitySpecification(industry_average_duration_years=None, industry_average_number_of_functional_units=None, utility=None)\n\nSpecifies how much use can be obtained from the product represented by this BoM in comparison to a\nrepresentative industry average.\n\n\n\n\n\nindustry_average_duration_years: float | None = None\n\nThe average lifespan of all examples, throughout the industry, of the kind of product described herein.\n\n\n\nindustry_average_number_of_functional_units: float | None = None\n\nThe average number of functional units delivered, in their lifespan, by all examples, throughout the\nindustry, of the kind of product represented by this object.\n\n\n\nutility: float | None = None\n\nDirectly specifies the utility.\n\n\n\nclass StaticMode(mi_energy_conversion_reference, power_rating, days_used_per_year, hours_used_per_day)\n\nSpecifies the primary energy conversion that occurs during the product’s use.\n\n\n\n\n\nmi_energy_conversion_reference: MIRecordReference\n\nReference to a record in the MI database representing the primary energy conversion taking place when the\nproduct is in use.\n\n\n\npower_rating: UnittedValue\n\nThe power rating of the product whilst in use.\n\n\n\ndays_used_per_year: float\n\nThe number of days per year that the product will be used.\n\n\n\nhours_used_per_day: float\n\nThe number of hours per day of use that the product will be used.\n\n\n\nclass MobileMode(mi_transport_reference, days_used_per_year, distance_travelled_per_day)\n\nIf the product is transported as part of its use then this type contains details about the way in which it is\ntransported.\n\n\n\n\n\nmi_transport_reference: MIRecordReference\n\nReference to a record in the MI database representing the means of transport for this product during use.\n\n\n\ndays_used_per_year: float\n\nThe number of days in a year the product will be transported during use.\n\n\n\ndistance_travelled_per_day: UnittedValue\n\nThe distance the product will be transported each day as part of its use.\n\n\n\nclass ElectricityMix(mi_region_reference=None, percentage_fossil_fuels=None)\n\nIf the product consumes electrical power, then the amount of CO2 produced to generate depends upon the mix of\nfossil fuel burning power stations in the region of use.  This type lets you specify the electrical generation\nmix by either specifying the region or country of use or by specifying the percentage of power that comes from\nfossil fuel sources.\n\n\n\n\n\nmi_region_reference: MIRecordReference | None = None\n\nReference to a record in the MI database representing the electricity mix for the destination country.\n\n\n\npercentage_fossil_fuels: float | None = None\n\nThe percentage of electrical power production within the destination country that comes from fossil fuels.\n\n\n\nclass Location(mi_location_reference=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nDefines the manufacturing location for the BoM for use in process calculations.\n\n\n\n\n\nmi_location_reference: MIRecordReference | None = None\n\nReference to a record in the MI database representing the manufacturing location.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass UnittedValue(value, unit=None)\n\nA physical quantity with a unit. If provided in an input then the unit must exist within the MI database,\notherwise an error will be raised.\n\n\n\n\n\nvalue: float\n\nThe value of the quantity in specified units.\n\n\n\nunit: str | None = None\n\nIf provided, specifies the unit symbol applying to the quantity. If absent the quantity will be treated as\ndimensionless.\n\n\n\nclass EndOfLifeFate(mi_end_of_life_reference, fraction)\n\nThe fate of a material at the end-of-life of the product. For example if a material can be recycled, and what\nfraction of the total mass or volume can be recycled.\n\n\n\n\n\nmi_end_of_life_reference: MIRecordReference\n\nReference identifying the applicable fate within the MI Database.\n\n\n\nfraction: float\n\nFraction of the total mass or volume of material to which this fate applies.\n\n\n\nclass Category(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for Category.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\n\n\nclass DimensionType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for DimensionType.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/compliance/indicators.html#indicators","title":"Indicators","text":"Indicators\n\nThe PyGranta BoM Analytics API can be used to determine compliance against one or more indicators. An indicator\nessentially represents a legislation with a threshold. If a substance appears in a certain item, either directly or\nindirectly, in a quantity that exceeds that threshold, the item is non-compliant with that indicator. In cases where\nthe legislation defines a per-substance threshold (for example, RoHS), then this per-substance threshold is used\ninstead.\n\nIndicators can include a list of legislations, in which case a substance is impacted by the indicator if it is\nimpacted by one or more legislations included in that indicator.\n\nThere are two different types of indicator, and they compute compliance in slightly different ways. It is therefore\nimportant to understand the differences between them. For more information, see\nCompliance indicators in the Granta MI product documentation."},{"objectID":"Home","href":"api/compliance/indicators.html#rohs-indicator","title":"Indicators > RoHS indicator","text":"RoHS indicator\n\n\n\nclass RoHSIndicator(*, name, legislation_ids, default_threshold_percentage=None, ignore_exemptions=False)\n\nProvides the indicator object that represents RoHS-type compliance of a BoM object against one or more\nlegislations.\n\nOther RoHSIndicator objects with results can be compared, with ‘less compliant’ indicators being greater than\n‘more compliant’ indicators.\n\nParameters\n\nname\n\npython:str\n\nName of the indicator that is to identify the indicator in the query result.\n\nlegislation_ids\n\npython:list[python:str]\n\nLegislations against which compliance will be determined. Legislations are identified based\non their Legislation ID attribute value.\n\nAdded in version 2.0.\n\nThis argument replaces legislation_names, which has been removed in version 2.0.\n\nWhen updating scripts from version 1.x, replace the legislation_names argument with the\nlegislation_ids argument and ensure the value provided is a list of Legislation ID attribute values.\n\ndefault_threshold_percentage\n\npython:float, optional\n\nConcentration of substance that is to be determined to be non-compliant. The default is None.\nThis parameter is only used if the legislation doesn’t define a specific threshold for the substance.\n\nignore_exemptions\n\nbool, optional\n\nWhether to consider exemptions added to parts when determining compliance against this indicator.\nThe default is True.\n\nAttributes\n\navailable_flags\n\nType[RoHSFlag]\n\nProvides permitted RoHS flag states.\n\nRaises\n\nTypeError\n\nError to raise if two indicators of different types are compared.\n\nValueError\n\nError to raise if two indicators are compared and both don’t have a result flag.\n\nNotes\n\nThe RoHS indicator is designed to be used with RoHS-type legislations such as RoHS and RoHS China. However,\nusage is not enforced. Substances marked as Process Chemicals 1 are always ignored, and exceptions\nare supported (unless explicitly ignored by specifying ignore_exemptions=True when creating the indicator).\nThe possible result flags for the indicator distinguish between an item being compliant, compliant with\nexemptions, or non-compliant.\n\nExamples\n\n>>> indicator = RoHSIndicator(name='RoHS substances',\n...                           legislation_ids=[\"RoHS\"],\n...                           default_threshold_percentage=0.1,\n...                           ignore_exemptions=True)\n>>> indicator\n<RoHSIndicator, name: Tracked substances>\n\n>>> query = MaterialComplianceQuery.with_indicators([indicator])...\n>>> result: MaterialComplianceQueryResult  # Perform a compliance query\n>>> indicator_result = result.compliance_by_indicator['Tracked substances']\n>>> indicator_result\n<RoHSIndicator, name: Tracked substances, flag: RoHSFlag.RohsNonCompliant>\n\n>>> indicator_result <= indicator.available_flags['RohsCompliantWithExemptions']\nFalse  # The material is not compliant with the legislations in the Indicator\n\n\n\nclass RoHSFlag(value)\n\nProvides permitted RoHS flag states. Enum class.\n\nA larger value means that the item is less compliant. The further down the list the compliance\nresult appears, the worse it is.\n\nFor more information, see the\nRestricted Substances Reports User Guide.\n\n\n\nRohsNotImpacted = 1\n\nThis substance is not impacted by the specified legislations. Substance is not impacted.\n\n\n\nRohsBelowThreshold = 2\n\nThis substance is impacted by the specified legislations, but it appears in the parent item in a quantity below that\nspecified by the indicator. Substance is below threshold.\n\n\n\nRohsCompliant = 3\n\nThis item either does not contain any substances impacted by the specified legislations or contains no substances\nabove the specified threshold. Item is compliant.\n\n\n\nRohsCompliantWithExemptions = 4\n\nThis item contains substances impacted by the specified legislations, but an exemption has been declared either on\nitself or a child item. Item is compliant with exemptions.\n\n\n\nRohsAboveThreshold = 5\n\nThis substance is impacted by the specified legislations and is present in a quantity above that specified by the\nindicator. Exemption for use required.\n\n\n\nRohsNonCompliant = 6\n\nThis item contains one or more substances impacted by the specified legislations. Item is non-compliant.\n\n\n\nRohsUnknown = 7\n\nOne or more declarations are missing, so there is not enough information to determine compliance. Compliance is\nunknown."},{"objectID":"Home","href":"api/compliance/indicators.html#watch-list-indicator","title":"Indicators > Watch list indicator","text":"Watch list indicator\n\n\n\nclass WatchListIndicator(*, name, legislation_ids, default_threshold_percentage=None, ignore_process_chemicals=False)\n\nProvides the indicator object that represents watch list-type compliance of a BoM object against one or more\nlegislations.\n\nOther WatchListIndicator objects with results can be compared, with ‘less compliant’ indicator flags being\ngreater than ‘more compliant’ indicator flags.\n\nParameters\n\nname\n\npython:str\n\nName of the indicator that is used to identify the indicator in the query result.\n\nlegislation_ids\n\npython:list[python:str]\n\nLegislations against which compliance will be determined. Legislations are identified based\non their Legislation ID attribute value.\n\nAdded in version 2.0.\n\nThis argument replaces legislation_names, which has been removed in version 2.0.\n\nWhen updating scripts from version 1.x, replace the legislation_names argument with the\nlegislation_ids argument and ensure the value provided is a list of Legislation ID attribute values.\n\ndefault_threshold_percentage\n\npython:float, optional\n\nPercentage of substance concentration that is to be determined to be non-compliant. The default is None.\nThis parameter is only used if the legislation doesn’t define a specific threshold for the substance.\n\nignore_process_chemicals\n\nbool, optional\n\nWhether to ignore substances flagged as process chemicals when determining compliance against this indicator.\nThe default is False.\n\nAttributes\n\navailable_flags\n\nType[WatchListFlag]\n\nProvides permitted watch list flag states.\n\nRaises\n\nTypeError\n\nError to raise if two indicators of different types are compared.\n\nValueError\n\nError to raise if two indicators are compared and both don’t have a result flag.\n\nNotes\n\nThe watch list indicator is designed to be used with REACH legislations or internal watch lists. However,\nusage is not enforced. Substances marked as Process Chemicals 1 are usually included, but they can be\nignored by specifying ignore_process_chemicals=True when creating the indicator. Exemptions are always\nignored. The possible result flags for the indicator distinguish between an item being compliant, compliant\nbut with substances below the threshold, or non-compliant.\n\nExamples\n\n>>> indicator = RoHSIndicator(name='Tracked substances',\n...                           legislation_ids=[\"SINList\"],\n...                           default_threshold_percentage=0.1,\n...                           ignore_process_chemicals=True)\n>>> indicator\n<WatchListIndicator, name: Tracked substances>\n\n>>> query = MaterialComplianceQuery.with_indicators([indicator])...\n>>> result: MaterialComplianceQueryResult  # Perform a compliance query\n>>> indicator_result = result.compliance_by_indicator['Tracked substances']\n>>> indicator_result\n<WatchListIndicator, name: Tracked substances,\nflag: WatchListFlag.WatchListHasSubstanceAboveThreshold>\n\n>>> indicator_result <= indicator.available_flags['WatchListAllSubstancesBelowThreshold']\nFalse  # The material is not compliant with the legislations in the indicator\n\n\n\nclass WatchListFlag(value)\n\nProvides permitted watch list flag states. Enum class.\n\nAn increasing value means less compliance. The further down the list the compliance result\nappears, the worse it is.\n\nFor more information, see the\nRestricted Substances Reports User Guide.\n\n\n\nWatchListNotImpacted = 1\n\nThis substance is not impacted by the specified legislations. Substance is not impacted.\n\n\n\nWatchListCompliant = 2\n\nThis item does not contain any substances impacted by the specified legislations. Item is compliant.\n\n\n\nWatchListBelowThreshold = 3\n\nThis substance is impacted by the specified legislations, but appears in the parent item in a quantity below that\nspecified by the indicator. Substance is below threshold.\n\n\n\nWatchListAllSubstancesBelowThreshold = 4\n\nThis item contains no substances above the specified threshold. Item is compliant.\n\n\n\nWatchListAboveThreshold = 5\n\nThis substance is impacted by the specified legislations and appears in the parent item in a quantity above that\nspecified by the indicator. Substance is impacted.\n\n\n\nWatchListHasSubstanceAboveThreshold = 6\n\nThis item contains one or more substances impacted by the specified legislations. Item is non-compliant.\n\n\n\nWatchListUnknown = 7\n\nThere is not enough information to determine compliance. Compliance is unknown.\n\n1\n\nA substance is determined to be a process chemical if either the substance category is set as ‘Used in\nproduction’ or ‘May be used in production’ in the tabular row where it is referenced, or if the substance is included\nin a material and the material type is set as ‘Process’ in the tabular row that links the material to a\nspecification.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/5_Sustainability_summary/index.html#sustainability-summary-examples","title":"Sustainability summary examples","text":"Sustainability summary examples\n\nThe examples in this section demonstrate different aspects of the BomSustainabilitySummaryQueryResult object:\n\n5-1_Summary_and_messages\n\nmessages\n\nphases_summary\n\n5-2_Transports\n\ntransport_details\n\ndistribution_transport_summary\n\nmanufacturing_transport_summary\n\ntransport_details_aggregated_by_part\n\n5-3_Materials\n\nmaterial_details\n\n5-4_Processes\n\nprimary_processes_details\n\nsecondary_processes_details\n\njoining_and_finishing_processes_details\n\n5-5_Hierarchical_plots\n\nSummarizes all the processed data into plots showing the result hierarchy.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/compliance/bom.html#bom-compliance","title":"BoM compliance","text":"BoM compliance\n\nFor more information about BoM item types relevant for compliance analysis, see\nItem types for Restricted Substances in the\nGranta MI product documentation.\n\nFor some important restrictions on BoM-based queries, see\nref_grantami_bomanalytics_bom_query_restrictions."},{"objectID":"Home","href":"api/compliance/bom.html#query-definition","title":"BoM compliance > Query definition","text":"Query definition\n\n\n\nclass BomComplianceQuery\n\nEvaluates compliance for a BoM against a number of indicators.\n\nThe BoM must be in the Ansys Granta 1711 XML BoM format or Ansys Granta 2301 XML BoM format.\n\nAll BoM-based queries only operate on a single BoM. As a result, the .with_batch_size() method is not\nimplemented for BoM-based queries.\n\nThe methods used to add the BoM and Indicators to this query return the query itself so that they can be\nchained together as required.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nPartComplianceQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> bom = \"<PartsEco xmlns...\"\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> query = (\n...     BomComplianceQuery()\n...     .with_bom(bom)\n...     .with_indicators([indicator])\n... )\n>>> cxn.run(query)\n<BomComplianceQueryResult: 1 PartWithCompliance results>\n\n\n\n\n\nwith_bom(bom)\n\nSet the BoM to use for the query.\n\nSee the documentation for the parent query class for supported BoM formats.\n\nMinimal validation is performed on the provided BoM to ensure it defines a supported XML schema. XSD files are\nprovided in schemas for full validation.\n\nParameters\n\nbom\n\npython:str\n\nBoM to use for the query.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError raised if the method is called with values that do not match the types described earlier.\n\nValueError\n\nError raised if the bom isn’t valid XML, or isn’t in a known supported BoM format.\n\nNotes\n\nSee the ansys.grantami.bomanalytics.schemas subpackage for Ansys Granta XML BoM Schema Definitions.\n\n\n\nwith_indicators(indicators)\n\nAdd a list or set of WatchListIndicator or\nRoHSIndicator objects to evaluate compliance against.\n\nParameters\n\nindicators\n\npython:list[WatchListIndicator | RoHSIndicator]\n\nList of indicators.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described above.\n\nExamples\n\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> MaterialComplianceQuery().with_indicators([indicator])\n<MaterialCompliance: 0 materials, batch size = 100, 1 indicators>"},{"objectID":"Home","href":"api/compliance/bom.html#query-result","title":"BoM compliance > Query result","text":"Query result\n\n\n\nclass BomComplianceQueryResult(results, indicator_definitions, messages)\n\nRetrieves the result of running the BomComplianceQuery\nclass.\n\nThis class summarizes the compliance status of a BoM against one or more indicators.\n\n\n\n\n\ncompliance_by_indicator\n\nCompliance status for each indicator in the original query. The indicator name\nis used as the dictionary key.\n\nThe result for each indicator is determined by taking the worst result for that indicator across all items\nincluded in the query.\n\nReturns\n\npython:dict[python:str, WatchListIndicator | RoHSIndicator]\n\n\n\nExamples\n\n>>> compliance_result: MaterialComplianceQueryResult\n>>> compliance_result.compliance_by_indicator\n{'Prop 65': <WatchListIndicator,\n        name: Prop 65,\n        flag: WatchListFlag.WatchListAboveThreshold>\n}\n\n\n\ncompliance_by_part_and_indicator\n\nCompliance status for each root part included in the BoM specified in the original\nquery.\n\nReturns\n\npython:list[PartWithComplianceResult]\n\n\n\nExamples\n\n>>> result: BomComplianceQueryResult\n>>> result.compliance_by_part_and_indicator\n[<PartWithComplianceResult, 1 indicators>]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/compliance/specifications.html#specification-compliance","title":"Specification compliance","text":"Specification compliance"},{"objectID":"Home","href":"api/compliance/specifications.html#query-definition","title":"Specification compliance > Query definition","text":"Query definition\n\n\n\nclass SpecificationComplianceQuery\n\nEvaluates compliance for Granta MI specification records against a number of indicators.\n\nIf the specifications are associated with specifications, materials, coatings, or substances, these are\nalso evaluated and returned.\n\nAll methods used to add specifications and indicators to this query return the query itself so that\nthey can be chained together as required. Records can be added using a combination of any of the\navailable methods.\n\nOnce the query is fully constructed, use the cxn.\nrun() method to return a result of type\nSpecificationComplianceQueryResult.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> query = (\n...     SpecificationComplianceQuery()\n...     .with_specification_ids(['MIL-A-8625', 'PSP101'])\n...     .with_indicators([indicator])\n... )\n>>> cxn.run(query)\n<SpecificationComplianceQueryResult: 2 SpecificationWithCompliance results>\n\n\n\n\n\nwith_indicators(indicators)\n\nAdd a list or set of WatchListIndicator or\nRoHSIndicator objects to evaluate compliance against.\n\nParameters\n\nindicators\n\npython:list[WatchListIndicator | RoHSIndicator]\n\nList of indicators.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described above.\n\nExamples\n\n>>> indicator = WatchListIndicator(\n...     name=\"Prop 65\",\n...     legislation_ids=[\"Prop65\"]\n... )\n>>> MaterialComplianceQuery().with_indicators([indicator])\n<MaterialCompliance: 0 materials, batch size = 100, 1 indicators>\n\n\n\nwith_specification_ids(specification_ids, external_database_key=None)\n\nAdd a list or set of specifications to a specification query, referenced by specification ID.\n\nIf the records referenced by values in the specification_ids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nspecification_ids\n\npython:list[python:str] | set[python:str]\n\nList or set of specification IDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the specification_ids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = SpecificationComplianceQuery()\n>>> query.with_specification_ids(['MIL-A-8625', 'PSP101'])\n<SpecificationComplianceQuery: 2 specifications, batch size = 10, 0 indicators>\n\n\n\nwith_record_guids(record_guids, external_database_key=None)\n\nAdd a list or set of record GUIDs to a query.\n\nIf the records referenced by values in the record_guids argument are stored in an external database, you\nmust provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query = query.with_record_guids(['bdb0b880-e6ee-4f1a-bebd-af76959ae3c8',\n>>>                                  'a98cf4b3-f96a-4714-9f79-afe443982c69'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_guids(record_history_guids, external_database_key=None)\n\nAdd a list or set of record history GUIDs to a query.\n\nIf the records referenced by values in the record_history_guids argument are stored in an external database,\nyou must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_guids\n\npython:list[python:str] | set[python:str]\n\nList or set of record history GUIDs.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_guids argument are stored in an external database.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described earlier.\n\nExamples\n\n>>> query = MaterialComplianceQuery()\n>>> query.with_record_history_guids(['41e20a88-d496-4735-a177-6266fac9b4e2',\n>>>                                  'd117d9ad-e6a9-4ba9-8ad8-9a20b6d0b5e2'])\n<MaterialCompliance: 2 materials, batch size = 100, 0 indicators>\n\n\n\nwith_record_history_ids(record_history_identities, external_database_key=None)\n\nAdd a list or set of record history identities to a query.\n\nIf the records referenced by values in the record_history_identities argument are stored in an external\ndatabase, you must provide the external database key using the external_database_key argument. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\nrecord_history_identities\n\npython:list[python:int] | set[python:int]\n\nList or set of record history identities.\n\nexternal_database_key\n\npython:str, optional\n\nRequired if records referenced by the record_history_identities argument are stored in an external\ndatabase.\n\nAdded in version 2.4.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nTypeError\n\nError to raise if the method is called with values that do not match the types described\nearlier.\n\nExamples\n\n>>> MaterialComplianceQuery().with_record_history_ids([15321, 17542, 942])\n<MaterialCompliance: 3 materials, batch size = 50, 0 indicators>\n\n\n\nwith_batch_size(batch_size)\n\nSet the number of records to include in a single request for this query.\n\nDefault values are set based on typical usage of the Restricted Substances database. This value can be changed\nto optimize performance on a query-by-query basis if required. For example, you can change it if certain\nrecords contain particularly large or small numbers of associated records.\n\nParameters\n\nbatch_size\n\npython:int\n\nNumber of records to include in a single request to Granta MI.\n\nReturns\n\nQuery\n\nCurrent query object.\n\nRaises\n\nValueError\n\nError to raise if the batch size is set to a number less than 1.\n\nTypeError\n\nError to raise if a value of any type other than int is specified.\n\nNotes\n\nThe Restricted Substances database makes extensive use of tabular data and associated records to store the\ncomplex hierarchical relationships that define compliance of products, assemblies, parts, specifications,\nand materials. As a result, it is impossible to determine the complexity of a particular query without knowing\nprecisely how many records are related to the record included in the query.\n\nThe default batch sizes are set for each record type and represent appropriate numbers of those records to be\nincluded in the same request assuming typical numbers of associated records.\n\nEven if the records are queried in multiple batches, the results are assembled into a single result object.\n\nExamples\n\n>>> MaterialComplianceQuery().with_batch_size(50)\n<MaterialCompliance: 0 materials, batch size = 50, 0 indicators>"},{"objectID":"Home","href":"api/compliance/specifications.html#query-result","title":"Specification compliance > Query result","text":"Query result\n\n\n\nclass SpecificationComplianceQueryResult(results, indicator_definitions, messages)\n\nRetrieves the result of running the SpecificationComplianceQuery\nclass.\n\nThis class describes the compliance status of specifications against one or more indicators.\n\n\n\n\n\ncompliance_by_indicator\n\nCompliance status for each indicator in the original query. The indicator name\nis used as the dictionary key.\n\nThe result for each indicator is determined by taking the worst result for that indicator across all items\nincluded in the query.\n\nReturns\n\npython:dict[python:str, WatchListIndicator | RoHSIndicator]\n\n\n\nExamples\n\n>>> compliance_result: MaterialComplianceQueryResult\n>>> compliance_result.compliance_by_indicator\n{'Prop 65': <WatchListIndicator,\n        name: Prop 65,\n        flag: WatchListFlag.WatchListAboveThreshold>\n}\n\n\n\ncompliance_by_specification_and_indicator\n\nCompliance status for each specification specified in the original query.\n\nReturns\n\npython:list[SpecificationWithComplianceResult]\n\n\n\nExamples\n\n>>> result: SpecificationComplianceQueryResult\n>>> result.compliance_by_specification_and_indicator\n[<SpecificationWithComplianceResult({SpecificationId: MIL-A-8625}),\n        1 indicators>, ...]\n\n\n\nmessages\n\nMessages generated by Granta MI when running the query. The presence of one or more messages means\nthat something unexpected happened when running the query but that the query could still be completed.\n\nMessages are sorted in order of decreasing severity and are available in the Service Layer log file.\n\nMessages are also logged using the Python logging module to the ansys.grantami.bomanalytics logger. By\ndefault, messages with a severity of \"warning\" or higher are printed on stderr."},{"objectID":"Home","href":"api/compliance/specifications.html#specification-result","title":"Specification compliance > Specification result","text":"Specification result\n\n\n\nclass SpecificationWithComplianceResult(**kwargs)\n\nRetrieves an individual specification included as part of a compliance query result.\nThis object includes three categories of attributes:\n\nThe reference to the specification in Granta MI\n\nThe compliance status of this specification, stored in a dictionary of one or more indicator objects\n\nAny specification, material, coating, or substance objects which are a child of this specification object\n\nNotes\n\nObjects of this class are only returned as the result of a query. The class is not intended to be instantiated\ndirectly.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty specification_id: str | None\n\nSpecification ID.\n\n\n\nproperty equivalent_references: list[SpecificationReference] | None\n\nOther specification records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty indicators: Dict[str, WatchListIndicator | RoHSIndicator]\n\nCompliance status of this item for each indicator included in the original query.\n\n\n\nproperty specifications: List[SpecificationWithComplianceResult]\n\nSpecification compliance result objects that are direct children of this item in the BoM.\n\n\n\nproperty materials: List[MaterialWithComplianceResult]\n\nMaterial compliance result objects that are direct children of this part or specification in the BoM.\n\n\n\nproperty coatings: List[CoatingWithComplianceResult]\n\nCoating result objects that are direct children of this specification in the BoM.\n\n\n\nproperty substances: List[SubstanceWithComplianceResult]\n\nSubstance compliance result objects that are direct children of this item in the BoM."},{"objectID":"Home","href":"api/compliance/specifications.html#coating-result","title":"Specification compliance > Coating result","text":"Coating result\n\n\n\nclass CoatingWithComplianceResult(**kwargs)\n\nProvides an individual coating included as part of a compliance query result.\n\nThis object includes three categories of attributes:\n\nThe reference to the coating in Granta MI\n\nThe compliance status of this coating, stored in one or more indicator objects\n\nAny substance objects which are a child of this coating object\n\n\n\n\n\nproperty record_history_identity: int | None\n\nDefault reference type for compliance items returned as children of the queried item.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty equivalent_references: list[CoatingReference] | None\n\nOther coating records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty indicators: Dict[str, WatchListIndicator | RoHSIndicator]\n\nCompliance status of this item for each indicator included in the original query.\n\n\n\nproperty substances: List[SubstanceWithComplianceResult]\n\nSubstance compliance result objects that are direct children of this item in the BoM.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/4_Sustainability/index.html#sustainability-examples","title":"Sustainability examples","text":"Sustainability examples\n\nThe example shows how to determine the environmental impact for a BoM using the\nref_grantami_bomanalytics_api_sustainability_index.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-6_Writing_compliance_results_to_a_dataframe.html#write-compliance-results-to-a-pandasdataframe-object","title":"Write compliance results to a pandas.DataFrame object","text":"Write compliance results to a pandas.DataFrame object\n\nGranta MI BoM Analytics presents compliance results in a hierarchical data structure. Alternatively, you can represent the data in a tabular data structure, where each row contains a reference to the parent row. This example shows how compliance data can be translated from one format to another, making use of a pandas.DataFrame object to store the tabulated data."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-6_Writing_compliance_results_to_a_dataframe.html#perform-a-compliance-query","title":"Write compliance results to a pandas.DataFrame object > Perform a compliance query","text":"Perform a compliance query\n\nThe first step is to perform a compliance query on an assembly that results in a deeply nested structure. The following code is presented without explanation. For more information, see the Perform a Part Compliance Query example.\n\n\n\n\n\nThe part_result object contains the compliance result for every subitem. This is ideal for understanding compliance at a certain level of the structure, For example, you can display the compliance for each item directly under the root part.\n\n\n\n\n\n\n\n\n\nHowever, this structure makes it difficult to compare items at different levels. To do this, you want to flatten the data into a tabular structure."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-6_Writing_compliance_results_to_a_dataframe.html#flatten-the-hierarchical-data-structure","title":"Write compliance results to a pandas.DataFrame object > Flatten the hierarchical data structure","text":"Flatten the hierarchical data structure\n\nYou want to flatten the data into a list of dict objects, where each dict object represents an item in the hierarchy and each value in the dict object represents a property of this item. You can then use this structure directly or use it to construct a pandas.DataFrame object.\n\nFirst, define a helper function to transform a ComplianceQueryResult object into a dict object. In addition to storing properties that are intrinsic to the item (such as the ID, type, and SVHC result), you want to store structural information, such as the level of the item and the ID of its parent.\n\n\n\n\n\nTo help with the flattening process, you also define a schema, which describes which child item types each item type can contain.\n\n\n\n\n\nThe function itself performs the flattening using a stack-based approach, where the children of the item currently being processed are iteratively added to the items_to_process stack. Because this stack is being both modified and iterated over, you must use a while loop and .pop() statement instead of a for loop.\n\nThe stack uses a special type of collection called a deque, which is similar to a list but is optimized for these sorts of stack-type use cases involving repeated calls to .pop() and .extend() statements.\n\n\n\n\n\nFinally, call the preceding function against the results from the compliance query and use the list to create a pandas.DataFrame object.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-6_Writing_compliance_results_to_a_dataframe.html#postprocess-the-pandasdataframe-object","title":"Write compliance results to a pandas.DataFrame object > Postprocess the pandas.DataFrame object","text":"Postprocess the pandas.DataFrame object\n\nNow that you have the data in a pandas.DataFrame object, performing operations across all levels of the structure is easier. For example, you can delete all rows that are less than the WatchListAboveThreshold state, retaining only rows that are non-compliant. (Note that this reduces the number of rows significantly.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/impacted_substances/impacted_substances.html#impacted-substances","title":"Impacted substances","text":"Impacted substances\n\n\n\nclass ImpactedSubstance(reference_type, reference_value, max_percentage_amount_in_material, legislation_threshold)\n\nRepresents a substance impacted by a legislation.\n\nThis object includes two categories of attributes:\n\nThe reference to the substance in Granta MI. These attributes are all populated if data for them exists in\nGranta MI.\n\nThe amount of the substance in the parent item and the threshold above which it is impacted.\n\nExamples\n\n>>> result: MaterialImpactedSubstancesQueryResult\n>>> substance = result.impacted_substances[4]\n>>> print(f\"{substance.cas_number}: {substance.max_percentage_amount_in_material}\")\n1333-86-4: 20.0 %\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty cas_number: str | None\n\nCAS number.\n\n\n\nproperty ec_number: str | None\n\nEC number.\n\n\n\nproperty chemical_name: str | None\n\nChemical name.\n\n\n\nproperty equivalent_references: list[SubstanceReference] | None\n\nOther substance records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nproperty max_percentage_amount_in_material: float | None\n\nMaximum percentage of this substance that occurs in the parent material. In the case where a range is\nspecified in the declaration, only the maximum is reported here. None means that the percentage amount\nhas not been specified, not that the amount is 0 %.\n\n\n\nproperty legislation_threshold: float | None\n\nSubstance concentration threshold over which the material is non-compliant with the legislation. None\nmeans that the threshold has not been specified, not that the threshold is 0 %.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#create-an-xml-bom-from-a-csv-data-source","title":"Create an XML BoM from a CSV data source","text":"Create an XML BoM from a CSV data source\n\nThis example shows how to use the bom_types subpackage to create a Granta MI BoM. This subpackage can be used to help construct a Granta 24/12-compliant XML BoM file to use with the BoM queries provided by this package. The code in this example shows how to generate a BoM from a representative CSV data source. The general approach can be applied to data in other formats or provided by other APIs.\n\nYou can download the CSV file used in this example.\n\nThe result of this example is a Granta 24/12-compliant XML BoM file that is suitable for compliance or sustainability analysis with the Granta MI BoM Analytics API. For more information on the expected content of XML BoMs, see the Granta MI documentation."},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#load-the-external-data","title":"Create an XML BoM from a CSV data source > Load the external data","text":"Load the external data\n\nFirst load the CSV file and use pandas to load the content in a dataframe.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#inspect-the-external-data","title":"Create an XML BoM from a CSV data source > Inspect the external data","text":"Inspect the external data\n\nThe CSV file describes the bill of materials for the door assembly introduced in the Creating an XML BoM example. The door (24X6-30) contains two hinges (HA-42-Al) and a handle (H-S-BR-Dual), both fixed to the panel (P-30-L) with machine screws (DIN-7991-M8-20) and washers (N0403.12N.2). The door glass (321-51) is coated with a partially reflective polymer film (7000001298).\n\nThe hierarchy of items within the BoM is defined by the order of items in the CSV and the BoM Level column. If an item has the BoM level n, then the item’s parent is the first level preceding it in the CSV with a BoM level n-1.\n\nEach item includes an Item Type column that identifies the type of the item, in this example the only values are Part or Material. Additional columns are specific to the type of item."},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#part-items","title":"Create an XML BoM from a CSV data source > Part items","text":"Part items\n\nItems that refer to parts only exist in the BoM and do not reference records in Granta MI. Their Name and ID are defined only in the BoM to identify parts.\n\nThe Quantity and Unit of measure columns describe the quantity of part expected in the parent. This can be done by specifying how many occurrences of a part are in an assembly, or for example for the glass door, the surface area of laminated glass.\n\nThere are three types of components in this example BoM:\n\nThe product described by the BoM, whose BoM Level is 1.\n\nAssemblies which are made of sub-parts.\n\nTheir mass isn’t defined in the BoM because it can be computed by rolling up the mass of the sub-parts.\n\nParts which are defined by their mass and the material they are made of.\n\nTheir mass is defined via the Measured mass (per UoM) and Measured mass unit. The units for the mass must be consistent with the unit used to define the quantity of the part, so that when the quantity is multiplied with the mass per UoM, it resolves to a mass. For example, the quantity of glass panel included in the door is defined as a surface area 1.51 m^2, which requires the mass per unit of measure to be defined as a mass per surface area 19.6 kg/m^2.\n\nFor more information on the different options available for specifying part quantities and part masses, see the Granta MI documentation."},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#material-items","title":"Create an XML BoM from a CSV data source > Material items","text":"Material items\n\nItems that refer to materials correspond to records in Granta MI that contain the relevant compliance or sustainability information for these items. As a result, these items include both a human-readable Name column and an ID column. In this scenario, the system that provided the data source contains the Granta MI material assignments for each part based on the Material ID attribute, which is included in the ID column.\n\nMaterials are described in terms of percentage of the parent part made of the material."},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#build-the-billsofmaterials-object","title":"Create an XML BoM from a CSV data source > Build the BillsOfMaterials object","text":"Build the BillsOfMaterials object\n\nImport the eco2412 sub-package and helper classes to build record and attribute references.\n\n\n\n\n\nDefine a function that accepts a part row as input and returns a eco2412.Part object.\n\n\n\n\n\nDefine a function that accepts a material row as input and returns a eco2412.Material object. Materials are identified by their attribute value Material ID, so the record reference is defined using a lookup value.\n\n\n\n\n\nIterate over the rows in the CSV file and convert to bom_types objects. Because items only ever appear after their parent, a list is used to keep track of possible parent items in the BoM.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-3_Creating_an_XML_BoM_from_CSV.html#serialize-the-bom","title":"Create an XML BoM from a CSV data source > Serialize the BoM","text":"Serialize the BoM\n\nUse the BomHandler helper class to serialize the object to XML. The resulting string can be used in a BoM query.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/sustainability/index.html#sustainability-api","title":"Sustainability API","text":"Sustainability API\n\nThe ref_grantami_bomanalytics_api_sustainability_bom and\nref_grantami_bomanalytics_api_sustainability_summary_bom queries can be used to determine the\nenvironmental performance of a BoM (bill of materials) in Ansys Granta MI 23/01 or 24/12 XML BoM format.\n\nThe BoM analysis only considers items explicitly defined in the input BoM. It does not follow links\nto other BoM items as in the record-based queries available for Impacted Substances and Compliance\nanalysis.\n\nFor more information about BoM item types relevant for sustainability analysis, see\nItem types for Sustainability in the Granta\nMI product documentation.\n\nThe API documented in this section is only available if you have the MI Restricted\nSubstances feature included in your license. A\nLicensingException will be raised if the feature is not\navailable.\n\nAdded in version 2.0.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nIntroduction \n\nAn overview of the scope of the package.\n\nintroduction\n\nQuick code \n\nA minimal example that shows how to perform a basic request using the package.\n\nquick_code\n\nDifferences between Record and BoM queries \n\nAn overview of some of the differences between record-based queries and BoM-based queries.\n\nquery_types\n\nBatching requests \n\nAn overview of how to optimize performance by controlling request batching.\n\nbatching\n\nUsing external records in analysis \n\nHow to use records in external databases in a Restricted Substances and Sustainability\nanalysis.\n\nexternal_records\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"index.html#pygranta-bom-analytics-240dev0","title":"PyGranta BoM Analytics 2.4.0.dev0","text":"PyGranta BoM Analytics 2.4.0.dev0\n\nPyGranta BoM Analytics, a component of the PyGranta software suite, provides a\nPython interface to the Granta BoM Analytics Services API.\n\nGetting started \n\nLearn how to install PyGranta BoM Analytics in user mode and quickly\nbegin using it.\n\ngetting_started/index\n\nUser guide \n\nUnderstand key concepts for using PyGranta BoM Analytics.\n\nuser_guide/index\n\nAPI reference \n\nUnderstand how to use Python to interact programmatically with\nPyGranta BoM Analytics.\n\napi/index\n\nExamples \n\nExplore examples that show how to use PyGranta BoM Analytics to\nperform many different types of operations.\n\nexamples/index\n\nContribute \n\nLearn how to contribute to the PyGranta BoM Analytics codebase or documentation.\n\ncontributing\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-2_Material_compliance.html#perform-a-material-compliance-query","title":"Perform a material compliance query","text":"Perform a material compliance query\n\nA material compliance query determines whether one or more materials are compliant with the specified indicators. This is done by first determining compliance for the substances associated with the material and then rolling up the results to the material."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-2_Material_compliance.html#connect-to-granta-mi","title":"Perform a material compliance query > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Basic Usage example.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-2_Material_compliance.html#define-an-indicator","title":"Perform a material compliance query > Define an indicator","text":"Define an indicator\n\nA Compliance query determines compliance against indicators, as opposed to an Impacted Substances query which determines compliance directly against legislations.\n\nThere are two types of indicator objects (WatchListIndicator and RohsIndicator), and the following syntax applies to both object types. The differences in the internal implementation of the two objects are described in the API documentation.\n\nGenerally speaking, if a substance is impacted by a legislation associated with an indicator and in a quantity above a specified threshold, the substance is non-compliant with that indicator. This non-compliance applies to any other items in the BoM hierarchy that directly or indirectly include that substance.\n\nFirst, create two WatchListIndicator objects.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-2_Material_compliance.html#build-and-run-the-query","title":"Perform a material compliance query > Build and run the query","text":"Build and run the query\n\nNext define the query itself. Materials can be referenced by Granta MI record reference or Material ID. The table containing the Material records is not required because this is enforced by the Restricted Substances database schema.\n\n\n\n\n\nFinally, run the query. Passing a MaterialComplianceQuery object to the Connection.run() method returns a MaterialComplianceQueryResult object.\n\n\n\n\n\n\n\n\n\nThe result object contains two properties: compliance_by_material_and_indicator and compliance_by_indicator."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-2_Material_compliance.html#group-results-by-material","title":"Perform a material compliance query > Group results by material","text":"Group results by material\n\nThe compliance_by_material_and_indicator property contains a list of MaterialWithComplianceResult objects with the reference to the material record and the compliance status for each indicator. The SubstanceWithComplianceResult objects are also included because compliance was determined based on the substances associated with the material object. These are also accompanied by their compliance status for each indicator.\n\nInitially, you can print only the results for the reinforced PA66 record.\n\n\n\n\n\n\n\n\n\nThe reinforced PA66 record has a status of WatchListHasSubstanceAboveThreshold, which tells you that the material is not compliant with the indicator and therefore contains SVHCs above the 0.1% threshold.\n\nTo understand which substances have caused this status, you can print the substances that are not compliant with the legislation and the percentage amount of that substance in the parent material. The possible states of the indicator are available on the Indicator.available_flags attribute and can be compared using standard Python operators.\n\nFor substances, the critical threshold is the WatchListAboveThreshold state.\n\n\n\n\n\n\n\n\n\nSubstances with an unknown amount are always treated as if they have a 100% concentration. Note that children of items passed into the compliance query are returned with record references based on record history identities only. The Granta MI Scripting Toolkit for Python can be used to translate record history identities into CAS numbers if required.\n\nNext, look at the state of the zinc alloy record.\n\n\n\n\n\n\n\n\n\nThe zinc alloy record has the status WatchListAllSubstancesBelowThreshold, which means that there are substances present that are impacted by the legislation but are below the 0.1% threshold.\n\nYou can print these substances using the WatchListBelowThreshold flag as the threshold.\n\n\n\n\n\n\n\n\n\nFinally, look at the stainless steel record.\n\n\n\n\n\n\n\n\n\nThe stainless steel record has the status WatchListCompliant, which means there are no impacted substances in the material.\n\nYou can print these substances using the WatchListNotImpacted flag as the threshold.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-2_Material_compliance.html#group-results-by-indicator","title":"Perform a material compliance query > Group results by indicator","text":"Group results by indicator\n\nAlternatively, using the compliance_by_indicator property provides a single indicator result that summarizes the results across all materials in the query. This would be useful in a situation where you have a concept assembly stored outside of Granta MI and want to determine its compliance. You know it contains the materials specified in the preceding query, and so using the compliance_by_indicator property tells you if that concept assembly is compliant based on the worst result from\nindividual materials.\n\n\n\n\n\n\n\n\n\nNote that this cannot tell you which material is responsible for the non-compliance. This would require either performing a more granular analysis as shown earlier or importing the assembly into Granta MI and running the compliance on that part record."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-3_Part_compliance.html#perform-a-part-compliance-query","title":"Perform a part compliance query","text":"Perform a part compliance query\n\nA part compliance query determines whether one or more parts are compliant with the specified indicators. This is done by first finding all substances directly or indirectly associated with that part, determining compliance for those substances, and then rolling up the results to the material."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-3_Part_compliance.html#connect-to-granta-mi","title":"Perform a part compliance query > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Basic Usage example.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-3_Part_compliance.html#define-an-indicator","title":"Perform a part compliance query > Define an indicator","text":"Define an indicator\n\nA Compliance query determines compliance against indicators, as opposed to an Impacted Substances query which determines compliance directly against legislations.\n\nThere are two types of indicator objects (WatchListIndicator and RohsIndicator), and the following syntax applies to both object types. The differences in the internal implementation of the two objects are described in the API documentation.\n\nGenerally speaking, if a substance is impacted by a legislation associated with an indicator and in a quantity above a specified threshold, the substance is non-compliant with that indicator. This non-compliance applies to any other items in the BoM hierarchy that directly or indirectly include that substance.\n\nFirst, create two WatchListIndicator objects.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-3_Part_compliance.html#build-and-run-the-query","title":"Perform a part compliance query > Build and run the query","text":"Build and run the query\n\nNext define the query itself. Parts can be referenced by Granta MI record reference or part number. The table containing the part records is not required because this is enforced by the Restricted Substances database schema.\n\n\n\n\n\nFinally, run the query. Passing a PartComplianceQuery object to the Connection.run() method returns a PartComplianceQueryResult object.\n\n\n\n\n\n\n\n\n\nThe result object contains two properties, compliance_by_part_and_indicator and compliance_by_indicator."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-3_Part_compliance.html#group-results-by-part","title":"Perform a part compliance query > Group results by part","text":"Group results by part\n\ncompliance_by_part_and_indicator contains a list of PartWithComplianceResult objects with the reference to the part record and the compliance status for each indicator.\n\nIn Granta MI, parts can link to the following record types:\n\nParts\n\nSpecifications (which can link to specifications, materials, substances, and coatings)\n\nMaterials (which can link to substances)\n\nSubstances\n\nBecause compliance of a part is determined based on the compliance of the items that the record is linked to, the corresponding ResultWithCompliance objects are included in the parent PartWithComplianceResult, each with their own compliance status.\n\nBecause you specified two part records, you received two result objects. This example only looks in more detail at results for the wing flap assembly.\n\n\n\n\n\n\n\n\n\nThis tells you that the wing flap assembly contains an SVHC above the 0.1% threshold.\n\nYou can print the parts below this part that also contain an SVHC above the threshold. The parts referenced by the wing part are available in the parts property.\n\n\n\n\n\n\n\n\n\nThis process can be performed recursively to show a structure of each part that contains SVHCs either directly or indirectly. The following cells implement the preceding code in a function that can be called recursively. They then call it on the wing flap assembly.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis can be extended further to include all possible BoM components in the recursive iteration, including specifications, coatings, and substances.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou have now identified a coating that is causing non-compliance. While there is a single coating in the assembly that is non-compliant, it appears in four non-compliant subcomponents. The coating also only contains one non-compliant substance."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-3_Part_compliance.html#group-results-by-indicator","title":"Perform a part compliance query > Group results by indicator","text":"Group results by indicator\n\nAlternatively, using the compliance_by_indicator property gives you a single indicator result that rolls up the results across all parts in the query. This would be useful in a situation where you have a concept assembly stored outside of Granta MI and want to determine its compliance. You know it contains the subassemblies specified in the preceding query, and so using compliance_by_indicator tells you if that concept assembly is compliant based on the worst result of the individual\nsubassemblies.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/external_records.html#using-external-records-in-analysis","title":"Using external records in analysis","text":"Using external records in analysis\n\nAdded in version 2.4."},{"objectID":"Home","href":"user_guide/external_records.html#introduction","title":"Using external records in analysis > Introduction","text":"Introduction\n\nMI Restricted Substances and Sustainability Reports 2026 R1 introduces the ability to perform analysis on records stored\nin separate databases to the Restricted Substances and Sustainability database. These records are referred to below as\n‘external records’, and the databases they are stored in are referred to as ‘external databases’.\n\nSeparating data across databases in this way can simplify data management by making it easier to share responsibility\nand ownership for different datasets across functional groups. Additionally, it is easier to adopt the Restricted\nSubstances and Sustainability solution if existing data can be easily linked to representative data supplied with the\nRestricted Substances and Sustainability database.\n\nWhen a BoM Analytics query is submitted that includes external records, Granta MI first identifies equivalent Restricted\nSubstances and Sustainability records by following cross-database links between the Restricted Substances and\nSustainability records and the external records. The results include both the Restricted Substances and Sustainability\nrecords and the external records, providing clear traceability for how the results were determined.\n\nThis page describes the pre-requisites for performing analysis based on external records, and provides code examples for\ncommon use cases.\n\n"},{"objectID":"Home","href":"user_guide/external_records.html#pre-requisites","title":"Using external records in analysis > Pre-requisites","text":"Pre-requisites\n\nThe following conditions must be met to use this feature:\n\nThe version of this package must be version 2.4 or later.\n\nThe Granta MI server is running MI Restricted Substances and Sustainability Reports 2026 R1 or later.\n\nThe records used for analysis are linked to equivalent records in the main Restricted Substances and Sustainability\ndatabase. See the Granta MI Restricted Substances and Sustainability Install and Configuration, on the Ansys Help\nCenter for more details."},{"objectID":"Home","href":"user_guide/external_records.html#record-based-queries","title":"Using external records in analysis > Record-based queries","text":"Record-based queries\n\nFor record-based queries, the database_key argument should be used when referring to external records. For example,\na material impacted substances analysis can be performed on external material records in the\nMI_Mechanical_Design_Data database with the following query:\n\nIf the ref_grantami_bomanalytics_external_record_references_pre_reqs are met, the results include\nMaterialWithImpactedSubstancesResult objects with the following properties set:\n\nThe record_guid property is set to the record GUID of the linked\nmaterial record in the Restricted Substances and Sustainability database.\n\nThe database_key property is None.\n\nThe equivalent_references property is a list containing a single\nMaterialReference object.\n\nThe ‘equivalent’ MaterialReference object would have the following properties set:\n\nThe material_id property is would be set to the appropriate material ID, for example\n“AB-01” for the first material record in the example.\n\nThe database_key property is MI_Mechanical_Design_Data.\n\nThe equivalent_references property is None."},{"objectID":"Home","href":"user_guide/external_records.html#bom-based-queries","title":"Using external records in analysis > BoM-based queries","text":"BoM-based queries\n\nFor BoM-based queries, the external database key should be used in the record or attribute reference, typically when\nusing the RecordReferenceBuilder or AttributeReferenceBuilder classes. For example, sustainability\nanalysis can be performed on a BoM which contains the following material reference:\n\nAssuming the ref_grantami_bomanalytics_external_record_references_pre_reqs are met, the results include a\ncorresponding MaterialWithSustainabilityResult object with the following properties set:\n\nThe record_guid property is set to the record GUID of the linked material\nrecord in the Restricted Substances and Sustainability database.\n\nThe database_key property is None.\n\nThe equivalent_references property is a list containing a single\nMaterialReference object.\n\nThe ‘equivalent’ MaterialReference object would have the following properties set:\n\nThe record_guid property is 2086f56a-4f4d-4850-9891-3d6ad155d1f9.\n\nThe database_key property is MI_Mechanical_Design_Data.\n\nThe equivalent_references property is None.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThe API for PyGranta BoM Analytics is split into different sections. The following sections describe\ngeneral capabilities applicable to both restricted substances and sustainability:\n\nref_grantami_bomanalytics_common_connection describes how to connect to Granta MI and, if\nrequired, configure any schema customizations in the API client. It also explains how to run\nqueries.\n\nref_grantami_bomanalytics_common_messages describes the structure of log messages\nreturned by the Granta MI server.\n\nref_grantami_bomanalytics_common_exceptions lists the possible custom exceptions that\nmight be raised.\n\nref_grantami_bomanalytics_bom_helpers_index explains how to create, read, edit, and save\nBoM objects for restricted substances and sustainability analysis.\n\nThe following sections describe how to build queries and interpret results for different types of\nanalysis:\n\nref_grantami_bomanalytics_api_impactedsubstances_index\n\nref_grantami_bomanalytics_api_compliance_index\n\nref_grantami_bomanalytics_api_sustainability_index\n\nWhile some examples use a different class than the one being documented, both classes are always\nequivalent in terms of the capability being demonstrated.\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/common.html#common","title":"Common","text":"Common"},{"objectID":"Home","href":"api/common.html#connection-builder","title":"Common > Connection builder","text":"Connection builder\n\n\n\nclass Connection(api_url, session_configuration=None)\n\nConnects to an instance of Granta MI.\n\nThis is a subclass of the ansys.openapi.common.ApiClientFactory class.\nAll methods in this class are documented as returning ApiClientFactory\nclass instances of the ansys.grantami.bomanalytics.Connection class instead.\n\nParameters\n\napi_url\n\npython:str\n\nBase URL of the API server.\n\nsession_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session. The default is None, in which case the\nSessionConfiguration class with default parameters is used.\n\nNotes\n\nFor advanced usage, including configuring session-specific properties and timeouts, see the\nansys-openapi-common API reference. Specifically, see the\ndocumentation for the ApiClientFactory base class and the\nSessionConfiguration class.\n\nTo create the connection to Granta MI, you perform three steps:\n\nCreate the connection builder object and specify the server to connect to.\n\nSpecify the authentication method to use for the connection and provide credentials if required.\n\nConnect to the server, which returns the connection object.\n\nThe examples show this process for different authentication methods.\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> cxn\n<BomServicesClient: url=http://my_mi_server/mi_servicelayer>\n\n>>> cxn = (\n...     Connection(\"http://my_mi_server/mi_servicelayer\")\n...     .with_credentials(username=\"my_username\", password=\"my_password\")\n...     .connect()\n... )\n>>> cxn\n<BomServicesClient: url=http://my_mi_server/mi_servicelayer>\n\n\n\nwith_autologon()\n\nSet up client authentication for use with Kerberos (also known as integrated Windows authentication).\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine if Negotiate authentication is supported by the server. If so,\nNegotiate will then be used for authentication.\n\nIf Negotiate authentication is not supported by the server, an exception is raised.\n\nReturns\n\nApiClientFactory\n\nCurrent client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Negotiate authentication.\n\nNotes\n\nRequires the user to have a valid Kerberos Ticket-Granting-Ticket (TGT).\n\nOn Windows, this is provided by default.\n\nOn Linux, this requires the [linux-kerberos] extension to be installed and your Kerberos installation\nto be configured correctly.\n\n\n\nwith_credentials(username, password, domain=None, authentication_scheme=AuthenticationScheme.AUTO)\n\nSet up client authentication for use with provided credentials.\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine whether NTLM or Basic Authentication should be used. The selected\nauthentication scheme will then be configured for use.\n\nParameters\n\nusername\n\npython:str\n\nUsername for the connection.\n\npassword\n\npython:str\n\nPassword for the connection.\n\ndomain\n\npython:str, optional\n\nDomain to use for connection if required. The default is None.\n\nauthentication_scheme\n\nAuthenticationScheme\n\nThe authentication scheme to use.\n\nAdded in version 2.1.\n\nAdded to\nApiClientFactory.with_credentials\nin version 2.1 of ansys-openapi-common.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Basic or NTLM authentication (Windows clients only).\n\nNotes\n\nNTLM authentication is not currently supported on Linux.\n\n\n\nwith_oidc(idp_session_configuration=None)\n\nSet up client authentication for use with OpenID Connect.\n\nParameters\n\nidp_session_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session when connected to the OpenID identity provider.\n\nReturns\n\nOIDCSessionBuilder\n\nBuilder object to authenticate via OIDC.\n\nNotes\n\nOIDC Authentication requires the [oidc] extra to be installed.\n\n\n\nwith_anonymous()\n\nSet up client authentication for anonymous use.\n\nThis does not configure any authentication or authorization headers. Users must provide any\nauthentication information required themselves.\n\nClients relying on custom authentication such as client certificates or non-standard tokens\nshould use this method.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\n\n\nconnect()\n\nFinalize the BoM Analytics client and return it for use.\n\nAuthentication must be configured for this method to succeed.\n\nReturns\n\nBomAnalyticsClient\n\nClient object that can be used to connect to Granta MI and perform BoM Analytics operations.\n\nRaises\n\nValueError\n\nWhen the client is not fully configured.\n\nConnectionError\n\nIf the resulting client cannot connect to the BoM Analytics service.\n\nLicensingException\n\nError raised if no licenses were found."},{"objectID":"Home","href":"api/common.html#bom-analytics-client","title":"Common > BoM Analytics client","text":"BoM Analytics client\n\n\n\nclass BomAnalyticsClient(servicelayer_url, **kwargs)\n\nCommunicates with Granta MI. This class is instantiated by the\nConnection class described earlier and should not be instantiated directly.\n\n\n\n\n\nproperty maximum_spec_link_depth: int | None\n\nMaximum number of specification-to-specification links that are followed when processing\na query. If a maximum is specified, specification-to-specification links are truncated at the\nspecified depth, and only coatings and substances identified up to and including that point are\nincluded in the analysis.\n\nThe default is None, in which case no limit is applied to the number of specification-to-specification\nlinks. This might lead to performance issues if there are large numbers of specification-to-specification\nlinks present in the database.\n\nThis parameter is supported with Restricted Substances Reports 2023 R2 and later. With older reports,\nthis parameter has no effect, all specification-to-specification links are followed.\n\nAdded in version 1.2.\n\nThis limit applies to each branch of the BoM individually. This is not a global limit on the number of\nspecification-to-specification links that are traversed across the entire BoM. Instead, it is a limit on\nthe maximum depth of specifications below any individual specification node.\n\nReturns\n\nOptional[python:int]\n\nMaximum depth of specification-to-specification links that are followed.\n\n\n\nrun(query: MaterialImpactedSubstancesQuery) -> MaterialImpactedSubstancesQueryResult\n\nrun(query: MaterialComplianceQuery) -> MaterialComplianceQueryResult\n\nrun(query: PartImpactedSubstancesQuery) -> PartImpactedSubstancesQueryResult\n\nrun(query: PartComplianceQuery) -> PartComplianceQueryResult\n\nrun(query: SpecificationImpactedSubstancesQuery) -> SpecificationImpactedSubstancesQueryResult\n\nrun(query: SpecificationComplianceQuery) -> SpecificationComplianceQueryResult\n\nrun(query: SubstanceComplianceQuery) -> SubstanceComplianceQueryResult\n\nrun(query: BomImpactedSubstancesQuery) -> BomImpactedSubstancesQueryResult\n\nrun(query: BomComplianceQuery) -> BomComplianceQueryResult\n\nrun(query: BomSustainabilityQuery) -> BomSustainabilityQueryResult\n\nrun(query: BomSustainabilitySummaryQuery) -> BomSustainabilitySummaryQueryResult\n\nRun a query against the Granta MI database.\n\nParameters\n\nquery\n\nA compliance, impacted substances, or sustainability query object.\n\nReturns\n\nQuery Result\n\nSpecific result object based on the provided query, which contains either the compliance,\nimpacted substances, or sustainability results.\n\nRaises\n\nGrantaMIException\n\nError raised if the server encounters an error while processing the query with a severity\nof critical. This indicates that Granta MI is running and the BoM Analytics service\nis available, but the query could not be run, probably because of a missing database or table.\n\nApiException\n\nError raised if the Granta MI server is not able to return a response, probably\nbecause of an internal configuration error or the BoM Analytics service not being installed.\n\n\n\nset_database_details(database_key='MI_Restricted_Substances', material_universe_table_name=None, in_house_materials_table_name=None, specifications_table_name=None, products_and_parts_table_name=None, substances_table_name=None, coatings_table_name=None, process_universe_table_name=None, location_table_name=None, transport_table_name=None)\n\nConfigure the database key and table names if different from the defaults.\n\nThe database_key argument is required if Granta MI is configured to use a value other than\nMI_Restricted_Substances for the Restricted Substances and Sustainability database.\n\nA table_name argument is required for each table in the Restricted Substances and Sustainability database\nthat has been renamed.\n\nIf external records are used in any analysis, the database key for those records should not be provided here.\nInstead, it should be provided in the appropriate query build method or in the XML BoM. See\nref_grantami_bomanalytics_external_record_references for more details.\n\nParameters\n\ndatabase_key\n\npython:str, optional\n\nDatabase key for the Restricted Substances and Sustainability database. The default is None,\nin which case MI_Restricted_Substances is used.\n\nmaterial_universe_table_name\n\npython:str, optional\n\nName of the table that implements the MaterialUniverse schema. The\ndefault is None, in which case MaterialUniverse is used.\n\nin_house_materials_table_name\n\npython:str, optional\n\nName of the table that implements the Materials - in house schema.\nThe default is None, in which case Materials - in house is used.\n\nspecifications_table_name\n\npython:str, optional\n\nName of the table that implements the Specifications schema. The\ndefault is None, in which case Specifications is used.\n\nproducts_and_parts_table_name\n\npython:str, optional\n\nName of the table that implements the Products and parts schema. The\ndefault is None, in which case Products and parts is used.\n\nsubstances_table_name\n\npython:str, optional\n\nName of the table that implements the Restricted Substances schema.\nThe default is None, in which case Restricted Substances is used.\n\ncoatings_table_name\n\npython:str, optional\n\nName of the table that implements the Coatings schema. The default\nis None, in which case  Coatings is used.\n\nprocess_universe_table_name\n\npython:str, optional\n\nName of the table that implements the ProcessUniverse schema. The default\nis None, in which case  ProcessUniverse is used.\n\nlocation_table_name\n\npython:str, optional\n\nName of the table that implements the Locations schema. The default\nis None, in which case  Locations is used.\n\nAdded in version 2.0.\n\ntransport_table_name\n\npython:str, optional\n\nName of the table that implements the Transport schema. The default\nis None, in which case  Transport is used.\n\nAdded in version 2.0.\n\nNotes\n\nThe database key and table names are configurable, but they only need to be specified if they have been modified\nfrom the defaults. Here are the default key and table names:\n\nDatabase key: MI_Restricted_Substances\n\nTable names:\n\nMaterialUniverse\n\nMaterials - in house\n\nSpecifications\n\nProducts and parts\n\nRestricted Substances\n\nCoatings\n\nProcessUniverse\n\nLocations\n\nTransport\n\nExamples\n\n>>> cxn = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> cxn.set_database_details(database_key = \"MY_RS_DB\",\n...                          in_house_materials_table_name = \"My Materials\")\n\n"},{"objectID":"Home","href":"api/common.html#log-messages","title":"Common > Log messages","text":"Log messages\n\n\n\nclass LogMessage(severity, message)\n\nMessage returned by Granta MI when running the query.\n\nMessages marked with the error severity are more likely to produce incorrect results and should be treated with\nincreased caution.\n\nAttributes\n\nseverity\n\npython:str\n\nLevel of severity. Options are \"error\", \"warning\", and \"information\".\n\nmessage\n\npython:str\n\nDescription of the issue.\n\n"},{"objectID":"Home","href":"api/common.html#exceptions","title":"Common > Exceptions","text":"Exceptions\n\n\n\nclass GrantaMIException\n\nProvides the critical error message to show if processing a BoM Analytics query fails.\n\n\n\nclass LicensingException\n\nRaised when an operation cannot be performed due to a lack of appropriate license."},{"objectID":"Home","href":"api/common.html#value-with-unit","title":"Common > Value with unit","text":"Value with unit\n\n\n\nclass ValueWithUnit(value, unit)\n\nDescribes a value obtained from the API.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty unit: str\n\nUnit of the value.\n\n\n\nproperty value: float\n\nReal number."},{"objectID":"Home","href":"api/common.html#record-references","title":"Common > Record references","text":"Record references\n\nSee ref_grantami_bomanalytics_record_identification for more information about populated\nproperties on record reference objects.\n\n\n\nclass PartReference(input_part_number=None, equivalent_references=None, **kwargs)\n\nRepresents a reference to a part record.\n\nThis class extends the base class to also support part numbers.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty part_number: str | None\n\nPart number.\n\n\n\nproperty input_part_number: str | None\n\nInput part number.\n\nThis property is only populated on BoM query results and is equal to the <PartNumber> element of\nthe corresponding input BoM item.\n\n\n\nproperty equivalent_references: list[PartReference] | None\n\nOther part records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nclass SpecificationReference(equivalent_references=None, **kwargs)\n\nRepresents a reference to a specification record.\n\nThis class extends the base class to also support specification IDs.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty specification_id: str | None\n\nSpecification ID.\n\n\n\nproperty equivalent_references: list[SpecificationReference] | None\n\nOther specification records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nclass MaterialReference(equivalent_references=None, **kwargs)\n\nRepresents a reference to a material record.\n\nThis class extends the base class to also support material IDs.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty material_id: str | None\n\nMaterial ID.\n\n\n\nproperty equivalent_references: list[MaterialReference] | None\n\nOther material records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nclass CoatingReference(equivalent_references=None, **kwargs)\n\nRepresents a reference to a coating record.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty equivalent_references: list[CoatingReference] | None\n\nOther coating records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nclass ProcessReference(equivalent_references=None, **kwargs)\n\nRepresents a reference to a process record.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty equivalent_references: list[ProcessReference] | None\n\nOther process records which defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nclass SubstanceReference(equivalent_references=None, **kwargs)\n\nRepresents a reference to a substance record.\n\nThis class extends the base constructor to also support CAS numbers, EC numbers, and chemical names.\n\nSubstance references come in multiple flavors. Inputs, compliance results, and impacted substance results quantify\nsubstances in slightly different ways. This class implements the reference aspects of the substance record only.\nThe quantifications are implemented in the subclasses.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty external_identity: str | None\n\nItem external identity.\n\nThis property is only populated on BoM query results and is equal to the <ExternalIdentity> element of\nthe corresponding input BoM item.\n\n\n\nproperty name: str | None\n\nItem name.\n\nThis property is only populated on BoM query results and is equal to the <Name> element of\nthe corresponding input BoM item.\n\n\n\nproperty cas_number: str | None\n\nCAS number.\n\n\n\nproperty ec_number: str | None\n\nEC number.\n\n\n\nproperty chemical_name: str | None\n\nChemical name.\n\n\n\nproperty equivalent_references: list[SubstanceReference] | None\n\nOther substance records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\n\n\nclass TransportReference(equivalent_references=None, **kwargs)\n\nRepresents a reference to a transport record.\n\nAdded in version 2.0.\n\n\n\n\n\nproperty record_history_identity: int | None\n\nRecord history identity.\n\n\n\nproperty record_history_guid: str | None\n\nRecord history GUID.\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\n\n\nproperty database_key: str | None\n\nThe database key for the database that contains the record.\n\nThis property is only populated if the record is in a different database to the one specified in\nBomAnalyticsClient.set_database_details(). Supported by MI Restricted Substances and Sustainability\nReports 2026 R1 or later.\n\nAdded in version 2.4.\n\n\n\nproperty identity: str | None\n\nItem unique identifier.\n\nThis property is only populated on BoM query results and is equal to the id attribute of the\ncorresponding input BoM item. If no id has been defined on the BoM item, a unique auto-generated value is\nassigned during analysis.\n\n\n\nproperty equivalent_references: list[TransportReference] | None\n\nOther transport records which are defined as being equivalent to this record.\n\nOnly populated if this record is a substitute for a record in a different database during analysis via a\ncross-database link.\n\nAdded in version 2.4.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-5_Compliance_for_external_data.html#determine-compliance-for-boms-in-external-data-sources","title":"Determine compliance for BoMs in external data sources","text":"Determine compliance for BoMs in external data sources\n\nYou might have to deal with BoMs or other data structures stored in third-party systems. This example shows a scenario where compliance must be determined for a BoM-type structure in a JSON file, with the result added to the input file.\n\nAlthough it is unlikely that the data structures and processing presented here match your requirements, this example demonstrates the principles behind using the Granta MI BoM Analytics API within your existing processes. It shows how a BoM-like data structure can be loaded from a neutral format and used as a starting point for compliance analysis. The approach is applicable to data in other formats or data loaded from other software platform APIs.\n\nYou can download the external data source used in this example."},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-5_Compliance_for_external_data.html#load-the-external-data","title":"Determine compliance for BoMs in external data sources > Load the external data","text":"Load the external data\n\nFirst load the JSON file and use the json module to convert the text into a hierarchical structure of dict and list objects.\n\n\n\n\n\n\n\n\n\nBecause the list of components is used frequently, store it in a variable for convenience.\n\n\n\n\n\nIt is clear from viewing this data that some parts include multiple materials, and some materials appear in the JSON file more than once. However, the material compliance is not dependent on the component it is used in, and the compliance of a part only depends on the worst compliance status of the constituent materials. Therefore, you can simplify the compliance query by get the compliance for the unique set of materials in the JSON file. You can then perform some data manipulation of the\nresults.\n\nBecause the compliance status of a material does not depend on which component it is used in and part compliance depends only on the worst compliance status of its constituent materials, you can simplify the query by running it against the set of unique materials in the JSON file. You can then rebuild the data structure from these results to view the compliance by component.\n\nFirst, use a set comprehension to get the unique materials, which you can then cast into a list.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-5_Compliance_for_external_data.html#get-the-compliance-status","title":"Determine compliance for BoMs in external data sources > Get the compliance status","text":"Get the compliance status\n\nNext, create and run a compliance query using the list of material IDs, as shown in previous examples.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-5_Compliance_for_external_data.html#postprocess-the-results","title":"Determine compliance for BoMs in external data sources > Postprocess the results","text":"Postprocess the results\n\nThe preceding results describe the compliance status for each material, but more work is needed to provide the compliance status for all the components in the original JSON file.\n\nWhen a component contains only one material, the result can simply be copied over. In the general case, moving from material compliance to component compliance means taking the worst compliance result across all the constituent materials.\n\nTo do this, first create a dictionary that maps a material ID to the indicator result returned by the query.\n\n\n\n\n\nNext, define a function that takes a list of material IDs and returns the worst compliance status associated with the materials in the list.\n\nYou can use the built-in max() function to do this because you can compare WatchListIndicator with > and < operators. The convention is that a worse result is greater than a better result.\n\n\n\n\n\nNow call this function for each component in a dict comprehension to obtain a mapping between part number and compliance status.\n\n\n\n\n\n\n\n\n\nThese results include text defined by the API for compliance status. However, you might want the compliance status to determine the approvals required to release the part in a design review process. In this case, you can define a mapping between compliance status and approval requirements.\n\n\n\n\n\nYou can now use this dictionary to map from the Granta MI result to the approval requirements.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Compliance_Queries/3-5_Compliance_for_external_data.html#write-the-output","title":"Determine compliance for BoMs in external data sources > Write the output","text":"Write the output\n\nOnce you have your final result, you can take your result dict and use it to extend the original JSON data structure, with approval requirements added in.\n\n\n\n\n\nPrint the results to see that the new data structure includes the results.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/bom_builder/builders.html#bom-reference-builders","title":"BoM reference builders","text":"BoM reference builders"},{"objectID":"Home","href":"api/bom_builder/builders.html#record-reference-builder","title":"BoM reference builders > Record reference builder","text":"Record reference builder\n\nMany types of entity are referenced within a Granta MI database. These references can use several different ways of\nidentifying the target object. The RecordReferenceBuilder helps to ensure that a reference contains the required\ninformation and to reduce the risk of ambiguous references being provided.\n\n\n\nclass RecordReferenceBuilder(db_key, *, record_uid=None)\n\nCreate a MIRecordReference with a valid combination of properties.\n\nAdded in version 2.0.\n\nParameters\n\ndb_key\n\npython:str\n\nDatabase key specifying the database to which the Record belongs.\n\nrecord_uid\n\nOptional[python:str]\n\nOptional identifier to annotate this record reference, will be returned with the response unchanged.\n\n\n\nwith_record_history_id(record_history_id, *, record_version_number=None)\n\nSpecify the record by its history identity, and optionally the version number if the record is in a\nVersion-Controlled table.\n\nParameters\n\nrecord_history_id\n\npython:int\n\nThe record history identity.\n\nrecord_version_number\n\nOptional[python:int]\n\nIf the record is in a Version-Controlled table, return a specific version of the record, otherwise\nthe latest released version will be returned.\n\nReturns\n\n_FinalRecordReferenceBuilder\n\n\n\n\n\nwith_record_guid(record_guid)\n\nSpecify the record by its GUID.\n\nThis will specify an exact version if the table is Version-Controlled.\n\nParameters\n\nrecord_guid\n\npython:str\n\nThe record version GUID.\n\nReturns\n\n_FinalRecordReferenceBuilder\n\n\n\n\n\nwith_record_history_guid(record_history_guid)\n\nSpecify the record by its History GUID.\n\nThis will return the latest released version of the record. If a specific version is required then use the\nwith_record_guid method instead.\n\nParameters\n\nrecord_history_guid\n\npython:str\n\nThe record history GUID.\n\nReturns\n\n_FinalRecordReferenceBuilder\n\n\n\n\n\nwith_lookup_value(*, lookup_value, lookup_attribute_reference)\n\nSpecify the record by a unique value on a short-text attribute.\n\nYou must specify both the attribute and the lookup value. If the value is not unique then an exception will be\nraised.\n\nParameters\n\nlookup_value\n\npython:str\n\nThe value identifying the record.\n\nlookup_attribute_reference\n\nMIAttributeReference\n\nThe short-text attribute or compatible pseudo-attribute to use for the lookup.\n\nReturns\n\n_FinalRecordReferenceBuilder\n\n"},{"objectID":"Home","href":"api/bom_builder/builders.html#attribute-reference-builder","title":"BoM reference builders > Attribute reference builder","text":"Attribute reference builder\n\nRecords can be referred to by a unique text value, this must be accompanied by a reference to the attribute containing\nthe value. The AttributeReferenceBuilder helps to ensure that this reference contains the required information and to\nreduce the risk of ambiguous references being provided.\n\n\n\nclass AttributeReferenceBuilder(db_key)\n\nCreate a MI Attribute Reference with a valid combination of properties.\n\nAdded in version 2.0.\n\nParameters\n\ndb_key\n\npython:str\n\nDatabase Key specifying the database the Attribute is in.\n\n\n\nwith_attribute_identity(attribute_identity)\n\nSpecify the attribute by its identity.\n\nParameters\n\nattribute_identity\n\npython:int\n\nThe attribute’s identity.\n\nReturns\n\n_FinalAttributeReferenceBuilder\n\n\n\n\n\nas_pseudo_attribute(pseudo_attribute)\n\nSpecify the attribute as a specific pseudo-attribute.\n\nParameters\n\npseudo_attribute\n\nPseudoAttribute\n\n\n\nReturns\n\n_FinalAttributeReferenceBuilder\n\n\n\n\n\nwith_attribute_name(attribute_name, *, is_standard_name=False)\n\nSpecify the attribute by name, which may be a standard name.\n\nParameters\n\nattribute_name\n\npython:str\n\nThe attribute’s name.\n\nis_standard_name\n\nbool\n\nIf True, the attribute is defined by a standard name (default false).\n\nReturns\n\n_AttributeReferenceByNameBuilder\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/bom_builder/gbt1205.html#1205-granta-base-types","title":"12/05 Granta Base Types","text":"12/05 Granta Base Types\n\nThese models are Python bindings for the Granta Base Types 12/05 XML schema.\nThese are typically used to define references to attributes and records in a Granta MI database.\n\nUse the ref_grantami_bomanalytics_bom_builders to ensure a valid combination of properties are provided for\nthe classes in this module.\n\nClasses on this page are available in the module ansys.grantami.bomanalytics.bom_types.gbt1205.\n\nChanged in version 2.3: The types documented on this page have moved from ansys.grantami.bomanalytics.bom_types to\nansys.grantami.bomanalytics.bom_types.gbt1205. They are still importable from the old location for\ncompatibility.\n\n\n\n\n\n\n\nclass PseudoAttribute(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for PseudoAttribute.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\n\n\nclass PartialTableReference(table_identity=None, table_guid=None, table_name=None)\n\nA type that partially identifies a Table, but does not specify the MI Database. Usually, just one of the several\noptional fields should be provided; where more than one is provided, the highest priority one is used, where the\ndescending priority order is: tableIdentity, tableGUID, tableName.\n\n\n\n\n\ntable_identity: int | None = None\n\nThe identity of the table, this is the fastest way to reference a table.\n\n\n\ntable_guid: str | None = None\n\nThe GUID of the table, this is likely to be a persistent way to refer to a table.\n\n\n\ntable_name: str | None = None\n\nThe name of the table. Note that table names can vary between localisations of a database, so this may not be a\nsafe way to refer to a table if the MI Database supports multiple locales.\n\n\n\nclass MIAttributeReference(db_key, attribute_identity=None, table_reference=None, attribute_name=None, pseudo=None, is_standard=None)\n\nA type that allows identification of a particular Attribute in an MI Database. This may be done directly by\nspecifying the Identity of the Attribute, or indirectly by specifying a lookup that will match (only) the\nAttribute.\n\nNote: in certain cases, an MIAttributeReference may match more than one Attribute in\nthe MI Database; depending on the operation, this may be legal or may result in\na Fault.\n\n\n\n\n\ndb_key: str\n\nThe key that uniquely identifies a particular Database on the MI Server.\n\n\n\nattribute_identity: int | None = None\n\nThe identity of the attribute within the MI Database.\n\n\n\ntable_reference: PartialTableReference | None = None\n\nA reference to the table hosting the attribute. Required if attribute_name is specified and\nis_standard is not True.\n\n\n\nattribute_name: str | None = None\n\nName of the Attribute.\n\n\n\npseudo: PseudoAttribute | None = None\n\nThe pseudo-attribute type if referring to a pseudo-attribute.\n\n\n\nis_standard: bool | None = None\n\nIf True indicates that the provided attribute_name is a Standard Name.\n\n\n\nclass MIRecordReference(db_key, record_history_identity=None, record_version_number=None, record_guid=None, record_history_guid=None, lookup_attribute_reference=None, lookup_value=None, record_uid=None)\n\nA type that allows identification of a particular Record in an\nMI Database. This may be done directly by specifying the Identity or GUID of the Record, or\nindirectly by specifying a lookup that will match (only) the Record.\n\nFor input, you should provide exactly one of either identity, recordGUID, recordHistoryGUID\nor lookupValue. If more than one element identifying the record is given, only one is used; the descending\norder of priority is: identity, recordGUID, recordHistoryGUID, lookupValue. The Service Layer does not\ncheck that the several elements identifying the record are all referencing the same record, it just picks the\nhighest-priority one and uses that.\n\n\n\n\n\ndb_key: str\n\nThe key that uniquely identifies a particular Database on the MI Server.\n\n\n\nrecord_history_identity: int | None = None\n\nThis is the best-performing and highest-priority way to reference a record; however, identities might not\nbe suitable for long-term persistence.\n\n\n\nrecord_version_number: int | None = None\n\nIf omitted, this means the latest version visible to the user.\n\n\n\nrecord_guid: str | None = None\n\nIdentifies a particular version of a record by its GUID, this is a more persistent way to refer to a record.\n\n\n\nrecord_history_guid: str | None = None\n\nIdentifies a record history, the latest visible version will be returned. record_version_number has no\neffect on references that use record_history_guid.\n\n\n\nlookup_attribute_reference: MIAttributeReference | None = None\n\nWhen provided in combination with lookup_value identifies a record by a unique short-text attribute.\nSpecifies the attribute to be used for the lookup operation.\n\n\n\nlookup_value: str | None = None\n\nWhen provided in combination with lookup_attribute_reference identifies a record by a unique short-text\nattribute. Specifies the value to be used for the lookup operation. If this is not unique an error will be\nreturned.\n\n\n\nrecord_uid: str | None = None\n\nThe recordUID may be used to identify a particular XML element representing a record. It does not represent\nany property or attribute of an actual MI Record.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nThe following examples demonstrate key aspects of Granta MI BoM Analytics.\n\nTo run these examples, install dependencies with this code:\n\nBasic usage example\n\nHow to connect to Granta MI and perform a basic query\n\n0_Basic_usage\n\nDatabase-specific configuration\n\nHow to configure BoM Analytics for a customized database\n\n1_Database-specific_configuration\n\nImpacted substances examples\n\nHow to perform impacted substance queries for materials, parts, and BoMs\n\n2_Impacted_Substances_Queries/index\n\nCompliance examples\n\nHow to perform compliance substance queries for substances, materials, parts,\nand with external data sources\n\n3_Compliance_Queries/index\n\nSustainability examples\n\nHow to perform sustainability queries and to analyze the results\n\n4_Sustainability/index\n\nSustainability summary examples\n\nHow to perform sustainability summary queries and to analyze the results\n\n5_Sustainability_summary/index\n\nBoM examples\n\nHow to create XML BoMs\n\n6_BoMs/index\n\n\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-1_Summary_and_messages.html#messages-and-phase-summary","title":"Messages and phase summary","text":"Messages and phase summary\n\nThis example shows how to run a sustainability summary query and how to explore the phases summary result. It also shows how to review any messages generated by the server during the analysis.\n\nThe following supporting files are required for this example:\n\nsustainability-bom-2412.xml\n\nFor help on constructing an XML BoM, see BoM examples.\n\nInfo:\n\nThis example uses an input file that is in the 24/12 XML BoM format. This structure requires Granta MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nTo run this example with an older version of the reports bundle, use sustainability-bom-2301.xml instead. Some sections of this example will produce different results from the published example when this BoM is used."},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-1_Summary_and_messages.html#run-a-sustainability-summary-query","title":"Messages and phase summary > Run a sustainability summary query","text":"Run a sustainability summary query\n\nFirst, connect to Granta MI.\n\n\n\n\n\nNext, create a sustainability summary query. The query accepts a single BoM as argument and an optional configuration for units. If a unit is not specified, the default unit is used. Default units for the analysis are MJ for energy, kg for mass, and km for distance.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-1_Summary_and_messages.html#messages","title":"Messages and phase summary > Messages","text":"Messages\n\nThe BomSustainabilitySummaryQueryResult object that is returned implements a messages property and properties showing the environmental impact of the items included in the BoM. Log messages are sorted by decreasing severity. The same messages are available in the MI Service Layer log file and are logged using the standard logging module.\n\nIf there are no messages, an empty list is returned. This means there were no unexpected events during BoM analysis.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-1_Summary_and_messages.html#phases-summary","title":"Messages and phase summary > Phases summary","text":"Phases summary\n\nThe phases_summary property summarizes the environmental impact contributions by lifecycle phase: materials, processes, and transport phases. The results for each phase include their absolute and relative contributions to the product as a whole.\n\n\n\n\n\n\n\n\n\nUse the pandas and plotly libraries to visualize the results. First, the data is translated from the BoM Analytics BomSustainabilitySummaryQueryResult to a pandas Dataframe object.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, the dataframe is visualized as a pair of pie charts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-1_Creating_an_XML_BoM.html#create-an-xml-bom-using-python","title":"Create an XML BoM using Python","text":"Create an XML BoM using Python\n\nThe bom_types namespace can be used in conjunction with the BoMHandler class to create and manipulate BoMs for analysis. This example demonstrates creating a BoM for a laminated glass door and then uses the BoM as the input to a compliance query.\n\nThe door contains two hinges and a handle, both fixed to the frame with machine screws and washers, the door glass is coated with a partially reflective polymer film.\n\nMost Granta MI deployments will use the default database key and table names:\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-1_Creating_an_XML_BoM.html#create-the-bill-of-materials-as-python-objects","title":"Create an XML BoM using Python > Create the Bill of Materials as Python objects","text":"Create the Bill of Materials as Python objects\n\nThe structure of an XML BoM is hierarchical, individual parts belong to assemblies which can belong to larger assemblies. It is possible to construct the BoM in one statement, but this example uses the recommended approach of building each part up from objects that represent smaller sub-assemblies.\n\nIt is possible to have the same part in multiple places in the BoM, so we define two helper functions to create a copy of a part and set the quantity.\n\n\n\n\n\nMaterial references define abstract references to Granta MI records, and so can be reused. Material references can be defined in different ways.\n\nThe following references are created using different types of GUID. Record GUIDs identify a specific version of the record, while Record History GUIDs identify the latest accessible version of the record.\n\n\n\n\n\nSome databases also have unique identifiers for materials. If these are Short Text attributes they can be used as lookup values, for example in MaterialUniverse we can use the “Material ID” attribute.\n\n\n\n\n\nNylon washers exist in multiple parts, so define these first. The part number has no effect on the analysis and simply identifies each part in the result.\n\n\n\n\n\nStart with sub-assemblies and assemble the BoM. The hinge assembly consists of two casting parts, four washers, and two machine screws\n\n\n\n\n\nThe handle assembly consists of two stainless steel handles, two mild steel pins, four nylon washers and a pair of grub screws. The pin screws into part B and is retained in part A with a grub screw.\n\n\n\n\n\nThe glass panel consists of a laminated glass door and a layer of PET solar control film.\n\n\n\n\n\nThe whole door assembly is then a combination of two hinges, one handle assembly and one door panel.\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-1_Creating_an_XML_BoM.html#serialize-the-bom-to-xml","title":"Create an XML BoM using Python > Serialize the BoM to XML","text":"Serialize the BoM to XML\n\nGenerate a BoM from the door assembly part, and serialize the BoM to XML.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/6_BoMs/6-1_Creating_an_XML_BoM.html#run-a-compliance-query","title":"Create an XML BoM using Python > Run a compliance query","text":"Run a compliance query\n\nNow that you have created an XML BoM, run a compliance query to determine whether the BoM complies with a specific legislation. First, connect to Granta MI.\n\n\n\n\n\nThe compliance BoM query accepts a single XML BoM as a string and one or more indicators. In this case we perform a query against the SIN list, using the RoHS indicator with a threshold of 0.1%.\n\n\n\n\n\n\n\n\n\nThe BomComplianceQueryResult object returned after running the compliance query contains a list of PartWithComplianceResult objects. The following cell prints the compliance status of the BoM.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/query_types.html#differences-between-bom-and-record-queries","title":"Differences between BoM and record queries","text":"Differences between BoM and record queries\n\nThe queries supported by the grantami-bomanalytics package can be split into two\nbroad groups: record-based queries and BoM-based queries. Whereas BoM-based queries\ncan only be constructed with a single BoM, record-based queries can be constructed\nwith any number of records. For example, a\nSpecificationImpactedSubstancesQuery\ninstance could include any number of specification references.\n\nThis page describes the differences in how BoM-based queries and record-based queries\ninclude additional linked items in restricted substances analyses. It also describes the ways\nrecords are identified in the queries and responses for the different query types.\n\n"},{"objectID":"Home","href":"user_guide/query_types.html#items-added-during-restricted-substances-analysis","title":"Differences between BoM and record queries > Items added during restricted substances analysis","text":"Items added during restricted substances analysis\n\nIn both record and BoM-based restricted substances queries, additional items are included both in\nthe analysis and the response based on record-to-record links in Granta MI. However, the items added\ndepend on the type of query used.\n\nIn subsequent sections, the following structure is used as an example:\n\nA part record, which links to:\n\nA part record that contains a substance declaration,\n\nA material record that contains a substance declaration, and\n\nA specification record, which links to:\n\nA specification record that contains a substance declaration.\n\nIn both query types, all items added during the analysis are always identified by the\nrecord_history_identity property in the response."},{"objectID":"Home","href":"user_guide/query_types.html#record-based-queries","title":"Differences between BoM and record queries > Record-based queries","text":"Record-based queries\n\nIn a record-based query, all children of all items included in the query are included in the analysis\nand returned in the response. Considering a PartComplianceQuery instance containing the\nroot part in the preceding structure, the child part, all child specifications, and all substances are\nincluded in the analysis and returned in the response."},{"objectID":"Home","href":"user_guide/query_types.html#bom-based-queries","title":"Differences between BoM and record queries > BoM-based queries","text":"BoM-based queries\n\nIn a BoM-based query, only child specifications are included in the analysis and returned in the\nresponse. Considering a BomComplianceQuery instance containing the root part\nin the preceding structure, only the child specifications are included in the analysis and\nreturned in the response. The child part and material are not included unless they are explicitly\nadded to the BoM.\n\nThe API assumes that, excluding specifications, a BoM represents the entire structure of the\nproduct. The API does not use any record-to-record links in Granta MI in the analysis, except for\nspecification records.\n\nIf you want to use a BoM-based query, you must include the full product\nstructure in the BoM, including substances.\n\n"},{"objectID":"Home","href":"user_guide/query_types.html#record-identification","title":"Differences between BoM and record queries > Record identification","text":"Record identification"},{"objectID":"Home","href":"user_guide/query_types.html#record-based-queries","title":"Differences between BoM and record queries > Record-based queries","text":"Record-based queries\n\nQueries that accept record references as inputs, such as PartComplianceQuery, allow the\ninput records to be defined with different record identifiers.\n\nThe corresponding item in the query result is identified by the same identifier as the one used in\nthe request.\n\nFor example, parts added to the query with the with_part_numbers()\nmethod are identified in the query result by their part_number property, and parts added with\nthe with_record_guids() method are identified in the query result by\ntheir record_guid property."},{"objectID":"Home","href":"user_guide/query_types.html#bom-based-queries","title":"Differences between BoM and record queries > BoM-based queries","text":"BoM-based queries\n\nBoM-based queries accept a BoM as input to the request. According to the Ansys Granta MI XML BoM\nformats, record references can be defined in many ways. As a general rule, items in the query result\nthat correspond to an item provided in the input BoM are described by the same identifier.\n\nFor example, assume that MIMaterialReference in an input BoM uses a recordGUID,\nwhich is used in a BomSustainabilityQuery\ninstance:\n\nThis results in a MaterialWithSustainabilityResult\ninstance, where only the\nrecord_guid is populated.\n\nNow assume that the record reference in an input BoM is defined with a lookupValue:\n\nThe objects in the response are then identified by record_guid, unless the attribute used for\nthe lookup is a special identifier such as:\n\npart_number\n\nmaterial_id\n\ncas_number\n\nspecification_id\n\nIn such a case, the corresponding property is populated.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/bom_builder/eco2412.html#2412-xml-bom-types","title":"24/12 XML BoM types","text":"24/12 XML BoM types\n\nThese models are Python bindings for the Ansys Granta MI 24/12 XML schema.\nNot all elements are required to define a valid BoM for analysis, and not all elements have an impact\non all types of analysis. For information on the relevant items for each analysis type,\nsee ref_grantami_bomanalytics_api_index.\n\nThese classes are available in the module ansys.grantami.bomanalytics.bom_types.eco2412.\n\nThe 24/12 XML schema is supported by MI Restricted Substances and Sustainability Reports 2025 R2 and later.\n\nThe following elements are defined in the 24/12 BoM schema but are not supported in this module:\n\nNonMIPartReference on Part\n\nAnnotations and AnnotationSources on BillOfMaterials\n\nThis module does not contain classes that correspond to these types and cannot serialize a BoM that includes these\nelements. It is still possible to deserialize an XML BoM that uses these elements, but these elements cannot be\nconverted to Python objects. See load_bom_from_file() and\nload_bom_from_text() for more details.\n\nAdded in version 2.3: The 24/12 XML schema is backwards compatible with the 23/01 XML schema. This version adds support for associating\nTransportStage and Location information with Part and\nProcess objects via the transport_phase and location  attributes.\n\n\n\n\n\n\n\nclass BillOfMaterials(components, transport_phase=<factory>, use_phase=None, location=None, notes=None, internal_id=None)\n\nType representing the root Bill of Materials object.\n\n\n\n\n\ncomponents: List[Part]\n\nThe parts contained within this BoM.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe different forms of transport to which the parts are subject.\n\n\n\nuse_phase: UsePhase | None = None\n\nThe type of use to which this product is subject.\n\n\n\nlocation: Location | None = None\n\nThe location in which the object represented by the BoM is assembled.\n\n\n\nnotes: BoMDetails | None = None\n\nAny optional notes about this BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Part(part_number, quantity=None, mass_per_unit_of_measure=None, volume_per_unit_of_measure=None, mi_part_reference=None, part_name=None, external_identity=None, components=<factory>, specifications=<factory>, materials=<factory>, substances=<factory>, processes=<factory>, rohs_exemptions=<factory>, end_of_life_fates=<factory>, internal_id=None, transport_phase=<factory>, location=None)\n\nA single part which may or may not be stored in the MI Database.\n\n\n\n\n\npart_number: str\n\nThe Part Number associated with this part.\n\n\n\nquantity: UnittedValue | None = None\n\nThe quantity of part(s) used in the parent part. For discrete parts, this will be the part count - an\ninteger with a blank unit (or “Each”). For continuous parts, it will be a mass, length, area or volume - a\nfloat value with an appropriate units.\n\n\n\nmass_per_unit_of_measure: UnittedValue | None = None\n\nThe mass of the part, after processing, relative to the unit that Quantity is given in. If MassPerUom is\nspecified and VolumePerUom is not, then specifying materials within this part is interpreted to be\npercentage by mass.\n\n\n\nvolume_per_unit_of_measure: UnittedValue | None = None\n\nThe volume of the part, after processing, relative to the unit that Quantity is given in. If VolumePerUom\nis specified and MassPerUom is not, then specifying materials within this part is interpreted to be\npercentage by volume.\n\n\n\nmi_part_reference: MIRecordReference | None = None\n\nA reference identifying a part stored in the MI Database.\n\n\n\npart_name: str | None = None\n\nDisplay name for the part.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ncomponents: List[Part]\n\nList of subcomponents for this part.\n\n\n\nspecifications: List[Specification]\n\nList of specifications applying to this part.\n\n\n\nmaterials: List[Material]\n\nList of constituent materials making up this part.\n\n\n\nsubstances: List[Substance]\n\nList of substances contained within this part.\n\n\n\nprocesses: List[Process]\n\nList of processes used in the manufacture of this part.\n\n\n\nrohs_exemptions: List[str]\n\nIf the part has a RoHS exemption, provide one or more justifications for the exemptions here. If the part is\nanalyzed as Non-Compliant then the RoHS indicator will return Compliant with Exemptions instead.\n\n\n\nend_of_life_fates: List[EndOfLifeFate]\n\nThe fate(s) of the part, at the end-of-life of the product.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe Transports to which the part is subject.\n\n\n\nlocation: Location | None = None\n\nThe Location in which the part is manufactured.\n\n\n\nclass Material(mi_material_reference, percentage=None, mass=None, recycle_content_percentage=None, processes=<factory>, end_of_life_fates=<factory>, identity=None, name=None, external_identity=None, internal_id=None)\n\nA Material within a part or semi-finished part. The material is stored in the Database.\n\n\n\n\n\nmi_material_reference: MIRecordReference\n\nReference identifying the material record within the MI Database.\n\n\n\npercentage: float | None = None\n\nThe fraction of the part consisting of this material. Provide either this or mass.\n\n\n\nmass: UnittedValue | None = None\n\nThe mass of this material present within the part. Provide either this or percentage.\n\n\n\nrecycle_content_percentage: float | None = None\n\nIf the recyclability is not typical for this material, or no typical value is available in the MI Database,\nthis value indicates which percentage of this material can be recycled.\n\n\n\nprocesses: List[Process]\n\nAny processes associated with the production and preparation of this material.\n\n\n\nend_of_life_fates: List[EndOfLifeFate]\n\nThe fates of this material once the product is disposed of.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Process(mi_process_reference, dimension_type, percentage=None, quantity=None, identity=None, name=None, external_identity=None, internal_id=None, transport_phase=<factory>, location=None)\n\nA process that is applied to a subassembly, part, semi-finished part or material. The process is stored in the\nDatabase.\n\n\n\n\n\nmi_process_reference: MIRecordReference\n\nReference identifying a record in the MI Database containing information about this process.\n\n\n\ndimension_type: DimensionType\n\nObject defining the dimension affected by the process, for example area for coatings, or mass removed for\nmachining operations.\n\n\n\npercentage: float | None = None\n\nFraction of the object affected by the process, with basis specified by dimension_type. Only supported for\ndimension types Mass and MassRemoved.\n\n\n\nquantity: UnittedValue | None = None\n\nA quantification of the process according to its dimension type.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\ntransport_phase: List[TransportStage]\n\nThe Transports to which the material is subject before this processing step.\n\n\n\nlocation: Location | None = None\n\nThe Location in which the processing is done.\n\n\n\nclass Substance(mi_substance_reference, percentage=None, category=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA substance within a part, semi-finished part, material or specification. The substance is stored in the\nDatabase.\n\n\n\n\n\nmi_substance_reference: MIRecordReference\n\nReference identifying the record representing the substance in the MI Database.\n\n\n\npercentage: float | None = None\n\nIf the parent object consists of more than one substance, this defines the percentage of this\nsubstance.\n\n\n\ncategory: Category | None = None\n\nRepresents whether the substance remains present in the material after production.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass Specification(mi_specification_reference, quantity=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nA specification for a surface treatment, part, process, or material. Refers to a record within the MI Database\nstoring the details of the specification and its impact.\n\n\n\n\n\nmi_specification_reference: MIRecordReference\n\nReference identifying the record representing this specification in the MI Database.\n\n\n\nquantity: UnittedValue | None = None\n\nA quantification of the specification, if applicable.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass TransportStage(name, mi_transport_reference, distance, internal_id=None)\n\nDefines the transportation applied to an object, in terms of the generic transportation type (stored in the\nDatabase) and the amount of that transport used in this instance.\n\n\n\n\n\nname: str\n\nName of this transportation stage, used only to identify the stage within the BoM.\n\n\n\nmi_transport_reference: MIRecordReference\n\nReference to a record in the MI Database representing the means of transportation for this stage.\n\n\n\ndistance: UnittedValue\n\nThe distance covered by this transportation stage.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass BoMDetails(notes=None, picture_url=None, product_name=None)\n\nExplanatory information about a BoM.\n\n\n\n\n\nnotes: str | None = None\n\nGeneral notes for the BoM object.\n\n\n\npicture_url: str | None = None\n\nThe URL of an image to include at the top of the report. This URL must be accessible from the reporting\nservices server.\n\n\n\nproduct_name: str | None = None\n\nThe product name.\n\n\n\nclass UsePhase(product_life_span, electricity_mix=None, static_mode=None, mobile_mode=None)\n\nProvides information about the sustainability of the product whilst in use, including electricity use, emissions\ndue to transport, emissions due to electricity consumption, and the expected life span of the product.\n\n\n\n\n\nproduct_life_span: ProductLifeSpan\n\nSpecifies the expected life span of the product.\n\n\n\nelectricity_mix: ElectricityMix | None = None\n\nSpecifies the proportion of electricity within the destination country that comes from fossil fuels.\n\n\n\nstatic_mode: StaticMode | None = None\n\nProvides information about the expected static use of the product.\n\n\n\nmobile_mode: MobileMode | None = None\n\nProvides information about the expected mobile use of the product.\n\n\n\nclass ProductLifeSpan(duration_years, number_of_functional_units=None, functional_unit_description=None, utility=None)\n\nSpecifies the average life span for the product represented by the BoM.\n\n\n\n\n\nduration_years: float\n\nThe product lifespan in years.\n\n\n\nnumber_of_functional_units: float | None = None\n\nThe number of functional units delivered in the lifespan of the product represented by the BoM.\n\n\n\nfunctional_unit_description: str | None = None\n\nA short (ideally one-word) description of a single functional unit.\n\n\n\nutility: UtilitySpecification | None = None\n\nIndicates how much use can be obtained from the product represented by the BoM, compared to an\nindustry-average example.\n\n\n\nclass UtilitySpecification(industry_average_duration_years=None, industry_average_number_of_functional_units=None, utility=None)\n\nSpecifies how much use can be obtained from the product represented by this BoM in comparison to a\nrepresentative industry average.\n\n\n\n\n\nindustry_average_duration_years: float | None = None\n\nThe average lifespan of all examples, throughout the industry, of the kind of product described herein.\n\n\n\nindustry_average_number_of_functional_units: float | None = None\n\nThe average number of functional units delivered, in their lifespan, by all examples, throughout the\nindustry, of the kind of product represented by this object.\n\n\n\nutility: float | None = None\n\nDirectly specifies the utility.\n\n\n\nclass StaticMode(mi_energy_conversion_reference, power_rating, days_used_per_year, hours_used_per_day)\n\nSpecifies the primary energy conversion that occurs during the product’s use.\n\n\n\n\n\nmi_energy_conversion_reference: MIRecordReference\n\nReference to a record in the MI database representing the primary energy conversion taking place when the\nproduct is in use.\n\n\n\npower_rating: UnittedValue\n\nThe power rating of the product whilst in use.\n\n\n\ndays_used_per_year: float\n\nThe number of days per year that the product will be used.\n\n\n\nhours_used_per_day: float\n\nThe number of hours per day of use that the product will be used.\n\n\n\nclass MobileMode(mi_transport_reference, days_used_per_year, distance_travelled_per_day)\n\nIf the product is transported as part of its use then this type contains details about the way in which it is\ntransported.\n\n\n\n\n\nmi_transport_reference: MIRecordReference\n\nReference to a record in the MI database representing the means of transport for this product during use.\n\n\n\ndays_used_per_year: float\n\nThe number of days in a year the product will be transported during use.\n\n\n\ndistance_travelled_per_day: UnittedValue\n\nThe distance the product will be transported each day as part of its use.\n\n\n\nclass ElectricityMix(mi_region_reference=None, percentage_fossil_fuels=None)\n\nIf the product consumes electrical power, then the amount of CO2 produced to generate depends upon the mix of\nfossil fuel burning power stations in the region of use.  This type lets you specify the electrical generation\nmix by either specifying the region or country of use or by specifying the percentage of power that comes from\nfossil fuel sources.\n\n\n\n\n\nmi_region_reference: MIRecordReference | None = None\n\nReference to a record in the MI database representing the electricity mix for the destination country.\n\n\n\npercentage_fossil_fuels: float | None = None\n\nThe percentage of electrical power production within the destination country that comes from fossil fuels.\n\n\n\nclass Location(mi_location_reference=None, identity=None, name=None, external_identity=None, internal_id=None)\n\nDefines the manufacturing location for the BoM for use in process calculations.\n\n\n\n\n\nmi_location_reference: MIRecordReference | None = None\n\nReference to a record in the MI database representing the manufacturing location.\n\n\n\nidentity: str | None = None\n\nA display identity for the object.\n\n\n\nname: str | None = None\n\nA display name for the object.\n\n\n\nexternal_identity: str | None = None\n\nA temporary reference populated and used by applications to refer to the item within the BoM.\n\n\n\ninternal_id: str | None = None\n\nA unique identity for this object in this BoM. This identity is only for internal use, allowing other elements\nto reference this element.\n\n\n\nclass UnittedValue(value, unit=None)\n\nA physical quantity with a unit. If provided in an input then the unit must exist within the MI database,\notherwise an error will be raised.\n\n\n\n\n\nvalue: float\n\nThe value of the quantity in specified units.\n\n\n\nunit: str | None = None\n\nIf provided, specifies the unit symbol applying to the quantity. If absent the quantity will be treated as\ndimensionless.\n\n\n\nclass EndOfLifeFate(mi_end_of_life_reference, fraction)\n\nThe fate of a material at the end-of-life of the product. For example if a material can be recycled, and what\nfraction of the total mass or volume can be recycled.\n\n\n\n\n\nmi_end_of_life_reference: MIRecordReference\n\nReference identifying the applicable fate within the MI Database.\n\n\n\nfraction: float\n\nFraction of the total mass or volume of material to which this fate applies.\n\n\n\nclass Category(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for Category.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\n\n\nclass DimensionType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nValid values for DimensionType.\n\n\n\nclassmethod from_string(value)\n\nConvert string representation of this object into an instance of this object.\n\nParameters\n\nvalue: str\n\nString representation of this object.\n\n\n\nto_string()\n\nConvert this Enum object to its string representation.\n\nReturns\n\npython:str\n\nString representation of this object.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"api/bom_builder/helpers.html#bom-handler","title":"BoM handler","text":"BoM handler\n\nThe BoM handler provides the serialization and deserialization of BillOfMaterial objects to and from XML format. This\nprocess validates that the BoM has a valid structure, and that the XML provided is syntactically correct.\n\n\n\nclass BoMHandler\n\nHandler for XML formatted BoMs.\n\nSupports reading from files and strings, serializing to string format, and converting BoMs between different\nversions.\n\nAdded in version 2.0.\n\n\n\n\n\nload_bom_from_file(file_path, allow_unsupported_data=True)\n\nRead a BoM from a file and return the corresponding BillOfMaterials object for use.\n\nParameters\n\nfile_path\n\nPath\n\nLocation of the BoM XML file.\n\nallow_unsupported_data\n\nbool, default: python:True\n\nIf False, an exception is raised if there is data in the BoM XML that cannot be deserialized.\n\nAdded in version 2.3.\n\nReturns\n\neco2412.BillOfMaterials or eco2301.BillOfMaterials\n\n\n\nRaises\n\nValueError\n\nIf the BoM cannot be deserialized. Additional detail is included in the exception message.\n\nValueError\n\nIf the BoM contains data that cannot be represented by ref_grantami_bomanalytics_bom_eco2412 or\nref_grantami_bomanalytics_bom_eco2301 classes and allow_unsupported_data = False is specified.\nThe additional data fields are reported in the exception message.\n\n\n\nload_bom_from_text(bom_text, allow_unsupported_data=True)\n\nRead a BoM from a string and return the corresponding BillOfMaterials object for use.\n\nParameters\n\nbom_text\n\npython:str\n\nString object containing an XML representation of a BoM.\n\nallow_unsupported_data\n\nbool, default: python:True\n\nIf False, an exception is raised if there is data in the BoM XML that cannot be deserialized.\n\nAdded in version 2.3.\n\nReturns\n\neco2412.BillOfMaterials or eco2301.BillOfMaterials\n\n\n\nRaises\n\nValueError\n\nIf the BoM cannot be deserialized.\n\nValueError\n\nIf the BoM contains data that cannot be represented by ref_grantami_bomanalytics_bom_eco2412 or\nref_grantami_bomanalytics_bom_eco2301 classes and allow_unsupported_data = False is specified.\nThe additional data fields are reported in the exception message.\n\n\n\nconvert(bom, target_bom_version, allow_unsupported_data=True)\n\nConvert a BoM from one version to another.\n\nThe BoM is returned as an instance of the type specified in the target_bom_version argument.\n\nAdded in version 2.3.\n\nParameters\n\nbom\n\neco2412.BillOfMaterials or eco2301.BillOfMaterials\n\nThe BoM to convert.\n\ntarget_bom_version\n\nType[eco2412.BillOfMaterials] | Type[eco2301.BillOfMaterials]\n\nThe BillOfMaterials class to convert the provided BoM to. Must be a class, not an instance of a\nclass.\n\nallow_unsupported_data\n\nbool, default: python:True\n\nIf False, an exception is raised if there is data in the provided BoM that cannot be represented in the\ntarget BoM version.\n\nReturns\n\neco2412.BillOfMaterials or eco2301.BillOfMaterials\n\n\n\nRaises\n\nValueError\n\nIf the BoM cannot be deserialized. Additional detail is included in the exception message.\n\nValueError\n\nIf the BoM contains data that cannot be represented by classes in the target XML namespace and\nallow_unsupported_data = False is specified.\n\nValueError\n\nIf the target_bom_version argument is invalid.\n\n\n\ndump_bom(bom)\n\nConvert a BillOfMaterials object into a string XML representation.\n\nParameters\n\nbom\n\neco2412.BillOfMaterials or eco2301.BillOfMaterials\n\n\n\nReturns\n\npython:str\n\nSerialized representation of the BoM.\n\nWatchListIndicator\n\nRoHSIndicator"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-4_Processes.html#process-phase","title":"Process phase","text":"Process phase\n\nThis example shows how to explore the process phase results of a sustainability summary query.\n\nThe following supporting files are required for this example:\n\nsustainability-bom-2412.xml\n\nFor help on constructing an XML BoM, see BoM examples.\n\nInfo:\n\nThis example uses an input file that is in the 24/12 XML BoM format. This structure requires Granta MI Restricted Substances and Sustainability Reports 2025 R2 or later.\n\nTo run this example with an older version of the reports bundle, use sustainability-bom-2301.xml instead. Some sections of this example will produce different results from the published example when this BoM is used."},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-4_Processes.html#run-a-sustainability-summary-query","title":"Process phase > Run a sustainability summary query","text":"Run a sustainability summary query\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-4_Processes.html#process-phase","title":"Process phase","text":"Process phase\n\nThe environmental contributions from primary and secondary processing (applied to materials) and the joining and finishing processes (applied to parts) are summarized in the primary_processes_details, secondary_processes_details, and joining_and_finishing_processes_details properties respectively. Each of these properties lists the unique process-material pairs (for primary and secondary processing) or individual processes (for joining and finishing) that contribute at least 5% of\nthe total impact for that category of process. The percentage contributions are relative to the total contribution of all processes from the same category. Processes that do not meet the contribution threshold are aggregated under the Other item, with the material set to None."},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-4_Processes.html#primary-processing","title":"Process phase > Primary processing","text":"Primary processing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Name to each item that represents the process-material pair name.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis example produces multiple plots which all consist of a pair of pie charts representing the “Embodied Energy” and “Climate Change CO2 equivalent” impacts respectively. Define a helper function to create these plots.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-4_Processes.html#secondary-processing","title":"Process phase > Secondary processing","text":"Secondary processing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Name to each item that represents the process-material pair name.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/5_Sustainability_summary/5-4_Processes.html#joining-and-finishing","title":"Process phase > Joining and finishing","text":"Joining and finishing\n\nJoining and finishing processes apply to parts or assemblies and therefore don’t include a material identity.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}]